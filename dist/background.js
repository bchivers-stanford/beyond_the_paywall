var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
	  path: basedir,
	  exports: {},
	  require: function (path, base) {
      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    }
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

createCommonjsModule(function (module, exports) {
(function (global, factory) {
  {
    factory(module);
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : commonjsGlobal, function (module) {

  if (typeof browser === "undefined" || Object.getPrototypeOf(browser) !== Object.prototype) {
    const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE = "The message port closed before a response was received.";
    const SEND_RESPONSE_DEPRECATION_WARNING = "Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)"; // Wrapping the bulk of this polyfill in a one-time-use function is a minor
    // optimization for Firefox. Since Spidermonkey does not fully parse the
    // contents of a function until the first time it's called, and since it will
    // never actually need to be called, this allows the polyfill to be included
    // in Firefox nearly for free.

    const wrapAPIs = extensionAPIs => {
      // NOTE: apiMetadata is associated to the content of the api-metadata.json file
      // at build time by replacing the following "include" with the content of the
      // JSON file.
      const apiMetadata = {
        "alarms": {
          "clear": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "clearAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "get": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "bookmarks": {
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getChildren": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getRecent": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getSubTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTree": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "browserAction": {
          "disable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "enable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "getBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getBadgeText": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "openPopup": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setBadgeText": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "browsingData": {
          "remove": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "removeCache": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCookies": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeDownloads": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFormData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeHistory": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeLocalStorage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePasswords": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePluginData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "settings": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "commands": {
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "contextMenus": {
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "cookies": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAllCookieStores": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "set": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "devtools": {
          "inspectedWindow": {
            "eval": {
              "minArgs": 1,
              "maxArgs": 2,
              "singleCallbackArg": false
            }
          },
          "panels": {
            "create": {
              "minArgs": 3,
              "maxArgs": 3,
              "singleCallbackArg": true
            },
            "elements": {
              "createSidebarPane": {
                "minArgs": 1,
                "maxArgs": 1
              }
            }
          }
        },
        "downloads": {
          "cancel": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "download": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "erase": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFileIcon": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "open": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "pause": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFile": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "resume": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "extension": {
          "isAllowedFileSchemeAccess": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "isAllowedIncognitoAccess": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "history": {
          "addUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "deleteRange": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getVisits": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "i18n": {
          "detectLanguage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAcceptLanguages": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "identity": {
          "launchWebAuthFlow": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "idle": {
          "queryState": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "management": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getSelf": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setEnabled": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "uninstallSelf": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "notifications": {
          "clear": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPermissionLevel": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "pageAction": {
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "hide": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "permissions": {
          "contains": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "request": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "runtime": {
          "getBackgroundPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPlatformInfo": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "openOptionsPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "requestUpdateCheck": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "sendMessage": {
            "minArgs": 1,
            "maxArgs": 3
          },
          "sendNativeMessage": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "setUninstallURL": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "sessions": {
          "getDevices": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getRecentlyClosed": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "restore": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "storage": {
          "local": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          },
          "managed": {
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            }
          },
          "sync": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          }
        },
        "tabs": {
          "captureVisibleTab": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "detectLanguage": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "discard": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "duplicate": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "executeScript": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getZoom": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getZoomSettings": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "goBack": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "goForward": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "highlight": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "insertCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "query": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "reload": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "sendMessage": {
            "minArgs": 2,
            "maxArgs": 3
          },
          "setZoom": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "setZoomSettings": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "update": {
            "minArgs": 1,
            "maxArgs": 2
          }
        },
        "topSites": {
          "get": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "webNavigation": {
          "getAllFrames": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFrame": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "webRequest": {
          "handlerBehaviorChanged": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "windows": {
          "create": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getLastFocused": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        }
      };

      if (Object.keys(apiMetadata).length === 0) {
        throw new Error("api-metadata.json has not been included in browser-polyfill");
      }
      /**
       * A WeakMap subclass which creates and stores a value for any key which does
       * not exist when accessed, but behaves exactly as an ordinary WeakMap
       * otherwise.
       *
       * @param {function} createItem
       *        A function which will be called in order to create the value for any
       *        key which does not exist, the first time it is accessed. The
       *        function receives, as its only argument, the key being created.
       */


      class DefaultWeakMap extends WeakMap {
        constructor(createItem, items = undefined) {
          super(items);
          this.createItem = createItem;
        }

        get(key) {
          if (!this.has(key)) {
            this.set(key, this.createItem(key));
          }

          return super.get(key);
        }

      }
      /**
       * Returns true if the given object is an object with a `then` method, and can
       * therefore be assumed to behave as a Promise.
       *
       * @param {*} value The value to test.
       * @returns {boolean} True if the value is thenable.
       */


      const isThenable = value => {
        return value && typeof value === "object" && typeof value.then === "function";
      };
      /**
       * Creates and returns a function which, when called, will resolve or reject
       * the given promise based on how it is called:
       *
       * - If, when called, `chrome.runtime.lastError` contains a non-null object,
       *   the promise is rejected with that value.
       * - If the function is called with exactly one argument, the promise is
       *   resolved to that value.
       * - Otherwise, the promise is resolved to an array containing all of the
       *   function's arguments.
       *
       * @param {object} promise
       *        An object containing the resolution and rejection functions of a
       *        promise.
       * @param {function} promise.resolve
       *        The promise's resolution function.
       * @param {function} promise.rejection
       *        The promise's rejection function.
       * @param {object} metadata
       *        Metadata about the wrapped method which has created the callback.
       * @param {integer} metadata.maxResolvedArgs
       *        The maximum number of arguments which may be passed to the
       *        callback created by the wrapped async function.
       *
       * @returns {function}
       *        The generated callback function.
       */


      const makeCallback = (promise, metadata) => {
        return (...callbackArgs) => {
          if (extensionAPIs.runtime.lastError) {
            promise.reject(extensionAPIs.runtime.lastError);
          } else if (metadata.singleCallbackArg || callbackArgs.length <= 1 && metadata.singleCallbackArg !== false) {
            promise.resolve(callbackArgs[0]);
          } else {
            promise.resolve(callbackArgs);
          }
        };
      };

      const pluralizeArguments = numArgs => numArgs == 1 ? "argument" : "arguments";
      /**
       * Creates a wrapper function for a method with the given name and metadata.
       *
       * @param {string} name
       *        The name of the method which is being wrapped.
       * @param {object} metadata
       *        Metadata about the method being wrapped.
       * @param {integer} metadata.minArgs
       *        The minimum number of arguments which must be passed to the
       *        function. If called with fewer than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {integer} metadata.maxArgs
       *        The maximum number of arguments which may be passed to the
       *        function. If called with more than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {integer} metadata.maxResolvedArgs
       *        The maximum number of arguments which may be passed to the
       *        callback created by the wrapped async function.
       *
       * @returns {function(object, ...*)}
       *       The generated wrapper function.
       */


      const wrapAsyncFunction = (name, metadata) => {
        return function asyncFunctionWrapper(target, ...args) {
          if (args.length < metadata.minArgs) {
            throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
          }

          if (args.length > metadata.maxArgs) {
            throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
          }

          return new Promise((resolve, reject) => {
            if (metadata.fallbackToNoCallback) {
              // This API method has currently no callback on Chrome, but it return a promise on Firefox,
              // and so the polyfill will try to call it with a callback first, and it will fallback
              // to not passing the callback if the first call fails.
              try {
                target[name](...args, makeCallback({
                  resolve,
                  reject
                }, metadata));
              } catch (cbError) {
                console.warn(`${name} API method doesn't seem to support the callback parameter, ` + "falling back to call it without a callback: ", cbError);
                target[name](...args); // Update the API method metadata, so that the next API calls will not try to
                // use the unsupported callback anymore.

                metadata.fallbackToNoCallback = false;
                metadata.noCallback = true;
                resolve();
              }
            } else if (metadata.noCallback) {
              target[name](...args);
              resolve();
            } else {
              target[name](...args, makeCallback({
                resolve,
                reject
              }, metadata));
            }
          });
        };
      };
      /**
       * Wraps an existing method of the target object, so that calls to it are
       * intercepted by the given wrapper function. The wrapper function receives,
       * as its first argument, the original `target` object, followed by each of
       * the arguments passed to the original method.
       *
       * @param {object} target
       *        The original target object that the wrapped method belongs to.
       * @param {function} method
       *        The method being wrapped. This is used as the target of the Proxy
       *        object which is created to wrap the method.
       * @param {function} wrapper
       *        The wrapper function which is called in place of a direct invocation
       *        of the wrapped method.
       *
       * @returns {Proxy<function>}
       *        A Proxy object for the given method, which invokes the given wrapper
       *        method in its place.
       */


      const wrapMethod = (target, method, wrapper) => {
        return new Proxy(method, {
          apply(targetMethod, thisObj, args) {
            return wrapper.call(thisObj, target, ...args);
          }

        });
      };

      let hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);
      /**
       * Wraps an object in a Proxy which intercepts and wraps certain methods
       * based on the given `wrappers` and `metadata` objects.
       *
       * @param {object} target
       *        The target object to wrap.
       *
       * @param {object} [wrappers = {}]
       *        An object tree containing wrapper functions for special cases. Any
       *        function present in this object tree is called in place of the
       *        method in the same location in the `target` object tree. These
       *        wrapper methods are invoked as described in {@see wrapMethod}.
       *
       * @param {object} [metadata = {}]
       *        An object tree containing metadata used to automatically generate
       *        Promise-based wrapper functions for asynchronous. Any function in
       *        the `target` object tree which has a corresponding metadata object
       *        in the same location in the `metadata` tree is replaced with an
       *        automatically-generated wrapper function, as described in
       *        {@see wrapAsyncFunction}
       *
       * @returns {Proxy<object>}
       */

      const wrapObject = (target, wrappers = {}, metadata = {}) => {
        let cache = Object.create(null);
        let handlers = {
          has(proxyTarget, prop) {
            return prop in target || prop in cache;
          },

          get(proxyTarget, prop, receiver) {
            if (prop in cache) {
              return cache[prop];
            }

            if (!(prop in target)) {
              return undefined;
            }

            let value = target[prop];

            if (typeof value === "function") {
              // This is a method on the underlying object. Check if we need to do
              // any wrapping.
              if (typeof wrappers[prop] === "function") {
                // We have a special-case wrapper for this method.
                value = wrapMethod(target, target[prop], wrappers[prop]);
              } else if (hasOwnProperty(metadata, prop)) {
                // This is an async method that we have metadata for. Create a
                // Promise wrapper for it.
                let wrapper = wrapAsyncFunction(prop, metadata[prop]);
                value = wrapMethod(target, target[prop], wrapper);
              } else {
                // This is a method that we don't know or care about. Return the
                // original method, bound to the underlying object.
                value = value.bind(target);
              }
            } else if (typeof value === "object" && value !== null && (hasOwnProperty(wrappers, prop) || hasOwnProperty(metadata, prop))) {
              // This is an object that we need to do some wrapping for the children
              // of. Create a sub-object wrapper for it with the appropriate child
              // metadata.
              value = wrapObject(value, wrappers[prop], metadata[prop]);
            } else if (hasOwnProperty(metadata, "*")) {
              // Wrap all properties in * namespace.
              value = wrapObject(value, wrappers[prop], metadata["*"]);
            } else {
              // We don't need to do any wrapping for this property,
              // so just forward all access to the underlying object.
              Object.defineProperty(cache, prop, {
                configurable: true,
                enumerable: true,

                get() {
                  return target[prop];
                },

                set(value) {
                  target[prop] = value;
                }

              });
              return value;
            }

            cache[prop] = value;
            return value;
          },

          set(proxyTarget, prop, value, receiver) {
            if (prop in cache) {
              cache[prop] = value;
            } else {
              target[prop] = value;
            }

            return true;
          },

          defineProperty(proxyTarget, prop, desc) {
            return Reflect.defineProperty(cache, prop, desc);
          },

          deleteProperty(proxyTarget, prop) {
            return Reflect.deleteProperty(cache, prop);
          }

        }; // Per contract of the Proxy API, the "get" proxy handler must return the
        // original value of the target if that value is declared read-only and
        // non-configurable. For this reason, we create an object with the
        // prototype set to `target` instead of using `target` directly.
        // Otherwise we cannot return a custom object for APIs that
        // are declared read-only and non-configurable, such as `chrome.devtools`.
        //
        // The proxy handlers themselves will still use the original `target`
        // instead of the `proxyTarget`, so that the methods and properties are
        // dereferenced via the original targets.

        let proxyTarget = Object.create(target);
        return new Proxy(proxyTarget, handlers);
      };
      /**
       * Creates a set of wrapper functions for an event object, which handles
       * wrapping of listener functions that those messages are passed.
       *
       * A single wrapper is created for each listener function, and stored in a
       * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`
       * retrieve the original wrapper, so that  attempts to remove a
       * previously-added listener work as expected.
       *
       * @param {DefaultWeakMap<function, function>} wrapperMap
       *        A DefaultWeakMap object which will create the appropriate wrapper
       *        for a given listener function when one does not exist, and retrieve
       *        an existing one when it does.
       *
       * @returns {object}
       */


      const wrapEvent = wrapperMap => ({
        addListener(target, listener, ...args) {
          target.addListener(wrapperMap.get(listener), ...args);
        },

        hasListener(target, listener) {
          return target.hasListener(wrapperMap.get(listener));
        },

        removeListener(target, listener) {
          target.removeListener(wrapperMap.get(listener));
        }

      }); // Keep track if the deprecation warning has been logged at least once.


      let loggedSendResponseDeprecationWarning = false;
      const onMessageWrappers = new DefaultWeakMap(listener => {
        if (typeof listener !== "function") {
          return listener;
        }
        /**
         * Wraps a message listener function so that it may send responses based on
         * its return value, rather than by returning a sentinel value and calling a
         * callback. If the listener function returns a Promise, the response is
         * sent when the promise either resolves or rejects.
         *
         * @param {*} message
         *        The message sent by the other end of the channel.
         * @param {object} sender
         *        Details about the sender of the message.
         * @param {function(*)} sendResponse
         *        A callback which, when called with an arbitrary argument, sends
         *        that value as a response.
         * @returns {boolean}
         *        True if the wrapped listener returned a Promise, which will later
         *        yield a response. False otherwise.
         */


        return function onMessage(message, sender, sendResponse) {
          let didCallSendResponse = false;
          let wrappedSendResponse;
          let sendResponsePromise = new Promise(resolve => {
            wrappedSendResponse = function (response) {
              if (!loggedSendResponseDeprecationWarning) {
                console.warn(SEND_RESPONSE_DEPRECATION_WARNING, new Error().stack);
                loggedSendResponseDeprecationWarning = true;
              }

              didCallSendResponse = true;
              resolve(response);
            };
          });
          let result;

          try {
            result = listener(message, sender, wrappedSendResponse);
          } catch (err) {
            result = Promise.reject(err);
          }

          const isResultThenable = result !== true && isThenable(result); // If the listener didn't returned true or a Promise, or called
          // wrappedSendResponse synchronously, we can exit earlier
          // because there will be no response sent from this listener.

          if (result !== true && !isResultThenable && !didCallSendResponse) {
            return false;
          } // A small helper to send the message if the promise resolves
          // and an error if the promise rejects (a wrapped sendMessage has
          // to translate the message into a resolved promise or a rejected
          // promise).


          const sendPromisedResult = promise => {
            promise.then(msg => {
              // send the message value.
              sendResponse(msg);
            }, error => {
              // Send a JSON representation of the error if the rejected value
              // is an instance of error, or the object itself otherwise.
              let message;

              if (error && (error instanceof Error || typeof error.message === "string")) {
                message = error.message;
              } else {
                message = "An unexpected error occurred";
              }

              sendResponse({
                __mozWebExtensionPolyfillReject__: true,
                message
              });
            }).catch(err => {
              // Print an error on the console if unable to send the response.
              console.error("Failed to send onMessage rejected reply", err);
            });
          }; // If the listener returned a Promise, send the resolved value as a
          // result, otherwise wait the promise related to the wrappedSendResponse
          // callback to resolve and send it as a response.


          if (isResultThenable) {
            sendPromisedResult(result);
          } else {
            sendPromisedResult(sendResponsePromise);
          } // Let Chrome know that the listener is replying.


          return true;
        };
      });

      const wrappedSendMessageCallback = ({
        reject,
        resolve
      }, reply) => {
        if (extensionAPIs.runtime.lastError) {
          // Detect when none of the listeners replied to the sendMessage call and resolve
          // the promise to undefined as in Firefox.
          // See https://github.com/mozilla/webextension-polyfill/issues/130
          if (extensionAPIs.runtime.lastError.message === CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE) {
            resolve();
          } else {
            reject(extensionAPIs.runtime.lastError);
          }
        } else if (reply && reply.__mozWebExtensionPolyfillReject__) {
          // Convert back the JSON representation of the error into
          // an Error instance.
          reject(new Error(reply.message));
        } else {
          resolve(reply);
        }
      };

      const wrappedSendMessage = (name, metadata, apiNamespaceObj, ...args) => {
        if (args.length < metadata.minArgs) {
          throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
        }

        if (args.length > metadata.maxArgs) {
          throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
        }

        return new Promise((resolve, reject) => {
          const wrappedCb = wrappedSendMessageCallback.bind(null, {
            resolve,
            reject
          });
          args.push(wrappedCb);
          apiNamespaceObj.sendMessage(...args);
        });
      };

      const staticWrappers = {
        runtime: {
          onMessage: wrapEvent(onMessageWrappers),
          onMessageExternal: wrapEvent(onMessageWrappers),
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
            minArgs: 1,
            maxArgs: 3
          })
        },
        tabs: {
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
            minArgs: 2,
            maxArgs: 3
          })
        }
      };
      const settingMetadata = {
        clear: {
          minArgs: 1,
          maxArgs: 1
        },
        get: {
          minArgs: 1,
          maxArgs: 1
        },
        set: {
          minArgs: 1,
          maxArgs: 1
        }
      };
      apiMetadata.privacy = {
        network: {
          "*": settingMetadata
        },
        services: {
          "*": settingMetadata
        },
        websites: {
          "*": settingMetadata
        }
      };
      return wrapObject(extensionAPIs, staticWrappers, apiMetadata);
    };

    if (typeof chrome != "object" || !chrome || !chrome.runtime || !chrome.runtime.id) {
      throw new Error("This script should only be loaded in a browser extension.");
    } // The build process adds a UMD wrapper around this file, which makes the
    // `module` variable available.


    module.exports = wrapAPIs(chrome);
  } else {
    module.exports = browser;
  }
});

});

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

const CORE_ADDON_ID = "rally-core@mozilla.org";
const SIGNUP_URL = "https://mozilla-rally.github.io/core-addon/";

class Rally {
  /**
   * Initialize the Rally library.
   *
   * @param {String} keyId
   *        The id of the key used to encrypt outgoing data.
   * @param {Object} key
   *        The JSON Web Key (JWK) used to encrypt the outgoing data.
   *        See the RFC 7517 https://tools.ietf.org/html/rfc7517
   *        for additional information. For example:
   *
   *        {
   *          "kty":"EC",
   *          "crv":"P-256",
   *          "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
   *          "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
   *          "kid":"Public key used in JWS spec Appendix A.3 example"
   *        }
   * @param {Boolean} enableDevMode
   *        Whether or not to initialize Rally.js in developer mode.
   *        In this mode we ignore problems when communicating with
   *        core add-on.
   */
  async initialize(keyId, key, enableDevMode) {
    console.debug("Rally.initialize");

    this._validateEncryptionKey(keyId, key);

    this._keyId = keyId;
    this._key = key;
    this._enableDevMode = Boolean(enableDevMode);

    let hasRally = await this._checkRallyCore().then(() => {
      console.debug("Rally.initialize - Found the Core Add-on.");
      return true;
    }).catch(async () => {
      // We did not find the Rally Core Add-on. But maybe we
      // are in developer mode. Do not trigger the sign-up flow
      // if that's the case.
      if (this._enableDevMode) {
        console.warn("Rally.initialize - Executing in developer mode.");
        return true;
      }

      // The Core Add-on was not found and we're not in developer
      // mode.
      await browser.tabs.create({ url: SIGNUP_URL });
      return false;
    });

    if (!hasRally) {
      throw new Error("Rally.initialize - Initialization failed.");
    }

    // Listen for incoming messages from the Core addon.
    browser.runtime.onMessageExternal.addListener(
      (m, s) => this._handleExternalMessage(m, s));

    // We went through the whole init process, it's now safe
    // to use the Rally public APIs.
    this._initialized = true;
  }

  /**
   * Check if the Core addon is installed.
   *
   * @returns {Promise} resolved if the core addon was found and
   *          communication was successful, rejected otherwise.
   */
  async _checkRallyCore() {
    try {
      const msg = {
        type: "core-check",
        data: {}
      };
      let response =
        await browser.runtime.sendMessage(CORE_ADDON_ID, msg, {});

      if (!response
          || response.type !== "core-check-response"
          || response.data.enrolled !== true) {
        throw new Error(`Rally._checkRallyCore - unexpected response returned ${response}`);
      }
    } catch (ex) {
      throw new Error("Rally._checkRallyCore - core addon not found");
    }
  }

  /**
   * Handles messages coming in from external addons.
   *
   * @param {Object} message
   *        The payload of the message.
   * @param {runtime.MessageSender} sender
   *        An object containing informations about who sent
   *        the message.
   * @returns {Promise} The response to the received message.
   *          It can be resolved with a value that is sent to the
   *          `sender`.
   */
  _handleExternalMessage(message, sender) {
    // We only expect messages coming from the core addon.
    if (sender.id != CORE_ADDON_ID) {
      return Promise.reject(
        new Error(`Rally._handleExternalMessage - unexpected sender ${sender.id}`));
    }

    switch (message.type) {
      case "uninstall":
        return browser.management.uninstallSelf({showConfirmDialog: false});
      default:
        return Promise.reject(
          new Error(`Rally._handleExternalMessage - unexpected message type ${message.type}`));
    }
  }

  /**
   * Validate the provided encryption keys.
   *
   * @param {String} keyId
   *        The id of the key used to encrypt outgoing data.
   * @param {Object} key
   *        The JSON Web Key (JWK) used to encrypt the outgoing data.
   *        See the RFC 7517 https://tools.ietf.org/html/rfc7517
   *        for additional information. For example:
   *
   *        {
   *          "kty":"EC",
   *          "crv":"P-256",
   *          "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
   *          "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
   *          "kid":"Public key used in JWS spec Appendix A.3 example"
   *        }
   *
   * @throws {Error} if either the key id or the JWK key object are
   *         invalid.
   */
  _validateEncryptionKey(keyId, key) {
    if (typeof keyId !== "string") {
      throw new Error(`Rally._validateEncryptionKey - Invalid encryption key id ${keyId}`);
    }

    if (typeof key !== "object") {
      throw new Error(`Rally._validateEncryptionKey - Invalid encryption key ${key}`);
    }
  }

  /**
   * Submit an encrypted ping through the Rally Core addon.
   *
   * @param {String} payloadType
   *        The type of the encrypted payload. This will define the
   *        `schemaName` of the ping.
   * @param {Object} payload
   *        A JSON-serializable payload to be sent with the ping.
   */
  async sendPing(payloadType, payload) {
    if (!this._initialized) {
      console.error("Rally.sendPing - Not initialzed, call `initialize()`");
      return;
    }

    // When in developer mode, dump the payload to the console.
    if (this._enableDevMode) {
      console.log(
        `Rally.sendPing - Developer mode. ${payloadType} will not be submitted`,
        payload
      );
      return;
    }

    // Wrap everything in a try block, as we don't really want
    // data collection to be the culprit of a bug hindering user
    // experience.
    try {
      // The unique identifier of the study can be used as the
      // namespace, in order to make sure data is routed to the
      // proper analysis sandbox.
      const studyName = browser.runtime.id;

      // This function may be mistakenly called while init has not
      // finished. Let's be safe and check for key validity again.
      this._validateEncryptionKey(this._keyId, this._key);

      const msg = {
        type: "telemetry-ping",
        data: {
          payloadType: payloadType,
          payload: payload,
          namespace: studyName,
          keyId: this._keyId,
          key: this._key
        }
      };
      await browser.runtime.sendMessage(CORE_ADDON_ID, msg, {});
    } catch (ex) {
      console.error(`Rally.sendPing - error while sending ${payloadType}`, ex);
    }
  }
}

/**
 * This module provides utilities for logging debugging events.
 * The module currently just outputs events with `console.debug`.
 * 
 * @module webScience.debugging
 */

/**
 * A function that outputs a message to `console.debug` in a consistent format.
 * @callback debuggingLogger
 * @param {string} message - The message to output to `console.debug`.
 */

/**
 * Create a debugging logger, a function that logs debugging events (as strings).
 * @param {string} moduleName - A name that uniquely identifies the module
 * generating the debugging events.
 * @returns {debuggingLogger} - A debugging logger.
 */
function getDebuggingLog(moduleName) {
    return ((text) => {
    });
}

/**
 * This module facilitates checking that required permissions are
 * provided in the WebExtensions manifest.
 * 
 * @module webScience.permissions
 */

/**
 * An object where keys are Content Security Policy directive names and values are arrays of directive values.
 * @typedef {Object} ContentSecurityPolicy
 * @example
 * {
 *   "script-src": [ "'self'", "www.example.com"],
 *   "object-src": [ 'self' ]
 * }
 */

/**
 * The Content Security Policy directives specified in the Content Security Policy Level 3 Working Draft.
 * @constant {Set<string>}
 * @private
 */
const contentSecurityPolicyDirectives = new Set([ "child-src", "connect-src", "default-src", "font-src", "frame-src", "img-src", "manifest-src", "media-src", "object-src", "prefetch-src", "script-src", "script-src-elem", "script-src-attr", "style-src", "style-src-attr", "worker-src" ]);

/**
 * The Content Security Policy fallback directives specified in the Content Security Policy Level 3 Working Draft.
 * Property names are directive names and property values are arrays of fallback directive names.
 * @constant {Object}
 * @private
 */
const contentSecurityPolicyDirectiveFallbacks = {
    "script-src-elem": [ "script-src-elem", "script-src", "default-src" ],
    "script-src-attr": [ "script-src-attr", "script-src", "default-src" ],
    "style-src-elem": [ "style-src-elem", "style-src", "default-src" ],
    "style-src-attr": [ "style-src-attr", "style-src", "default-src" ],
    "worker-src": [ "worker-src", "child-src", "script-src", "default-src" ],
    "connect-src": [ "connect-src", "default-src" ],
    "manifest-src": [ "manifest-src", "default-src" ],
    "prefetch-src": [ "prefetch-src", "default-src" ],
    "object-src": [ "object-src", "default-src" ],
    "frame-src": [ "frame-src", "child-src", "default-src" ],
    "media-src": [ "media-src", "default-src" ],
    "font-src": [ "font-src", "default-src" ],
    "img-src": [ "img-src", "default-src" ]
};

/**
 * Parses a Content Security Policy from a string. We do not validate the manifest Content Security Policy because
 * the browser validates it.
 * @param {string} contentSecurityPolicyString - The input Content Security Policy string.
 * @returns {ContentSecurityPolicy} The parsed Content Security Policy.
 * @private
 */
function parseContentSecurityPolicy(contentSecurityPolicyString) {
    const parsedContentSecurityPolicy = {};
    const directiveNameAndValueStrings = contentSecurityPolicyString.split(/;(?: )*/);
    for(const directiveNameAndValueString of directiveNameAndValueStrings) {
        const directiveNameAndValueTokens = directiveNameAndValueString.split(/(?: )+/);
        if(directiveNameAndValueTokens.length > 0) {
            const directiveName = directiveNameAndValueTokens[0];
            const directiveValues = directiveNameAndValueTokens.slice(1);
            if(contentSecurityPolicyDirectives.has(directiveName)) {
                parsedContentSecurityPolicy[directiveName] = directiveValues;
            }
        }
    }
    return parsedContentSecurityPolicy;
}

/**
 * Check that a directive is provided in a Content Security Policy.
 * @param {*} directiveName - The name of the directive to check.
 * @param {*} directiveValue - The value of the directive to check.
 * @param {*} contentSecurityPolicy - The Content Security Policy to check the directive against.
 * @param {boolean} [checkFallbackDirectives=true] - Whether to check the fallback directives for the specified directive.
 * @private
 */
function checkContentSecurityPolicyDirective(directiveName, directiveValue, contentSecurityPolicy, checkFallbackDirectives = true) {
    if(directiveName in contentSecurityPolicy) {
        if(contentSecurityPolicy[directiveName].includes(directiveValue)) {
            return true;
        }
        return false;
    }
    if(checkFallbackDirectives && directiveName in contentSecurityPolicyDirectiveFallbacks) {
        for(const fallbackDirectiveName of contentSecurityPolicyDirectiveFallbacks[directiveName]) {
            if(fallbackDirectiveName in contentSecurityPolicy) {
                if(contentSecurityPolicy[fallbackDirectiveName].includes(directiveValue)) {
                    return true;
                }
                return false;
            }
        }
    }
    return false;
}

/**
 * Check that the WebExtensions manifest includes specified API and origin permissions.
 * @param {Object} options
 * @param {string[]} [options.requiredPermissions=[]] - WebExtensions API permissions that are required.
 * @param {string[]} [options.suggestedPermissions=[]] - WebExtensions API permissions that are recommended.
 * @param {string[]} [options.requiredOrigins=[]] - Origin permissions that are required.
 * @param {string[]} [options.suggestedOrigins=[]] - Origin permissions that are recommended.
 * @param {ContentSecurityPolicy} [options.requiredContentSecurityPolicy = {}] - Content Security Policy directives that are required.
 * @param {ContentSecurityPolicy} [options.suggestedContentSecurityPolicy = {}] - Content Security Policy directives that are recommended.
 * @param {string} [options.warn=true] - Whether to output any permissions errors on console.warn.
 * @param {string} [options.module="moduleNameNotProvided"] - The name of the module having its permissions checked.
 * @returns {boolean} Whether the permissions check passed.
 */
async function check({
    requiredPermissions = [],
    requiredOrigins = [],
    suggestedPermissions = [],
    suggestedOrigins = [],
    requiredContentSecurityPolicy = {},
    suggestedContentSecurityPolicy = {},
    warn = true,
    module = "moduleNameNotProvided"
}) {
    // If this function is called in an environment other than a background script (e.g., a content script),
    // that very likely means the call was left in as a possible side effect during bundling when we wanted
    // it to be tree shaken out. If that's the case, just return true.
    if(!("permissions" in browser)) {
        return true;
    }

    let passed = true;

    // API permissions
    if(requiredPermissions.length > 0) {
        const requiredPermissionsCheck = await browser.permissions.contains({ permissions: requiredPermissions });
        passed = passed && requiredPermissionsCheck;
        if(!requiredPermissionsCheck && warn) {
            console.warn(`${module} is missing required API permissions: ${JSON.stringify(requiredPermissions)}`);
        }
    }
    if(suggestedPermissions.length > 0) {
        const suggestedPermissionsCheck = await browser.permissions.contains({ permissions: suggestedPermissions });
        if(!suggestedPermissionsCheck && warn) {
            console.warn(`${module} is missing recommended API permissions: ${JSON.stringify(suggestedPermissions)}`);
        }
    }

    // Origin permissions
    if(requiredOrigins.length > 0) {
        const requiredOriginsCheck = await browser.permissions.contains({ origins: requiredOrigins });
        passed = passed && requiredOriginsCheck;
        if(!requiredOriginsCheck && warn) {
            console.warn(`${module} is missing required origin permissions: ${JSON.stringify(requiredOrigins)}`);
        }
    }
    if(suggestedOrigins.length > 0) {
        const suggestedOriginsCheck = await browser.permissions.contains({ origins: suggestedOrigins });
        if(!suggestedOriginsCheck && warn) {
            console.warn(`${module} is missing recommended origin permissions: ${JSON.stringify(suggestedOrigins)}`);
        }
    }

    // Content Security Policy directives
    let manifestContentSecurityPolicyString = "";
    const manifest = browser.runtime.getManifest();
    if("content_security_policy" in manifest) {
        manifestContentSecurityPolicyString = manifest["content_security_policy"];
    }
    const manifestContentSecurityPolicy = parseContentSecurityPolicy(manifestContentSecurityPolicyString);
    let passedRequiredContentSecurityPolicy = true;
    for(const directiveName of Object.keys(requiredContentSecurityPolicy)) {
        for(const directiveValue of requiredContentSecurityPolicy[directiveName]) {
            passedRequiredContentSecurityPolicy = passedRequiredContentSecurityPolicy && checkContentSecurityPolicyDirective(directiveName, directiveValue, manifestContentSecurityPolicy);
        }
    }
    passed = passed && passedRequiredContentSecurityPolicy;
    if(!passedRequiredContentSecurityPolicy && warn) {
        console.warn(`${module} is missing required Content Security Policy directives: ${JSON.stringify(requiredContentSecurityPolicy)}`);
    }
    let passedSuggestedContentSecurityPolicy = true;
    for(const directiveName of Object.keys(suggestedContentSecurityPolicy)) {
        for(const directiveValue of suggestedContentSecurityPolicy[directiveName]) {
            passedSuggestedContentSecurityPolicy = passedSuggestedContentSecurityPolicy && checkContentSecurityPolicyDirective(directiveName, directiveValue, manifestContentSecurityPolicy);
        }
    }
    passed = passed && passedSuggestedContentSecurityPolicy;
    if(!passedSuggestedContentSecurityPolicy && warn) {
        console.warn(`${module} is missing recommended Content Security Policy directives: ${JSON.stringify(suggestedContentSecurityPolicy)}`);
    }

    return passed;
}

/**
 * This module provides convenient storage abstractions on top of extension local
 * storage. These abstractions minimize code duplication and opportunities for
 * error, and allow us to switch the underlying storage implementation in future.
 *
 * @module webScience.storage
 */

check({
    module: "webScience.storage",
    requiredPermissions: [ "storage" ],
    suggestedPermissions: [ "unlimitedStorage" ]
});

/**
 * Create a key-value storage area.
 * @param {string} storageAreaName - A name that uniquely identifies the storage area.
 * @returns {KeyValueStorage} The new KeyValueStorage object.
 * @example const exampleStorage = createKeyValueStorage("exampleName"));
 */
function createKeyValueStorage(storageAreaName) {
    return new KeyValueStorage(storageAreaName);
}

/**
 * Class for a key-value storage area, where the key is a string and the value can have
 * any of a number of basic types.
 */
class KeyValueStorage {
    /**
     * Create a key-value storage area. Storage is implemented with extension local storage.
     * @param {string} storageAreaName - A name that uniquely identifies the storage area.
     * @private
     */
    constructor(storageAreaName) {
        this.storageAreaName = storageAreaName;
        return this;
    }

    /**
     * Convert a key used in a storage area to a key in extension local storage. 
     * @param {string} key - The key used in the storage area.
     * @returns {string} A key in extension local storage.
     */
    keyToExtensionLocalStorageKey(key) {
        return `webScience.storage.keyValueStorage.${this.storageAreaName}.${key}`;
    } 

    /**
     * Get a value from storage.
     * @param {string} key - The key to use in the storage area.
     * @returns {*} The value in the storage area, or null if the value is not
     * in the storage area.
     */
    async get(key) {
        const storageResult = await browser.storage.local.get({ [this.keyToExtensionLocalStorageKey(key)]: null });
        return storageResult[this.keyToExtensionLocalStorageKey(key)];
    }

    /**
     * Set a value in storage.
     * @param {string} key - The key to use in the storage area.
     * @param {*} value - The value to store in the storage area for the key.
     */
    async set(key, value) {
        await browser.storage.local.set({ [this.keyToExtensionLocalStorageKey(key)]: value });
    }
}

/**
 * A callback function with no parameters.
 * @callback callbackWithoutParameters
 */

/**
 * A class that provides an event API similar to WebExtensions `events.Event` objects.
 * Use the `createEvent` function to create an Event object.
 * @template EventCallbackFunction
 * @template EventOptions
 */
class Event {
    /**
     * Creates an event instance similar to WebExtensions `events.Event` objects.
     * @param {Object} [options] - A set of options for the event.
     * @param {name} [options.name] - The name of the event.
     * @param {addListenerCallback} [options.addListenerCallback] - A function that is
     * called when a listener function is added.
     * @param {removeListenerCallback} [options.removeListenerCallback] - A function
     * that is called when a listener function is removed.
     * @param {notifyListenersCallback} [options.notifyListenersCallback] - A function
     * that is called before a listener is notified and can filter the notification.
     * @private
     */
    constructor({
        name = null,
        addListenerCallback = null,
        removeListenerCallback = null,
        notifyListenersCallback = null
    } = {
        name: null,
        addListenerCallback: null,
        removeListenerCallback: null,
        notifyListenersCallback: null
    }) {
        this.name = name;
        this.addListenerCallback = addListenerCallback;
        this.removeListenerCallback = removeListenerCallback;
        this.notifyListenersCallback = notifyListenersCallback;
        this.listeners = new Map();
    }

    /**
     * A callback function that is called immediately before a new listener function is added.
     * @callback addListenerCallback
     * @param {EventCallbackFunction} listener - The new listener function.
     * @param {EventOptions} options - The options for the new listener function.
     */

    /**
     * A function that adds an event listener, with optional parameters. If the
     * listener has previously been added for the event, the listener's options
     * (if any) will be updated.
     * @param {EventCallbackFunction} listener - The function to call when the event fires.
     * @param {EventOptions} options - Options for when the listener should be called.
     * The supported option(s) depend on the event type.
     */
    addListener(listener, options) {
        if(this.addListenerCallback !== null) {
            this.addListenerCallback(listener, options);
        }
        this.listeners.set(listener, options);
        // If the event has a name, annotate the listener with the name
        if(typeof this.name === "string") {
            listener.webScienceEventName = this.name;
        }
    }

    /**
     * A callback function that is called immediately after a listener function is removed.
     * @callback removeListenerCallback
     * @param {EventCallbackFunction} listener - The listener function to remove.
     * @param {EventOptions} options - The options that the listener was added with.
     */

    /**
     * A function that removes an event listener.
     * @param {EventCallbackFunction} listener - The listener function to remove.
     */
    removeListener(listener) {
        if(this.removeListenerCallback !== null) {
            this.removeListenerCallback(listener, this.listeners.get(listener));
        }
        this.listeners.delete(listener);
    }

    /**
     * A function that checks whether a particular event listener has been added.
     * @param {EventCallbackFunction} listener - The listener function to check.
     * @returns {boolean} Whether the listener function has been added.
     */
    hasListener(listener) {
        return this.listeners.has(listener);
    }

    /**
     * Checks whether there are any listeners registered.
     * @returns {boolean} Whether there are any listeners
     */
    hasAnyListeners() {
        return this.listeners.size > 0;
    }

    /**
     * A callback function that is called when a listener function may be notified.
     * @callback notifyListenersCallback
     * @param {EventCallbackFunction} listener - The listener function that may be called.
     * @param {Array} listenerArguments - The arguments that would be passed to the listener
     * function.
     * @param {EventOptions} options - The options that the listener was added with.
     * @returns {boolean} Whether to call the listener function.
     */

    /**
     * Notify the listener functions for the event.
     * @param {Array} [listenerArguments=[]] - The arguments that will be passed to listener
     * functions.
     */
    notifyListeners(listenerArguments = []) {
        this.listeners.forEach((options, listener) => {
            try {
                if((this.notifyListenersCallback === null) || this.notifyListenersCallback(listener, listenerArguments, options))
                    listener.apply(null, listenerArguments);
            }
            catch(error) {
            }
        });
    }
}

/**
 * An extension of the Event class that permits only one listener at a time.
 * @template EventCallbackFunction
 * @template EventOptions
 * @extends {Event<EventCallbackFunction, EventOptions>}
 * @private
 */
class EventSingleton extends Event {
    /**
     * A function that adds an event listener, with optional parameters. If the
     * listener has previously been added for the event, the listener's options
     * (if any) will be updated.
     * @param {EventCallbackFunction} listener - The function to call when the event fires.
     * @param {EventOptions} options - Options for when the listener should be called.
     * The supported option(s) depend on the event type.
     * @throws {Error} This function throws an Error if there is already a listener for
     * the event.
     */
    addListener(listener, options) {
        if(this.listeners.size > 0)
            throw new Error("Error: cannot add more than one listener to EventSingleton event.");
        super.addListener(listener, options);
    }
}

/**
 * Create a new Event object that implements WebExtensions event syntax, with the
 * provided options.
 * @param {Object} [options] - The options for the event.
 * @param {string} name - The name of the event.
 * @param {addListenerCallback} [options.addListenerCallback] - A function that is
 * called when a listener function is added.
 * @param {removeListenerCallback} [options.removeListenerCallback] - A function
 * that is called when a listener function is removed.
 * @param {notifyListenersCallback} [options.notifyListenersCallback] - A function
 * that is called before a listener is notified and can filter the notification.
 * @param {boolean} [options.singleton = false] - Whether to allow only one listener
 * for the event.
 * @returns {Event} - The created Event object.
 */
 function createEvent({
    name = null,
    addListenerCallback = null,
    removeListenerCallback = null,
    notifyListenersCallback = null,
    singleton = false
} = {
    name: null,
    addListenerCallback: null,
    removeListenerCallback: null,
    notifyListenersCallback: null,
    singleton: false
}) {
    if(singleton) {
        return new EventSingleton({
            name,
            addListenerCallback,
            removeListenerCallback,
            notifyListenersCallback
        });
    }
    return new Event({
        name,
        addListenerCallback,
        removeListenerCallback,
        notifyListenersCallback
    });
}

/**
 * This module provides functionality for passing messages between the
 * background page and content script environments. Messages between the
 * environments are easily malformed, and minor errors in message handlers
 * can have cascading effects. These problems can be quite difficult to debug.
 * This module addresses these issue by providing a simple message type and
 * type checking system on top of `browser.runtime.onMessage` and
 * `browser.tabs.sendMessage`.
 * 
 * # Messages
 * A message, for purposes of this module, must be an object and must have a
 * type property with a string value.
 * 
 * # Schemas
 * A schema, for purposes of this module, must be an object. Each property in
 * the schema object is a property that is required in a corresponding message
 * object. Each value in the schema object is a string that must match the
 * `typeof` value for that property in a corresponding message.
 * 
 * @module webScience.messaging
 */

/**
 * @constant {debugging.debuggingLogger}
 * @private
 */
const debugLog = getDebuggingLog();

/**
 * A Map that stores message listeners. The keys are message types and the values
 * are Sets of message listeners.
 * @private
 * @constant {Map<string,Set<Function>>}
 */
const messageRouter = new Map();

/**
 * A Map that stores message schemas. The keys are message types and the values
 * are schemas.
 * @private
 * @constant {Map<string,Object>}
 */
const messageSchemas = new Map();

/**
 * Whether the module's `browser.runtime.onMessage` listener has been registered.
 * @private
 * @type {boolean}
 * @default
 */
let initialized = false;

/**
 * Validates that a message is an object with a type string.
 * @param {Object} message - The message.
 * @returns {boolean} Whether the message is an object with a type string.
 * @private
 */
function validateMessageObject(message) {
    // If the message does not have the right type, fail validation.
    if ((typeof message !== "object") || (message === null)) {
        return false;
    }

    // If there is no type string, fail validation.
    if(!("type" in message) || (typeof message.type !== "string")) {
        debugLog(`Unable to validate message object with missing type string: ${JSON.stringify(message)}`);
        return false;
    }

    return true;
}

/**
 * Validates a message against a registered schema. Assumes that the message is an object
 * with a type string. If you cannot guarantee that, call `validateMessageObject` first.
 * @param {Object} message - The message, which must be an object that matches the properties
 * and types specified in the schema.
 * @param {Object} [messageSchema] - The schema to use for validation. If no schema is
 * specified, this function attempts to retrieve the registered schema for the message type.
 * @returns {boolean} Whether the message successfully validated against the schema. Returns
 * `false` if there is a schema mismatch or if there is no schema registered for the message
 * type.
 * @private
 */
function validateMessageAgainstSchema(message, messageSchema)
{
    // If the caller doesn't specify a message schema, attempt to retrieve the registered schema.
    if(messageSchema === undefined) {
        messageSchema = messageSchemas.get(message.type);
        if(messageSchema === undefined) {
            debugLog(`No schema for message with type: ${message.type}`);
            return false;
        }
    }

    // Check the message against the schema.
    for(const field in messageSchema) {
        if (!(field in message) || (typeof message[field] !== messageSchema[field])) {
            debugLog(`Mismatch between message and schema: ${JSON.stringify(message)}`);
            return false;
        }
    }
    return true;
}

/**
 * A listener for `browser.runtime.onMessage` that routes messages to the right
 * listener(s) based on message type. See the documentation for `browser.runtime.onMessage`
 * for detail on the parameters.
 * @returns {Promise} - An optional response to the message.
 * @private
 */
function browserRuntimeListener(message, sender, sendResponse) {
    let messageListeners, messageSchema, browserRuntimeReturnValue;

    // If the message is not in an expected format, ignore it.
    if(!validateMessageObject(message)) {
        debugLog(`browser.runtime message with unexpected format: ${JSON.stringify(message)}`);
        return;
    }

    // If the message does not have at least one registered listener, ignore it.
    if ((messageListeners = messageRouter.get(message.type)) === undefined) {
        debugLog(`browser.runtime message with no listener for message type: ${JSON.stringify(message)}`);
        return;
    }

    // If there is a schema registered for this message type, check the message against the schema.
    if(((messageSchema = messageSchemas.get(message.type)) !== undefined)
         && !validateMessageAgainstSchema(message, messageSchema)) {
             debugLog(`browser.runtime message failed schema validation: ${JSON.stringify(message)}`);
        return;
    }

    for (const messageListener of messageListeners) {
        const messageListenerReturnValue = messageListener(message, sender, sendResponse);
        if ((messageListenerReturnValue !== undefined) && (browserRuntimeReturnValue !== undefined))
            debugLog(`Multiple listener return values for message type: ${message.type}`);
        browserRuntimeReturnValue = messageListenerReturnValue;
    }
    
    return browserRuntimeReturnValue;
}


/**
 * @callback onMessageListener
 * @param {Object} message - The received message with a matching type string.
 */

/**
 * @callback OnMessageAddListener
 * @param {onMessageListener} listener - The listener to add.
 * @param {Object} options - Options for the listener.
 * @param {string} options.type - A unique string that identifies the message type.
 * @param {object} [options.schema] - A schema for validating messages with this type.
 */

/**
 * @callback OnMessageRemoveListener
 * @param {onMessageListener} listener - The listener to remove.
 */

/**
 * @callback OnMessageHasListener
 * @param {onMessageListener} listener - The listener to check.
 * @returns {boolean} Whether the listener has been added for the event.
 */

/**
 * @callback OnMessageHasAnyListeners
 * @returns {boolean} Whether the event has any listeners.
 */

/**
 * @typedef {Object} OnMessageEvent
 * @property {OnMessageAddListener} addListener - Add a listener for messages.
 * @property {OnMessageRemoveListener} removeListener - Remove a listener for messages.
 * @property {OnMessageHasListener} hasListener - Whether a specified listener has been added.
 * @property {OnMessageHasAnyListeners} hasAnyListeners - Whether the event has any listeners.
 */

/**
 * An event that fires when the background script environment receives a message, usually from
 * a content script.
 * @constant {OnMessageEvent}
 */
const onMessage = createEvent({
    name: "webScience.messaging.onMessage",
    addListenerCallback: (listener, options) => {
        registerListener(options.type, listener, "schema" in options ? options.schema : undefined);
    },
    removeListenerCallback: (listener, options) => {
        unregisterListener(options.type, listener);
    },
    notifyListenersCallback: () => { return false; }
});

/**
 * Registers a message listener.
 * @param {string} messageType - The type of message that triggers the listener function.
 * @param {Function} messageListener - The listener function, which receives the same
 * parameters as if it had been called by `browser.runtime.onMessage`, and that can
 * return the same values as a listener to `browser.runtime.onMessage`.
 * @param {Object} [messageSchema] - An optional schema to register for the message type.
 * @private
 */
function registerListener(messageType, messageListener, messageSchema) {
    if (!initialized) {
        initialized = true;
        browser.runtime.onMessage.addListener(browserRuntimeListener);
    }

    let messageListeners = messageRouter.get(messageType);
    if (messageListeners === undefined) {
        messageListeners = new Set();
        messageRouter.set(messageType, messageListeners);
    }
    messageListeners.add(messageListener);

    if(messageSchema !== undefined) {
        registerSchema(messageType, messageSchema);
    }
}

/**
 * Unregisters a message listener.
 * @param {string} messageType - The type of message that triggers the listener function.
 * @param {Function} messageListener - The listener function.
 * @private
 */
function unregisterListener(messageType, messageListener) {
    const messageListeners = messageRouter.get(messageType);
    if(messageListeners !== undefined) {
        messageListeners.delete(messageListener);
        if(messageListeners.size === 0) {
            messageRouter.delete(messageType);
        }
    }
}

/**
 * Registers a schema for a type of message.
 * @param {string} messageType - The type of message that must follow the schema.
 * @param {Object} messageSchema - An object where each field has a value that is
 * a built-in type string.
 */
function registerSchema(messageType, messageSchema) {
    // Check whether the schema has already been registered
    if(messageSchemas.has(messageType)) {
        return;
    }
    messageSchemas.set(messageType, messageSchema);
}

/**
 * Sends a message to a tab after checking the message against the registered
 * schema for the message type. Equivalent to calling `browser.tabs.sendMessage`
 * with a `catch` handler after validating the message against the schema.
 * @param {number} tabId - The ID of the tab that should receive the message.
 * @param {Object} message - The contents of the message.
 * @returns {Promise} - The same return value as `browser.tabs.sendMessage`,
 * or a Promise that resolves to false if there was an errror sending the message.
 */
function sendMessageToTab(tabId, message) {
    // Validate the outbound message against the schema
    if(!validateMessageObject(message) || !validateMessageAgainstSchema(message)) {
        debugLog(`Attempted to send message that fails validation: ${JSON.stringify(message)}`);
        return new Promise((resolve) => { resolve(false); });
    }
    return browser.tabs.sendMessage(tabId, message).catch((reason) => {
        debugLog(`Unable to send message to tab: ${JSON.stringify(message)}`);
        return false;
    });
}

/**
 * This module enables adding browser idle state listeners with
 * varying detection intervals. The module is needed because the
 * WebExtensions `idle` API currently only supports one detection
 * interval per extension.
 * 
 * The implementation of this module combines the WebExtensions `idle`
 * API and `setTimeout`. It configures the `idle` API to use the
 * minimum idle detection interval with `idle.setDetectionInterval()`,
 * adds a listener for the `idle.onStateChanged` event, and then uses
 * `setTimeout` after the browser goes idle to notify idle state
 * listeners with detection intervals greater than the minimum. If there
 * are any pending idle notification timeouts when the browser goes
 * active, those timeouts are cleared.
 * 
 * Some implementation quirks to be aware of for use and future
 * development:
 * 
 *   * This module depends on configuring the detection interval
 *     for the `idle` API to its minimum value. Any subsequent changes to
 *     the idle state detection interval in the `idle` API will result in
 *     unpredictable behavior.
 * 
 *   * Idle state events generated by this module are not guaranteed to
 *     reflect idle state transitions (e.g., a listener might receive
 *     `"active"` followed by `"active"`). We might want to implement this
 *     guarantee eventually.
 * 
 *   * Because the browser idle state resets with each browser session,
 *     it is not a problem that timeouts do not persist between browser
 *     sessions.
 * 
 *   * The module does not directly interact with the Firefox
 *     [`nsIdleService`](https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIIdleService),
 *     even though it supports varying idle state detection intervals, in
 *     order to minimize privileged extension code.
 * 
 * @module webScience.idle
 */

check({
    module: "webScience.idle",
    requiredPermissions: [ "idle" ]
});

/**
 * The minimum idle state detection interval (in seconds) supported by
 * the `idle` API.
 * @private
 * @constant {number}
 */
const minimumIdleStateDetectionIntervalInSeconds = 15;

/**
 * Whether we have configured  configured the idle state detection
 * interval, cached the idle state, and added the idle state
 * listener.
 * @private
 * @type {boolean}
 */
let initialized$1 = false;

/**
 * An estimate of the time (in milliseconds since the epoch) when the
 * browser last entered an idle state. Generated by subtracting the
 * idle state detection interval (converted to milliseconds) from the
 * time the browser last fired an idle state notification.
 * @private
 * @type {number}
 */
let lastIdleTime = -1;

/**
 * A cached copy of the browser's current idle state. This caching enables
 * synchronous checking of the current idle state.
 * @private
 * @type {string}
 */
let currentIdleState = "active";

/**
 * A Map that stores browser idle state listeners. The keys are
 * detection intervals in seconds and the values are Sets of
 * browser idle state listeners.
 * @private
 * @constant {Map<number,Set<function>>}
 */
const idleStateListeners = new Map();

/**
 * A Map that stores browser idle state timeouts. The keys are
 * detection intervals in seconds and the values are `timeoutID`
 * values from `setTimeout()`.
 * @private
 * @constant {Map<number,number>}
 */
const idleStateTimeouts = new Map();

/**
 * Configure the idle state detection interval, cache the idle state,
 * and add the idle state listener.
 * @private
 */
async function initialize() {
    if(initialized$1)
        return;
    initialized$1 = true;
    browser.idle.setDetectionInterval(minimumIdleStateDetectionIntervalInSeconds);
    currentIdleState = await browser.idle.queryState(minimumIdleStateDetectionIntervalInSeconds);
    if(currentIdleState === "idle")
        lastIdleTime = Date.now() - (minimumIdleStateDetectionIntervalInSeconds * 1000);
    browser.idle.onStateChanged.addListener(idleOnStateChangedListener);
}

/**
 * Determine whether the browser has been idle for a specified time.
 * This function is synchronous, unlike `idle.queryState`. Note that,
 * if an idle state listener has not been added, this function
 * will always return the default value of active state.
 * @param {number} detectionIntervalInSeconds - The detection interval
 * to use.
 * @returns {string} - The idle state, either "idle" or "active".
 */
function queryState(detectionIntervalInSeconds) {
    if(currentIdleState !== "idle")
        return currentIdleState;

    if(Date.now() >= (lastIdleTime + (detectionIntervalInSeconds * 1000)))
        return "idle";

    return "active";    
}

/**
 * A listener for `idle.onStateChanged` that supports notifying
 * idle state listeners with varying detection intervals.
 * @param {browser.idle.IdleState} - The new browser idle state.
 * @private
 */
function idleOnStateChangedListener(newState) {
    currentIdleState = newState;

    // If the browser idle state transitions to non-idle...
    if(newState !== "idle") {
        // Cancel any pending notification timeouts and forget the timeout IDs
        for(const idleStateTimeoutID of idleStateTimeouts.values())
            clearTimeout(idleStateTimeoutID);
        idleStateTimeouts.clear();

        // Notify all the idle state listeners
        for(const idleStateListenerSet of idleStateListeners.values())
            for(const idleStateListener of idleStateListenerSet)
                idleStateListener(newState.repeat(1));
        return;
    }

    // If the browser idle state transitions to idle...

    // Remember an estimate of when the browser last went into idle state
    lastIdleTime = Date.now() - (minimumIdleStateDetectionIntervalInSeconds * 1000);

    // Set timeouts for all the idle state listeners
    for(const [detectionIntervalInSeconds, idleStateListenersWithDetectionInterval] of idleStateListeners)
        scheduleIdleStateTimeout(idleStateListenersWithDetectionInterval, detectionIntervalInSeconds);
}

/**
 * Schedule a timeout for a set of idle state listeners.
 * @param {Set<idleStateChangeListener>} idleStateListenersWithDetectionInterval - The set of idle state listeners.
 * @param {number} detectionIntervalInSeconds - The idle state detection interval (in seconds) for this set of listeners.
 * @returns {number} The timeout ID for the scheduled timeout.
 * @private
 */
function scheduleIdleStateTimeout(idleStateListenersWithDetectionInterval, detectionIntervalInSeconds) {
    // Determine how long to delay before firing the listeners
    // If the delay is negative, set it to 0 (i.e., fire as soon as possible)
    const delayTime = Math.max(lastIdleTime + (detectionIntervalInSeconds * 1000) - Date.now(), 0);
    const timeoutId = setTimeout(function() {
        for(const idleStateListener of idleStateListenersWithDetectionInterval)
            idleStateListener("idle");
    }, delayTime);
    idleStateTimeouts.set(detectionIntervalInSeconds, timeoutId);
}

/**
 * @callback idleStateChangeListener
 * @param {string} idleState - The current idle state: "idle" or "active".
 */

/**
 * @callback IdleStateChangeAddListener
 * @param {idleStateChangeListener} listener - The listener to add.
 * @param {Object} options - Options for the listener.
 * @param {number} options.detectionInterval - The idle state detection interval
 * for the listener, in seconds.
 */

/**
 * @callback IdleStateChangeRemoveListener
 * @param {idleStateChangeListener} listener - The listener to remove.
 */

/**
 * @callback IdleStateChangeHasListener
 * @param {idleStateChangeListener} listener - The listener to check.
 * @returns {boolean} Whether the listener has been added for the event.
 */

/**
 * @callback IdleStateChangeHasAnyListeners
 * @returns {boolean} Whether the event has any listeners.
 */

/**
 * @typedef {Object} IdleStateChangeEvent
 * @property {IdleStateChangeAddListener} addListener - Add a listener for idle state changes.
 * @property {IdleStateChangeRemoveListener} removeListener - Remove a listener for idle state changes.
 * @property {IdleStateChangeHasListener} hasListener - Whether a specified listener has been added.
 * @property {IdleStateChangeHasAnyListeners} hasAnyListeners - Whether the event has any listeners.
 */

/**
 * An event that fires when the browser's idle state changes. This event supports multiple idle
 * detection intervals, unlike the WebExtensions idle.onStateChanged event.
 * @constant {IdleStateChangeEvent}
 */
const onStateChanged = createEvent({
    name: "webScience.idle.onStateChanged",
    addListenerCallback: (listener, options) => {
        addListener(listener, options.detectionInterval);
    },
    removeListenerCallback: (listener, options) => {
        removeListener(listener, options.detectionInterval);
    },
    notifyListenersCallback: () => { return false; }
});

/**
 * Add a listener function for browser idle state.
 * @param {idleStateChangeListener} idleStateListener - The listener function.
 * The function will receive the same `browser.idle.IdleState` parameter
 * as if it had subscribed to idle state events with
 * `browser.idle.onStateChanged.addListener`.
 * @param {number} detectionIntervalInSeconds - The detection
 * interval for firing the idle state listener. Note that this
 * time in measured in seconds because that is how the `idle`
 * API is implemented, even though most times in the library
 * are measured in milliseconds.
 * @private
 */
async function addListener(idleStateListener, detectionIntervalInSeconds) {
    await initialize();

    // If we already have at least one idle state listener with this
    // detection interval, add the new listener to the Set of listeners
    // and we're done
    let idleStateListenersWithDetectionInterval = idleStateListeners.get(detectionIntervalInSeconds);
    if(idleStateListenersWithDetectionInterval !== undefined) {
        idleStateListenersWithDetectionInterval.add(idleStateListener);
        return;
    }

    // Create a Set for listeners with this detection interval, including
    // this idle state listener
    idleStateListenersWithDetectionInterval = idleStateListeners.set(detectionIntervalInSeconds, (new Set()).add(idleStateListener));

    // If we're in idle state, and we have been in the state for less time
    // than the detection interval for this listener (i.e., the listener
    // should still receive a state change notification), schedule a
    // notification
    if((currentIdleState === "idle") && (Date.now() < (lastIdleTime + detectionIntervalInSeconds * 1000)))
        scheduleIdleStateTimeout(idleStateListenersWithDetectionInterval, detectionIntervalInSeconds);
}

/**
 * Remove a listener function for browser idle state.
 * @param {idleStateChangeListener} idleStateListener - The listener function.
 * @param {number} detectionIntervalInSeconds - The detection
 * interval for firing the idle state listener.
 * @private
 */
async function removeListener(idleStateListener, detectionIntervalInSeconds) {
    const idleStateListenersWithDetectionInterval = idleStateListeners.get(detectionIntervalInSeconds);
    if(idleStateListenersWithDetectionInterval !== undefined) {
        // Remove the listener
        idleStateListenersWithDetectionInterval.delete(idleStateListener);
        // If there are no other listeners with the same detection interval, remove the set of listeners
        // for the detection interval and clear the timeout (if there is one) for the interval
        if(idleStateListenersWithDetectionInterval.size === 0) {
            idleStateListeners.delete(detectionIntervalInSeconds);
            const idleStateTimeoutID = idleStateTimeouts.get(detectionIntervalInSeconds);
            if(idleStateTimeoutID !== undefined) {
                clearTimeout(idleStateTimeoutID);
                idleStateTimeouts.delete(detectionIntervalInSeconds);
            } 
        }
    }
}

/**
 * This module provides utilities for matching URLs against criteria.
 *
 * # Matching Criteria
 * The module supports two types of criteria:
 *   * Match Patterns (preferred) - a syntax used in the WebExtensions API for expressing possible URL matches.
 *     See: {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns}.
 *   * Domains - a simple list of domain names, which are converted into match patterns.
 * 
 * # Matching Output
 * The module supports three types of output for matching URLs:
 *   * Match Pattern Sets (preferred) - optimized objects that compare a URL against the criteria.
 *   * Regular Expressions - `RegExp` objects that compare a URL against the criteria.
 *   * Regular Expression Strings - strings expressing regular expressions for comparing a URL against the criteria.
 * 
 * # Implementation Notes
 * We use Rollup pure annotations (`@__PURE__` comments) because Rollup assumes that iterators might have side 
 * effects (including subtle cases of iteration like `Array.map` and `Array.join`). Without the annotations, Rollup
 * would mark arguments for many of this module's functions (which might be large string arrays) as tainted by side
 * effects and always include those arguments in bundled output. The pure annotations are associated with either
 * iteration functions or class instantiation to provide clarity about why they're needed.
 *
 * @see {@link https://github.com/rollup/rollup/issues/3127}
 * 
 * @module webScience.matching
 */

/**
 * A RegExp for validating WebExtensions match patterns, using the same regular expressions for manifest
 * validation as Firefox.
 * @see {@link https://searchfox.org/mozilla-central/source/toolkit/components/extensions/schemas/manifest.json}
 * @constant
 * @type {RegExp}
 * @private
 */
const matchPatternValidationRegExp = new RegExp("(^<all_urls>$)|(^(https?|wss?|file|ftp|\\*)://(\\*|\\*\\.[^*/]+|[^*/]+)/.*$)|(^file:///.*$)|(^resource://(\\*|\\*\\.[^*/]+|[^*/]+)/.*$|^about:|^data:)", "i");

/**
 * A Set of URL schemes permitted in WebExtensions match patterns.
 * @see {@link https://searchfox.org/mozilla-central/source/toolkit/components/extensions/MatchPattern.cpp}
 * @constant {Set<string>}
 * @private
 */
const permittedMatchPatternSchemes = new Set(["*", "http", "https", "ws", "wss", "file", "ftp", "data", "file"]);

/**
 * A Set of URL schemes that require a host locator (i.e., are followed by `://` rather than `:`).
 * @see {@link https://searchfox.org/mozilla-central/source/toolkit/components/extensions/MatchPattern.cpp}
 * @constant {Set<string>}
 * @private
 */
const hostLocatorMatchPatternSchemes = new Set(["*", "http", "https", "ws", "wss", "file", "ftp", "moz-extension", "chrome", "resource", "moz", "moz-icon", "moz-gio"]);

/**
 * An internal object that represents a parsed match pattern.
 * @typedef {Object} ParsedMatchPattern
 * @property {boolean} allUrls - Whether the match pattern is the special all URLs match pattern.
 * @property {string} scheme - The scheme for the match pattern. Must be one of: "http", "https", "ws",
 * wss", "file", "ftp", "data", "file", or "*". The special wildcard value "*" matches "http", "https",
 * "ws", or "wss".
 * @property {boolean} matchSubdomains - If this scheme involves a hostname, and the hostname is not the
 * special wildcard value, whether to match any subdomains of the domain.
 * @property {boolean} host - If this scheme involves a hostname, either the hostname for the match pattern
 * or the special wildcard value "*" that matches all domains.
 * @property {string} path - The path for the match pattern. The special wildcard value "/*" matches all
 * paths.
 * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns}
 * @private
 */

/**
 * Parses a match pattern string into an object that represents the match pattern. We use this internal,
 * intermediate representation to enable constructing efficient matching objects. The parsing logic is
 * nearly identical to the parsing logic in Firefox.
 * @throws {Error} Throws an error if the match pattern is not valid.
 * @param {string} matchPattern - The match pattern string.
 * @returns {ParsedMatchPattern} - The parsed match pattern.
 * @see {@link https://searchfox.org/mozilla-central/source/toolkit/components/extensions/MatchPattern.cpp}
 * @private
 */
function parseMatchPattern(matchPattern) {
    if(!matchPatternValidationRegExp.test(matchPattern))
        throw new Error(`Invalid match pattern, failed validation: ${matchPattern}`);

    const parsedMatchPattern = {
        allUrls: false,
        scheme: "",
        matchSubdomains: false,
        host: "",
        path: ""
    };

    let tail = matchPattern.repeat(1);

    if(matchPattern === "<all_urls>") {
        parsedMatchPattern.allUrls = true;
        return parsedMatchPattern;
    }

    // Parse the scheme
    let index = matchPattern.indexOf(":");
    if(index <= 0)
        throw new Error(`Invalid match pattern, missing : after scheme: ${matchPattern}`);
    const scheme = matchPattern.substr(0, index);
    if(!permittedMatchPatternSchemes.has(scheme))
        throw new Error(`Invalid match pattern, unsupported scheme: ${matchPattern}`);
    const hostLocatorScheme = hostLocatorMatchPatternSchemes.has(scheme);
    parsedMatchPattern.scheme = scheme;

    // Parse the host
    let offset = index + 1;
    tail = matchPattern.substr(offset);
    if(hostLocatorScheme) {
        if(!tail.startsWith("//"))
            throw new Error(`Invalid match pattern, missing // required by scheme: ${matchPattern}`);

        offset += 2;
        tail = matchPattern.substr(offset);
        index = tail.indexOf("/");
        if(index < 0)
            index = tail.length;

        let host = tail.substring(0, index);
        if((host === "") && (scheme !== "file"))
            throw new Error(`Invalid match pattern, missing host required by scheme: ${matchPattern}`);

        offset += index;
        tail = matchPattern.substring(offset);

        if(host !== "*") {
            if(host.startsWith("*.")) {
                host = host.substring(2);
                if(host === "*")
                    throw new Error(`Invalid match pattern, subdomain wildcard with host wildcard: ${matchPattern}`);
                parsedMatchPattern.matchSubdomains = true;
            }
        }
        parsedMatchPattern.host = host;
    }

    // Parse the path
    const path = tail;
    if(path === "")
        throw new Error(`Invalid match pattern, missing path: ${matchPattern}`);
    parsedMatchPattern.path = path;

    return parsedMatchPattern;
}

/**
 * Create a new MatchPatternSet for matching a set of match patterns.
 * @param {string[]} matchPatterns - An array of match pattern strings.
 * @returns {MatchPatternSet} - The new MatchPatternSet.
 */
function createMatchPatternSet(matchPatterns) {
    return /*@__PURE__*/new _MatchPatternSet(matchPatterns);
}

/**
 * @callback MatchPatternSetMatches
 * @param {string} url - The URL to test against the set of match patterns.
 * @returns {boolean} Whether at least one match pattern in the set matches the URL.
 */

/**
 * @callback MatchPatternSetExport
 * @returns {Object} The MatchPatternSet serialized to an object.
 */

/**
 * @typedef {Object} MatchPatternSet
 * An optimized object for matching against match patterns.
 * @property {MatchPatternSetMatches} matches - Test a URL against the set of match patterns.
 * @property {MatchPatternSetExport} export - Export the MatchPatternSet to a serialized object. 
 */

/**
 * An optimized object for matching against match patterns. A `MatchPatternSet` can provide
 * a significant performance improvement in comparison to `RegExp`s, in some instances
 * greater than 100x. A `MatchPatternSet` can also be exported to an object that uses only
 * built-in types, so it can be persisted or passed to content scripts in extension storage.
 *
 * There are several key optimizations in `MatchPatternSet`:
 *   * URLs are parsed with the `URL` class, which has native implementation.
 *   * Match patterns are indexed by hostname in a hash map. Lookups are much faster than
 *     iteratively advancing and backtracking through a complex regular expression, which
 *     is how domain matching currently occurs with the `Irregexp` regular expression
 *     engine in Firefox and Chrome.
 *   * Match patterns with identical scheme, subdomain matching, and host (i.e., that
 *     differ only in path) are combined.
 *   * The only remaining use of regular expressions is in path matching, where expressions
 *     can be (relatively) uncomplicated.
 *
 * Future performance improvements could include:
 *   * Replacing the path matching implementation to eliminate regular expressions entirely.
 *   * Replacing the match pattern index, such as by implementing a trie.
 * @private
 */
class _MatchPatternSet {
    /**
     * Creates a match pattern set from an array of match patterns.
     * @param {string[]} matchPatterns - The match patterns for the set.
     * @private
     */
    constructor(matchPatterns) {
        // Defining the special sets of `<all_url>` and wildcard schemes inside the class so
        // keeping content scripts in sync with this implementation will be easier
        this.allUrls = false;
        this.allUrlsSchemeSet = new Set(["http", "https", "ws", "wss", "ftp", "file", "data"]);
        this.wildcardSchemeSet = new Set(["http", "https", "ws", "wss"]);
        this.patternsByHost = { };
        for(const matchPattern of matchPatterns) {
            const parsedMatchPattern = parseMatchPattern(matchPattern);
            if(parsedMatchPattern.allUrls)
                this.allUrls = true;
            else {
                let hostPatterns = this.patternsByHost[parsedMatchPattern.host];
                if(hostPatterns === undefined) {
                    hostPatterns = [ ];
                    this.patternsByHost[parsedMatchPattern.host] = hostPatterns;
                }
                let addedToHostPattern = false;
                for(const hostPattern of hostPatterns) {
                    if((hostPattern.scheme === parsedMatchPattern.scheme) && (hostPattern.matchSubdomains === parsedMatchPattern.matchSubdomains)) {
                        addedToHostPattern = true;
                        hostPattern.paths.push(parsedMatchPattern.path);
                        break;
                    }
                }
                if(!addedToHostPattern)
                    hostPatterns.push({
                        scheme: parsedMatchPattern.scheme,
                        matchSubdomains: parsedMatchPattern.matchSubdomains,
                        host: parsedMatchPattern.host,
                        paths: [ parsedMatchPattern.path ]
                    });
            }
        }

        for(const host of Object.keys(this.patternsByHost)) {
            const hostPatterns = this.patternsByHost[host];
            for(const hostPattern of hostPatterns) {
                let wildcardPath = false;
                const pathRegExps = hostPattern.paths.map(path => {
                    if(path === "/")
                        return "/";
                    else if(path === "/*") {
                        wildcardPath = true;
                        return "/.*";
                    }
                    else {
                        // Including regular expression special character escaping in
                        // the constructor so keeping content scripts in sync with this
                        // implementation will be easier
                        const escapedPathArray = [ ];
                        for(const c of path) {
                            if(c === "*")
                                escapedPathArray.push(".*");
                            else
                                escapedPathArray.push(c.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"));
                        }
                        return escapedPathArray.join("");
                    }
                });
                if(wildcardPath) {
                    hostPattern.wildcardPath = true;
                }
                else {
                    hostPattern.wildcardPath = false;
                    hostPattern.pathRegExp = new RegExp("^(?:" + pathRegExps.join("|") + ")$");
                }
                delete hostPattern.paths;
            }
        }
    }

    /**
     * Compares a URL string to the match patterns in the set.
     * @param {string} url - The URL string to compare.
     * @returns {boolean} Whether the URL string matches a pattern in the set.
     */
    matches(url) {
        let parsedUrl;
        try {
            parsedUrl = new URL(url);
        } catch {
            // If the target isn't a true URL, it certainly doesn't match
            return false;
        }
        // Remove the trailing : from the parsed protocol
        const scheme = parsedUrl.protocol.substring(0, parsedUrl.protocol.length - 1);
        const host = parsedUrl.hostname;
        const path = parsedUrl.pathname;

        // Check the special `<all_urls>` match pattern
        if(this.allUrls && this.allUrlsSchemeSet.has(scheme))
            return true;

        // Identify candidate match patterns
        let candidatePatterns = [ ];
        // Check each component suffix of the hostname for candidate match patterns
        const hostComponents = parsedUrl.hostname.split(".");
        let hostSuffix = "";
        for(let i = hostComponents.length - 1; i >= 0; i--) {
            hostSuffix = hostComponents[i] + (i < hostComponents.length - 1 ? "." : "") + hostSuffix;
            const hostSuffixPatterns = this.patternsByHost[hostSuffix];
            if(hostSuffixPatterns !== undefined)
                candidatePatterns = candidatePatterns.concat(hostSuffixPatterns);
        }

        // Add match patterns with a wildcard host to the set of candidates
        const hostWildcardPatterns = this.patternsByHost["*"];
        if(hostWildcardPatterns !== undefined)
            candidatePatterns = candidatePatterns.concat(hostWildcardPatterns);

        // Check the scheme, then the host, then the path for a match
        for(const candidatePattern of candidatePatterns) {
            if((candidatePattern.scheme === scheme) ||
               ((candidatePattern.scheme === "*") && this.wildcardSchemeSet.has(scheme))) {
                   if(candidatePattern.matchSubdomains ||
                      (candidatePattern.host === "*") ||
                      (candidatePattern.host === host)) {
                          if(candidatePattern.wildcardPath ||
                             candidatePattern.pathRegExp.test(path))
                             return true;
                      }
               }
        }

        return false;
    }

    /**
     * Exports the internals of the match pattern set for purposes of saving to extension
     * local storage.
     * @returns {object} - An opaque object representing the match pattern set internals.
     */
    export() {
        return {
            allUrls: this.allUrls,
            patternsByHost: this.patternsByHost
        };
    }

    /**
     * Imports the match pattern set from an opaque object previously generated by `export`.
     * @param {exportedInternals} - The previously exported internals for the match pattern set.
     * @private
     */
    import(exportedInternals) {
        this.allUrls = exportedInternals.allUrls;
        this.patternsByHost = exportedInternals.patternsByHost;
    }
}

/**
 * Escapes regular expression special characters in a string.
 * @param {string} string - The input string.
 * @returns {string} The input string with regular expression special characters escaped.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions}
 */
function escapeRegExpString(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

/**
 * Generates a set of match patterns for a set of domains. The match patterns will use the special
 * "*" wildcard scheme (matching "http", "https", "ws", and "wss") and the special "/*" wildcard
 * path (matching any path).
 * @param {string[]} domains - The set of domains to match against.
 * @param {boolean} [matchSubdomains=true] - Whether to match subdomains of domains in the set.
 * @returns {string[]} Match patterns for the domains in the set.
 */
function domainsToMatchPatterns(domains, matchSubdomains = true) {
    return /*@__PURE__*/domains.map(domain => { return `*://${matchSubdomains ? "*." : ""}${domain}/*` });
}

/**
 * Normalizes a URL string for subsequent comparison. Normalization includes the following steps:
 *   * Parse the string as a `URL` object, which will (among other normalization) lowercase the
 *     scheme and hostname.
 *   * Remove the port number, if any. For example, https://www.mozilla.org:443/ becomes https://www.mozilla.org/.
 *   * Remove query parameters, if any. For example, https://www.mozilla.org/?foo becomes https://www.mozilla.org/.
 *   * Remove the fragment identifier, if any. For example, https://www.mozilla.org/#foo becomes https://www.mozilla.org/.
 * @param {string} url - The URL string to normalize.
 * @returns {string} The normalized URL string.
 * @throws {Error} Throws an error if the URL string is not a valid, absolute URL.
 */
function normalizeUrl(url) {
    const urlObj = new URL(url);
    urlObj.port = "";
    urlObj.search = "";
    urlObj.hash = "";
    return urlObj.href;
}

/**
 * This module provides utilities for working with inlined content.
 * 
 * @module webScience.inline
 */

/**
 * Extract the content from a data URL as a string, decoding it from Base64
 * if necessary. Useful for working with content scripts that have been
 * encoded with `@rollup/plugin-url`.
 * @param {string} dataUrl - The data URL.
 * @returns {string} - The content of the URL.
 */
function dataUrlToString(dataUrl) {
    if(!dataUrl.startsWith("data:")) {
        throw new Error("Incorrectly formatted data URL.");
    }
    const commaIndex = dataUrl.indexOf(",");
    if(commaIndex < 0) {
        throw new Error("Incorrectly formatted data URL.");
    }
    // Not currently checking that the MIME type is valid
    const dataUrlMimeTypeAndEncoding = dataUrl.substring(0, commaIndex);
    let content = dataUrl.substring(commaIndex + 1, dataUrl.length);
    if(dataUrlMimeTypeAndEncoding.endsWith("base64")) {
        content = atob(content);
    }
    return content;
}

/**
 * Convert a data URL to a blob object URL. Useful for working with HTML
 * documents that have been encoded with `@rollup/plugin-url`.
 * @param {*} dataUrl - The data URL.
 * @returns {string} - A blob object URL.
 */
function dataUrlToBlobUrl(dataUrl) {
    return URL.createObjectURL(new Blob([ dataUrlToString(dataUrl) ]));
}

var pageManagerContentScript = "data:application/javascript;base64,";

/**
 * # Overview
 * This module addresses several challenges for studying user engagement with web content.
 *   * __Syncing Measurements and Interventions.__ A study that uses `WebScience` will
 *     often involve multiple measurements or interventions on a webpage. The
 *     `pageManager` module enables studies to sync these measurements and interventions
 *     by assigning a random unique identifier to each webpage.
 *   * __Generating Page Lifecycle Events.__ Measurements and interventions are often
 *     linked to specific events in the webpage lifecyle. The `pageManager` module
 *     standardizes a set of webpage lifecycle events.
 *   * __Tracking User Attention.__ Measurements and interventions often depend on user
 *     attention to web content. The `pageManager` module provides a standardized
 *     attention model that incorporates tab switching, window switching, application
 *     switching, locked screens, and user mouse and keyboard input.
 *   * __Generating Audio Events.__ This module provides events for webpage audio,
 *     enabling measurements and interventions based on media playback.
 *   * __Bridging the Background and Content Script Environments.__ WebExtensions
 *     includes two distinct execution environments: background scripts and content
 *     scripts. These execution environments are, unfortunately, only loosely bound
 *     together by tab IDs. As a result, there can be race conditions---the background
 *     and content environments can have mismatched states, such that messages arrive
 *     at the wrong webpage or are attributed to the wrong webpage. This module
 *     provides provides page lifecycle, user attention, and audio events that are
 *     bound to specific webpages.
 *
 * # Pages
 * This module creates an abstraction over webpages as perceived by users (i.e., when
 * content loads with a new HTTP(S) URL in the browser bar or the page visibly reloads).
 * Note that the History API enables web content to modify the URL without loading a new
 * HTML document via HTTP(S) or creating a new Document object. This module treats
 * a URL change via the History API as equivalent to traditional webpage navigation,
 * because (by design) it appears identical to the user. Accounting for the History
 * API is important, because it is used on some exceptionally popular websites (e.g.,
 * YouTube).
 *
 * # Page IDs
 * Each page ID is a random (v4) UUID, consistent with RFC4122.
 *
 * # Page Lifecycle
 * Each webpage has the following lifecycle events, which fire in both the background
 * page and content script environments.
 *   * Page Visit Start - The browser has started to load a webpage in a tab. This
 *     event is fired early in context script execution (i.e., soon after
 *     `document_start`). For a webpage with a new Document, the event is
 *     timestamped with the time the `window` object was created (the time origin
 *     from the High Resolution Time Level 2 API, in ms). For a webpage that does not
 *     have a new Document (i.e., resulting from the History API), the event is
 *     timestamped with the URL change in the WebNavigation API.
 *   * Page Visit Stop - The browser is unloading the webpage. Ordinarily this
 *     event fires and is timestamped with the `window` unload event. When the page
 *     changes via the History API, this event fires and is timestamped with the URL
 *     change in the WebNavigation API.
 *
 * # Attention Tracking
 * Attention to a page is defined as satisfying all of the following conditions.
 *   * The tab is the active tab in its browser window.
 *   * The window containing the tab is the current browser window.
 *   * The current browser window has focus in the operating system.
 *   * The operating system is not displaying a lock screen or screen saver.
 *   * Optional: The user has provided mouse or keyboard input within a specified time
 *     interval.
 *
 * In the content script environment, each page has an attention status, and an event
 * fires when that status changes. Attention update events are timestamped with events
 * from the WebExtensions `tabs`, `windows`, and `idle` APIs.
 *
 * # Audio Events
 * In the content script environment, each page has an audio status, and an event fires
 * when that status changes. Audio update events fire and are timestamped with events
 * from the WebExtensions `tabs` API.
 *
 * # Event Ordering
 * This module guarantees the ordering of page lifecycle, attention, and audio events.
 *   * Page visit start and page visit stop only fire once for each page, in that order.
 *   * Page attention and audio update events will only occur between page visit start
 *     and stop events.
 *
 * # Additional Implementation Notes
 * This module depends on the `idle` API, which has a couple quirks in Firefox:
 *   * There is a five-second interval when polling idle status from the operating
 *     system.
 *   * Depending on the platform, the idle API reports either time since user input to
 *     the browser or time since user input to the operating system.
 *
 * The polling interval coarsens the timing of page attention events related to idle state.
 * As long as the polling interval is relatively short in comparison to the idle threshold,
 * that should not be an issue.
 *
 * The platform-specific meaning of idle state should also not be an issue. There is only a
 * difference between the two meanings of idle state when the user is providing input to
 * another application; if the user is providing input to the browser, or is not providing
 * input at all, the two meanings are identical. In the scenario where the user is providing
 * input to another application, the browser will lose focus in the operating system; this
 * module will detect that with the windows API and fire a page attention event (if needed).
 *
 * Some implementation quirks to be aware of for future development on this module:
 *   * Non-browser windows do not appear in the results of `windows.getAll()`, and calling
 *     `windows.get()` on a non-browser window throws an error. Switching focus to a non-
 *     browser window will, however, fire the `windows.onFocusChanged` event. The module
 *     assumes that if `windows.onFocusChanged` fires with an unknown window, that window
 *     is a non-browser window.
 *   * The module assumes that valid tab IDs and window IDs are always >= 0.
 *
 * # Known Issues
 *   * The background script sends update messages to tabs regardless of whether they
 *     are ordinary tabs or have the pageManager content script running, because the
 *     background script does not track window types or tab content. The errors
 *     generated by this issue are caught in `messaging.sendMessageToTab`, and the
 *     issue should not cause any problems for studies.
 *
 * # Possible Improvements
 *   * Rebuild a page attention update event in the background page environment.
 *   * Rebuild the capability to fire events for pages that are already open when the module
 *     loads.
 *   * Add logic to handle the situation where the content script execution environment crashes,
 *     so the page visit stop message doesn't fire from the associated content script.
 *   * Add an event in the content script for detecting when content has lazily loaded into the
 *     DOM after the various DOM loading events (e.g., on Twitter).
 * @module webScience.pageManager
 */

check({
    module: "webScience.pageManager",
    requiredPermissions: [ "webNavigation" ],
    suggestedOrigins: [ "<all_urls>" ]
});

/**
 * The threshold (in seconds) for determining whether the browser has the user's attention,
 * based on mouse and keyboard input.
 * @private
 * @constant {number}
 * @default
 */
const idleThreshold = 15;

/**
 * Whether to consider user input in determining attention state.
 * @private
 * @constant {boolean}
 * @default
 */
const considerUserInputForAttention = true;

/**
 * Additional information about a page visit start event.
 * @typedef {Object} PageVisitStartDetails
 * @param {number} pageId - The ID for the page, unique across browsing sessions.
 * @param {number} tabId - The ID for the tab containing the page, unique to the browsing session.
 * @param {number} windowId - The ID for the window containing the page, unique to the browsing session.
 * Note that tabs can subsequently move between windows.
 * @param {string} url - The URL of the page loading in the tab, without any hash.
 * @param {string} referrer - The referrer URL for the page loading in the tab, or `""` if
 * there is no referrer.
 * @param {number} pageVisitStartTime - The time when the underlying event fired.
 * @param {boolean} privateWindow - Whether the page is in a private window.
 * @property {boolean} isHistoryChange - Whether the page visit was caused by a change via the History API.
 */

/**
 * A listener function for page visit start events.
 * @callback pageVisitStartListener
 * @param {PageVisitStartDetails} details - Additional information about the page visit start event.
 */

/**
 * Additional information about a page visit start event listener function.
 * @typedef {Object} PageVisitStartListenerOptions
 * @property {boolean} privateWindows - Whether to notify the listener function for events in private windows.
 */

/**
 * An event that is fired when a page visit starts.
 * @constant {Events.Event<pageVisitStartListener, PageVisitStartListenerOptions>}
 */
const onPageVisitStart = createEvent({
    name: "webScience.pageManager.onPageVisitStart",
    // Make sure the module is initialized when a listener is added
    addListenerCallback: listener => initialize$1(),
    // Filter notifications for events in private windows
    notifyListenersCallback: (listener, [ details ], options) => {
        if(!details.privateWindow || (("privateWindows" in options) && options.privateWindows))
            return true;
        return false;
    }
});

/**
 * Notify listeners for the page visit start event.
 * @param {PageVisitStartDetails} details - Additional information about the page visit start event.
 * @private
 */
function pageVisitStart(details) {
    onPageVisitStart.notifyListeners([ details ]);
}

/**
 * Additional information about a page visit stop event.
 * @typedef {Object} PageVisitStopDetails
 * @param {number} pageId - The ID for the page, unique across browsing sessions.
 * @param {string} url - The URL of the page loading in the tab, without any hash.
 * @param {string} referrer - The referrer URL for the page loading in the tab, or `""` if
 * there is no referrer.
 * @param {number} pageVisitStartTime - The time when the page visit started.
 * @param {number} pageVisitStopTime - The time when the underlying event fired.
 * @param {boolean} privateWindow - Whether the page is in a private window.
 */

/**
 * A listener function for page visit stop events.
 * @callback pageVisitStopListener
 * @param {PageVisitStopDetails} details - Additional information about the page visit stop event.
 */

/**
 * Additional information about a page visit start stop listener function.
 * @typedef {Object} PageVisitStopListenerOptions
 * @property {boolean} privateWindows - Whether to notify the listener function for events in private windows.
 */

/**
 * An event that is fired when a page visit starts.
 * @constant {Events.Event<pageVisitStopListener, PageVisitStartListenerOptions>}
 */
const onPageVisitStop = createEvent({
    name: "webScience.pageManager.onPageVisitStop",
    // Make sure the module is initialized when a listener is added
    addListenerCallback: listener => initialize$1(),
    // Filter notifications for events in private windows
    notifyListenersCallback: (listener, [ details ], options) => {
        if(!details.privateWindow || (("privateWindows" in options) && options.privateWindows))
            return true;
        return false;
    }
});

/**
 * Notify listeners for the page visit stop event.
 * @param {PageVisitStopDetails} details - Additional information about the page visit stop event.
 * @private
 */
function pageVisitStop(details) {
    onPageVisitStop.notifyListeners([ details ]);
}

/**
 * Notify a page that its attention state may have changed.
 * @private
 * @param {number} tabId - The tab containing the page, unique to the browsing session.
 * @param {boolean} pageHasAttention - Whether the tab containing the page has the user's
 * attention.
 * @param {number} [timeStamp=Date.now()] - The time when the underlying browser event fired.
 */
function sendPageAttentionUpdate(tabId, pageHasAttention, timeStamp = Date.now()) {
    sendMessageToTab(tabId, {
        type: "webScience.pageManager.pageAttentionUpdate",
        pageHasAttention,
        timeStamp
    });
}

/**
 * The currently active tab in the currently focused browsing window. Has the value -1
 * if there is no such tab.
 * @private
 * @type {number}
 * @default
 */
let currentActiveTab = -1;

/**
 * The currently focused browsing window. Has the value -1 if there is no such window.
 * @private
 * @type {number}
 * @default
 */
let currentFocusedWindow = -1;

/**
 * Checks for the following conditions:
 *   * The tab is the currently active tab in the currently focused window.
 *   * The window is the currently focused window.
 *   * The browser is active (i.e., not idle), if the module is configured to
 *     consider user input in determining the attention state.
 * @private
 * @param {number} tabId - The tab to check.
 * @param {number} windowId - The window to check.
 */
function checkForAttention(tabId, windowId) {
    return ((currentActiveTab === tabId) && (currentFocusedWindow === windowId) && (browserIsActive ));
}

/**
 * @typedef {Object} WindowDetails
 * @property {number} activeTab - The ID of the active tab in the window,
 * or -1 if there is no active tab.
 * @private
 */

/**
 * A Map that tracks the current state of browser windows. We need this cached
 * state to avoid asynchronous queries when the focused window changes. The
 * keys are window IDs and the values are WindowDetails objects.
 * @private
 * @constant {Map<number,WindowDetails>}
 * @default
 */
const windowState = new Map();

/**
 * Update the window state cache with new information about a window.
 * @private
 * @param {number} windowId - The window ID.
 * @param {WindowDetails} windowDetails - The new information about the
 * window.
 */
function updateWindowState(windowId, { activeTab }) {
    let windowDetails = windowState.get(windowId);

    if(windowDetails === undefined) {
        windowDetails = { activeTab: -1 };
        windowState.set(windowId, windowDetails);
    }

    if(activeTab !== undefined)
        windowDetails.activeTab = activeTab;
}

/**
 * Whether the browser is active or idle. Ignored if the module is configured to
 * not consider user input when determining the attention state.
 * @private
 * @type {boolean}
 * @default
 */
let browserIsActive = false;

/**
 * Whether the module is in the process of configuring browser event handlers
 * and caching initial state.
 * @private
 * @type {boolean}
 */
let initializing = false;

/**
 * Whether the module has started configuring browser event handlers and caching
 * initial state.
 * @private
 * @type {boolean}
 */
let initialized$2 = false;

/**
 * Initialize `pageManager` in the background and content script environments. If you are using
 * `pageManager` events in content scripts but not background scripts, you must call this function.
 * If you are using `pageManager` events in background scripts, this function is automatically called
 * when adding a listener for an event. This function configures message passing between the
 * `pageManager` background script and content script, registers browser event handlers, caches
 * initial state, and registers the `pageManager` content script. It runs only once.
 */
async function initialize$1() {
    if(initialized$2 || initializing)
        return;
    initializing = true;

    // Register message listeners and schemas for communicating with the content script

    // The content script sends a webScience.pageManger.pageVisitStart message when
    // there is a page visit start event
    onMessage.addListener((pageVisitStartInfo, sender) => {
        // Notify the content script if it has attention
        // We can't send this message earlier (e.g., when the tab URL changes) because we need to know the content
        // script is ready to receive the message
        if(checkForAttention(sender.tab.id, sender.tab.windowId))
            sendPageAttentionUpdate(sender.tab.id, true, Date.now());

        pageVisitStart({
            pageId: pageVisitStartInfo.pageId,
            tabId: sender.tab.id,
            windowId: sender.tab.windowId,
            url: pageVisitStartInfo.url,
            referrer: pageVisitStartInfo.referrer,
            pageVisitStartTime: pageVisitStartInfo.timeStamp,
            privateWindow: pageVisitStartInfo.privateWindow,
            isHistoryChange: pageVisitStartInfo.isHistoryChange
        });
    }, {
        type: "webScience.pageManager.pageVisitStart",
        schema: {
            pageId: "string",
            url: "string",
            referrer: "string",
            timeStamp: "number",
            privateWindow: "boolean",
            isHistoryChange: "boolean"
        }
    });

    // The content script sends a webScience.pageManger.pageVisitStop message when
    // there is a page visit stop event
    // We don't currently include tab or window information with the page visit stop event
    // because the sender object doesn't include that information when the tab is closing
    onMessage.addListener((pageVisitStopInfo) => {
        pageVisitStop({
            pageId: pageVisitStopInfo.pageId,
            url: pageVisitStopInfo.url,
            referrer: pageVisitStopInfo.referrer,
            pageVisitStartTime: pageVisitStopInfo.timeStamp,
            pageVisitStopTime: pageVisitStopInfo.timeStamp,
            privateWindow: pageVisitStopInfo.privateWindow
        });
    }, {
        type: "webScience.pageManager.pageVisitStop",
        schema: {
            pageId: "string",
            url: "string",
            referrer: "string",
            timeStamp: "number",
            pageVisitStartTime: "number",
            privateWindow: "boolean"
        }
    });

    // The background script sends a webScience.pageManager.pageAttentionUpdate message
    // when the attention state of the page may have changed
    registerSchema("webScience.pageManager.pageAttentionUpdate", {
        timeStamp: "number",
        pageHasAttention: "boolean"
    });

    // The background script sends a webScience.pageManager.urlChanged message when
    // the URL changes for a tab, indicating a possible page load with the History API
    registerSchema("webScience.pageManager.urlChanged", {
        timeStamp: "number"
    });

    // The background script sends a webScience.pageManager.pageAudioUpdate message
    // when the audio state of the page may have changed
    registerSchema("webScience.pageManager.pageAudioUpdate", {
        pageHasAudio: "boolean",
        timeStamp: "number"
    });

    // Register background script event handlers

    // If a tab's audible state changed, send webScience.pageManager.pageAudioUpdate
    browser.tabs.onUpdated.addListener((tabId, changeInfo) => {
        if(!initialized$2)
            return;
        const timeStamp = Date.now();

        sendMessageToTab(tabId, {
            type: "webScience.pageManager.pageAudioUpdate",
            pageHasAudio: changeInfo.audible,
            timeStamp
        });
    }, {
        urls: [ "http://*/*", "https://*/*" ],
        properties: [ "audible" ]
    });

    // If a tab's URL changed because of the History API, send webScience.pageManager.urlChanged
    browser.webNavigation.onHistoryStateUpdated.addListener((details) => {
        if(!initialized$2)
            return;
        const timeStamp = Date.now();

        sendMessageToTab(details.tabId, {
            type: "webScience.pageManager.urlChanged",
            timeStamp
        });
    }, {
        url: [ { schemes: [ "http", "https" ] } ]
    });

    browser.tabs.onRemoved.addListener((tabId, removeInfo) => {
        if(!initialized$2)
            return;

        // We don't have to update the window state here, because either there is
        // another tab in the window that will become active (and tabs.onActivated
        // will fire), or there is no other tab in the window so the window closes
        // (and windows.onRemoved will fire)

        // If this is the active tab, forget it
        if(currentActiveTab === tabId)
            currentActiveTab = -1;
    });

    // Handle when the active tab in a window changes
    browser.tabs.onActivated.addListener(activeInfo => {
        if(!initialized$2)
            return;
        const timeStamp = Date.now();

        // If this is a non-browser tab, ignore it
        if((activeInfo.tabId === browser.tabs.TAB_ID_NONE) || (activeInfo.tabId < 0) ||
            (activeInfo.windowId < 0))
            return;

        // Update the window state cache with the new
        // active tab ID
        updateWindowState(activeInfo.windowId, {
            activeTab: activeInfo.tabId
        });

        // If there isn't a focused window, or the tab update is not in the focused window, ignore it
        if((currentFocusedWindow < 0) || (activeInfo.windowId != currentFocusedWindow))
            return;

        // If the browser is active or (optionally) we are not considering user input,
        // notify the current page with attention that it no longer has attention, and notify
        // the new page with attention that is has attention
        if((browserIsActive || !considerUserInputForAttention)) {
            if((currentActiveTab >= 0) && (currentFocusedWindow >= 0))
                sendPageAttentionUpdate(currentActiveTab, false, timeStamp);
            sendPageAttentionUpdate(activeInfo.tabId, true, timeStamp);
        }

        // Remember the new active tab
        currentActiveTab = activeInfo.tabId;
    });

    browser.windows.onRemoved.addListener(windowId => {
        if(!initialized$2)
            return;

        // If we have cached state for this window, drop it
        windowState.delete(windowId);
    });

    browser.windows.onFocusChanged.addListener(windowId => {
        if(!initialized$2)
            return;
        const timeStamp = Date.now();

        // If the browser is active or (optionally) we are not considering user input, and if
        // if there is an active tab in a focused window, notify the current page with attention
        // that it no longer has attention
        if((browserIsActive || !considerUserInputForAttention) && ((currentActiveTab >= 0) && (currentFocusedWindow >= 0)))
            sendPageAttentionUpdate(currentActiveTab, false, timeStamp);

        // If the browser has lost focus in the operating system, remember
        // tab ID = -1 and window ID = -1, and do not notify any page that it has attention
        // Note that this check should happen before the browser.windows.get await below,
        // because quick sequential events can cause the browser.windows.onFocusChanged
        // listener to run again before the await resolves and trigger errors if currentActiveTab
        // and currentFocusedWindow are not set properly
        if (windowId === browser.windows.WINDOW_ID_NONE) {
            currentActiveTab = -1;
            currentFocusedWindow = -1;
            return;
        }

        // Get information about the focused window from the cached window state
        const focusedWindowDetails = windowState.get(windowId);

        // If we haven't seen this window before, that means it's not a browser window,
        // so remember tab ID = -1 and window ID -1, and do not notify any page that it has attention
        if(focusedWindowDetails === undefined) {
            currentActiveTab = -1;
            currentFocusedWindow = -1;
            return;
        }

        // Otherwise, remember the new active tab and focused window, and if the browser is active
        // or (optionally) we are not considering user input, notify the page in the tab that it
        // has attention
        currentActiveTab = focusedWindowDetails.activeTab;
        currentFocusedWindow = windowId;
        if(browserIsActive || !considerUserInputForAttention)
            sendPageAttentionUpdate(currentActiveTab, true, timeStamp);
    });

    // Handle when the browser activity state changes
    // This listener abstracts the browser activity state into two categories: active and inactive
    // Active means the user has recently provided input to the browser, inactive means any other
    // state (regardless of whether a screensaver or lock screen is enabled)

    // Note that we have to call idle.onStateChanged.addListener before we call
    // idle.queryState, so this comes before caching the initial state
    {
        await onStateChanged.addListener(newState => {
            if(!initialized$2)
                return;
            const timeStamp = Date.now();

            // If the browser is not transitioning between active and inactive states, ignore the event
            if((browserIsActive) === (newState === "active"))
                return;

            // Remember the flipped browser activity state
            browserIsActive = !browserIsActive;

            // If there isn't an active tab in a focused window, we don't need to send attention events
            if((currentActiveTab < 0) || (currentFocusedWindow < 0))
                return;

            // Send an attention state change event to the current active tab, reflecting the browser activity state
            sendPageAttentionUpdate(currentActiveTab, browserIsActive, timeStamp);
        }, idleThreshold);
    }

    // Cache the initial idle, window, and tab state

    browserIsActive = (queryState(idleThreshold) === "active");

    const openWindows = await browser.windows.getAll({
        populate: true
    });
    for(const openWindow of openWindows) {
        // If the window doesn't have a window ID, ignore it
        // This shouldn't happen, but checking anyway since
        // the id property is optional in the windows.Window
        // type
        if(!("id" in openWindow))
            continue;
        // Iterate the tabs in the window to cache tab state
        // and find the active tab in the window
        let activeTabInOpenWindow = -1;
        if("tabs" in openWindow)
            for(const tab of openWindow.tabs) {
                if(tab.active)
                    activeTabInOpenWindow = tab.id;
            }
        updateWindowState(openWindow.id, {
            activeTab: activeTabInOpenWindow
        });

        // If this is the focused window and it is a normal or popup
        // window, remember the window ID and active tab ID (if any)
        // If there is no focused window, or the focused window isn't
        // a normal or popup window, this block will not run and we
        // will retain the default values of tab ID = -1 and window
        // ID = -1
        if(openWindow.focused) {
            currentFocusedWindow = openWindow.id;
            currentActiveTab = activeTabInOpenWindow;
        }
    }

    // Register the pageManager content script for all HTTP(S) URLs
    browser.contentScripts.register({
        matches: [ "http://*/*", "https://*/*" ],
        js: [{
            code: dataUrlToString(pageManagerContentScript)
        }],
        runAt: "document_start"
    });

    initializing = false;
    initialized$2 = true;
}

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

function validate(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return stringify(rnds);
}

/**
 * This module provides functionality for generating random identifiers.
 * Studies can use these identifiers to uniquely label events and other
 * items of interest.
 * @module webScience.id
 */

/**
 * Generate a random (v4) UUID, consistent with RFC4122. These values
 * include 122 bits of cryptographic randomness.
 * @returns {string} The new UUID.
 */
function generateId() {
    return v4();
}

/**
 * An array of AMP cache domains, represented as domains and paths.
 * This representation facilitates parsing AMP urls in `LinkResolution`.
 * Note that the Cloudflare cache is deprecated, but we retain it for
 * completeness.
 * @constant {string[]}
 * @see {@link https://cdn.ampproject.org/caches.json}
 * @see {@link https://blog.cloudflare.com/announcing-amp-real-url/}
 */
const ampCacheDomains = [
    "amp.cloudflare.com", // Cloudflare AMP Cache
    "cdn.ampproject.org", // Google AMP Cache
    "www.bing-amp.com" // Microsoft Bing AMP Cache
];

/**
 * An array of AMP viewers, represented as domains with paths.
 * This representation facilitates parsing AMP urls in `LinkResolution`.
 * @constant {string[]}
 * @see {@link https://developers.google.com/search/docs/guides/about-amp}
 */
const ampViewerDomainsAndPaths = [
    "www.google.com/amp" // Google AMP Viewer
];

/**
 * This module provides functionality for resolving shortened and shimmed URLs.
 * @module webScience.linkResolution
 */

check({
    module: "webScience.linkResolution",
    requiredPermissions: [ "webRequest", "webRequestBlocking" ],
    suggestedOrigins: [ "<all_urls>" ]
});

// AMP caches and viewers

/**
 * A RegExp that matches and parses AMP cache and viewer URLs. If there is a match, the RegExp provides several
 * named capture groups.
 *   * AMP Cache Matches
 *     * `ampCacheSubdomain` - The subdomain, which should be either a reformatted version of the
 *       URL domain or a hash of the domain. If there is no subdomain, this capture group
 *       is `undefined`.
 *     * `ampCacheDomain` - The domain for the AMP cache.
 *     * `ampCacheContentType` - The content type, which is either `c` for an HTML document, `i` for
 *        an image, or `r` for another resource.
 *     * `ampCacheIsSecure` - Whether the AMP cache loads the resource via HTTPS. If it does, this
 *        capture group has the value `s/`. If it doesn't, this capture group is `undefined`.
 *     * `ampCacheUrl` - The underlying URL, without a specified scheme (i.e., `http://` or `https://`).
 *  * AMP Viewer Matches
 *     * `ampViewerDomainAndPath` - The domain and path for the AMP viewer.
 *     * `ampViewerUrl` - The underlying URL, without a specified scheme (i.e., `http://` or `https://`).
 * @see {@link https://developers.google.com/amp/cache/overview}
 * @see {@link https://amp.dev/documentation/guides-and-tutorials/learn/amp-caches-and-cors/amp-cache-urls/}
 * @constant {RegExp}
 */
new RegExp(
    // AMP cache regular expression
    `(?:^https?://(?:(?<ampCacheSubdomain>[a-zA-Z0-9\\-\\.]*)\\.)?(?<ampCacheDomain>${ampCacheDomains.map(escapeRegExpString).join("|")})/(?<ampCacheContentType>c|i|r)/(?<ampCacheIsSecure>s/)?(?<ampCacheUrl>.*)$)`
    + `|` +
    // AMP viewer regular expression
    `(?:^https?://(?<ampViewerDomainAndPath>${ampViewerDomainsAndPaths.map(escapeRegExpString).join("|")})/(?<ampViewerUrl>.*)$)`
    , "i");

/**
 * A MatchPatternSet for AMP caches and viewers.
 * @constant {matching.MatchPatternSet}
 */
createMatchPatternSet(
    domainsToMatchPatterns(ampCacheDomains, false).concat(
        ampViewerDomainsAndPaths.map(ampViewerDomainAndPath => `*://${ampViewerDomainAndPath}*`)));

var popupPromptPage = "data:text/html;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY29udGVudD0idGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgiIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSI+CiAgICAgICAgPG1ldGEgY29udGVudD0idXRmLTgiIGh0dHAtZXF1aXY9ImVuY29kaW5nIj4KICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgIC8qIE1heSBuZWVkIHRvIGFkZCBmb250IGJ1bmRsaW5nIG9yIHJldmlzaXQgdGhlIGZvbnQgY2hvaWNlIGZvciBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHkuICovCiAgICAgICAgICAgIGJvZHkgewogICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5idXR0b24tY29udGFpbmVyIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlOwogICAgICAgICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBzZXBhcmF0ZTsKICAgICAgICAgICAgICAgIGJvcmRlci1zcGFjaW5nOiAwcHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5idXR0b25CbHVlIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxNDVFRTM7CiAgICAgICAgICAgICAgICB3aWR0aDogOTlweDsKICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxNHB4OwogICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDE0cHg7CiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmJ1dHRvbkJsdWU6aG92ZXIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzEwNEZCRjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmJ1dHRvbkdyYXkgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjFmMTsKICAgICAgICAgICAgICAgIHdpZHRoOiAxMDBweDsKICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjazsKICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxNHB4OwogICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDE0cHg7CiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmJ1dHRvbkdyYXk6aG92ZXIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2UyZTJlMjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmljb24gewogICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA1MHB4OwogICAgICAgICAgICAgICAgbWF4LWhlaWdodDogNTBweDsKICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0OwogICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLnNlcGFyYXRvciB7CiAgICAgICAgICAgICAgICB3aWR0aDogMXB4OwogICAgICAgICAgICAgICAgaGVpZ2h0OiA0NnB4OwogICAgICAgICAgICAgICAgY29sb3I6IGJsYWNrOwogICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZDNkM2QzOwogICAgICAgICAgICB9CiAgICAgICAgPC9zdHlsZT4KICAgIDwvaGVhZD4KICAgIDxib2R5PgogICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7IG1heC13aWR0aDogMjgwcHg7IHBhZGRpbmc6IDEwcHg7Ij4KICAgICAgICAgICAgPGltZyBpZD0iaWNvbiIgY2xhc3M9Imljb24iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNvbnRlbnQiIGNsYXNzPSJwYXJhZ3JhcGgiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDEwcHg7IHBhZGRpbmctcmlnaHQ6IDEwcHg7Ij48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24tY29udGFpbmVyIj4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25HcmF5IiBuYW1lPSJsYXRlciI+TGF0ZXI8L2E+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzZXBhcmF0b3IiPjwvc3Bhbj4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25HcmF5IiBuYW1lPSJuZXZlciI+TmV2ZXI8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uQmx1ZSIgbmFtZT0iYWdyZWUiPkNvbnRpbnVlPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIChhc3luYyBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIC8vIExvYWQgdGhlIG1lc3NhZ2UgZnJvbSBzdG9yYWdlCiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlU3RvcmFnZUtleSA9ICJ3ZWJTY2llbmNlLnVzZXJTdXJ2ZXkucG9wdXBQcm9tcHRNZXNzYWdlIjsKICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VSZXN1bHRzID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChtZXNzYWdlU3RvcmFnZUtleSk7CiAgICAgICAgICAgICAgICBpZihtZXNzYWdlUmVzdWx0c1ttZXNzYWdlU3RvcmFnZUtleV0pIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjb250ZW50Iik7CiAgICAgICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSBtZXNzYWdlUmVzdWx0c1ttZXNzYWdlU3RvcmFnZUtleV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTG9hZCBpY29uIFVSTCBmcm9tIHN0b3JhZ2UKICAgICAgICAgICAgICAgIGNvbnN0IGljb25VcmxTdG9yYWdlS2V5ID0gIndlYlNjaWVuY2UudXNlclN1cnZleS5wb3B1cEljb25VcmwiOwogICAgICAgICAgICAgICAgY29uc3QgaWNvblVybFJlc3VsdHMgPSBhd2FpdCBicm93c2VyLnN0b3JhZ2UubG9jYWwuZ2V0KGljb25VcmxTdG9yYWdlS2V5KTsKICAgICAgICAgICAgICAgIGlmKGljb25VcmxSZXN1bHRzW2ljb25VcmxTdG9yYWdlS2V5XSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGljb25FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImljb24iKTsKICAgICAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5zcmMgPSBpY29uVXJsUmVzdWx0c1tpY29uVXJsU3RvcmFnZUtleV07CiAgICAgICAgICAgICAgICAgICAgaWNvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2xpY2tzIG9uIHRoZSBidXR0b25zCiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0Lm5hbWUgPT09ICJhZ3JlZSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHsgdHlwZTogIndlYlNjaWVuY2UudXNlclN1cnZleS5vcGVuU3VydmV5IiB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZS50YXJnZXQubmFtZSA9PT0gImxhdGVyIikgewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZS50YXJnZXQubmFtZSA9PT0gIm5ldmVyIikgewogICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyB0eXBlOiAid2ViU2NpZW5jZS51c2VyU3VydmV5LmNhbmNlbFN1cnZleSIgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSgpOwogICAgICAgIDwvc2NyaXB0PgogICAgPC9ib2R5Pgo8L2h0bWw+IAo=";

var popupNoPromptPage = "data:text/html;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY29udGVudD0idGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgiIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSI+CiAgICAgICAgPG1ldGEgY29udGVudD0idXRmLTgiIGh0dHAtZXF1aXY9ImVuY29kaW5nIj4KICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgIC8qIE1heSBuZWVkIHRvIGFkZCBmb250IGJ1bmRsaW5nIG9yIHJldmlzaXQgdGhlIGZvbnQgY2hvaWNlIGZvciBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHkuICovCiAgICAgICAgICAgIGJvZHkgewogICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5pY29uIHsKICAgICAgICAgICAgICAgIG1heC13aWR0aDogNTBweDsKICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDUwcHg7CiAgICAgICAgICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7IAogICAgICAgICAgICB9CiAgICAgICAgPC9zdHlsZT4KICAgIDwvaGVhZD4KICAgIDxib2R5PgogICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7IG1heC13aWR0aDogMjgwcHg7IHBhZGRpbmc6IDEwcHg7Ij4KICAgICAgICAgICAgPGltZyBpZD0iaWNvbiIgY2xhc3M9Imljb24iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNvbnRlbnQiIGNsYXNzPSJwYXJhZ3JhcGgiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDEwcHg7IHBhZGRpbmctcmlnaHQ6IDEwcHg7Ij48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICAoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBtZXNzYWdlIGZyb20gc3RvcmFnZQogICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZVN0b3JhZ2VLZXkgPSAid2ViU2NpZW5jZS51c2VyU3VydmV5LnBvcHVwTm9Qcm9tcHRNZXNzYWdlIjsKICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VSZXN1bHRzID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChtZXNzYWdlU3RvcmFnZUtleSk7CiAgICAgICAgICAgICAgICBpZihtZXNzYWdlUmVzdWx0c1ttZXNzYWdlU3RvcmFnZUtleV0pIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjb250ZW50Iik7CiAgICAgICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSBtZXNzYWdlUmVzdWx0c1ttZXNzYWdlU3RvcmFnZUtleV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTG9hZCBpY29uIFVSTCBmcm9tIHN0b3JhZ2UKICAgICAgICAgICAgICAgIGNvbnN0IGljb25VcmxTdG9yYWdlS2V5ID0gIndlYlNjaWVuY2UudXNlclN1cnZleS5wb3B1cEljb25VcmwiOwogICAgICAgICAgICAgICAgY29uc3QgaWNvblVybFJlc3VsdHMgPSBhd2FpdCBicm93c2VyLnN0b3JhZ2UubG9jYWwuZ2V0KGljb25VcmxTdG9yYWdlS2V5KTsKICAgICAgICAgICAgICAgIGlmKGljb25VcmxSZXN1bHRzW2ljb25VcmxTdG9yYWdlS2V5XSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGljb25FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImljb24iKTsKICAgICAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5zcmMgPSBpY29uVXJsUmVzdWx0c1tpY29uVXJsU3RvcmFnZUtleV07CiAgICAgICAgICAgICAgICAgICAgaWNvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICA8L2JvZHk+CjwvaHRtbD4gCg==";

/**
 * A module to facilitate surveys of study participants.
 * 
 * # User Experience
 *   * If the user has not been previously prompted for the survey,
 *     the survey will open in a new tab.
 *   * The study's browser action popup will contain either a page
 *     prompting the user to complete the survey (with options to open
 *     the survey or decline the survey), or a neutral page (if the
 *     user has already completed or declined the survey).
 *   * If the user has been previously prompted for the survey, and
 *     has not completed or declined the survey, the user will be
 *     reminded to complete the survey with a browser notification
 *     at a set interval.
 *   * View the documentation for the exported functions for additional
 *     details about usage.
 * 
 * 
 * # Limitations
 * Note that this module is currently very limited: it only supports
 * one survey at a time per study, with few options and a constrained design.
 * We have not yet decided whether to build out this module or implement
 * survey functionality in the Rally core add-on.
 * 
 * # Content Security Policy Requirements
 * This module depends on inline scripts in browser action popups, which
 * require special Content Security Policy permissions in the extension
 * manifest (the `"content_security_policy"` key). Those permissions
 * are currently the following additional `script-src` values.
 *   * `'sha256-csyiOLMfXk2f5pU99mqYFyshgnVYbdp6o9bnQ9hntPA='`
 *   * `'sha256-nYNRfLKTaKqgi4+CK/mcp9hdSsmD8F17GWuo+vQGfqU='`
 * @module webScience.userSurvey
 */

check({
    module: "webScience.userSurvey",
    requiredPermissions: [ "notifications", "webRequest" ],
    requiredContentSecurityPolicy: {
        "script-src": [ "'sha256-csyiOLMfXk2f5pU99mqYFyshgnVYbdp6o9bnQ9hntPA='", "'sha256-nYNRfLKTaKqgi4+CK/mcp9hdSsmD8F17GWuo+vQGfqU='" ]
    }
});

/**
 * A persistent storage space for data about surveys.
 * @type {storage.KeyValueStorage}
 * @private
 */
let storageSpace = null;

/**
 * Whether listeners for this module have already been registered.
 * @type {boolean}
 * @private
 */
let listenersRegistered = false;

/**
 * When we last asked the user to do the survey, either with a browser
 * notification or through opening a tab with the survey.
 * @type {number}
 * @private
 */
let lastSurveyRequest = 0;

/**
 * A fully-qualified URL to an icon file to use for for reminding the
 * user with a notification to complete the survey (is null if there is
 * no such icon).
 * @type {string|null}
 * @private
 */
let reminderIconUrl = null;

/**
 * How often, in seconds, to wait before reminding the user with a
 * notification to participate in the survey.
 * @type {number}
 * @private
 */
let reminderInterval = 0;

/**
 * The message to use for reminding the user with a notification to
 * complete the survey.
 * @type {string}
 * @private
 */
let reminderMessage = "";

/**
 * The title to use for reminding the user with a notification to
 * complete the survey.
 * @type {string}
 * @private
 */
let reminderTitle = "";

/**
 * The URL for the survey on an external platform
 * (e.g., SurveyMonkey, Typeform, Qualtrics, etc.).
 * @type {string}
 * @private
 */
let surveyUrl = "";

const millisecondsPerSecond = 1000;

/**
 * Options for configuring a survey.
 * @typedef {Object} SurveyOptions
 * @param {string} surveyName - A unique name for the survey within the study.
 * @param {string} popupNoPromptMessage - A message to present to the
 * user when there is no survey to prompt.
 * @param {string} popupPromptMessage - A message to present to the user
 * when there is a survey to prompt.
 * @param {string} [popupIcon] - A path to an icon file, relative
 * to the study extension's root, to use for for the browser action popup.
 * This property is optional as the popup does not need to display an icon.
 * @param {string} [reminderIcon] - A path to an icon file, relative
 * to the study extension's root, to use for for reminding the user with a
 * notification to complete the survey. This property is optional as the
 * notification does not need to display an icon.
 * @param {number} reminderInterval - How often, in seconds, to wait before
 * reminding the user with a notification to participate in the survey.
 * @param {string} reminderMessage - The message to use for reminding the
 * user with a notification to complete the survey.
 * @param {string} reminderTitle - The title to use for reminding the
 * user with a notification to complete the survey.
 * @param {string} surveyCompletionUrl - A URL that, when loaded,
 * indicates the user has completed the survey.
 * @param {string} surveyUrl - The URL for the survey on an external
 * platform (e.g., SurveyMonkey, Typeform, Qualtrics, etc.).
 */

/**
 * Opens the survey URL in a new browser tab, appending parameters
 * for the participant's survey ID (surveyID) and timezone offset
 * (timezone).
 * @private
 */
async function openSurveyInNewTab() {
    const surveyId = await getSurveyId();
    const surveyUrlObj = new URL(surveyUrl);
    surveyUrlObj.searchParams.append("surveyId", surveyId);
    surveyUrlObj.searchParams.append("timezone", new Date().getTimezoneOffset());
    browser.tabs.create({
        active: true,
        url: surveyUrlObj.href
    });
}

/**
 * Set a timeout to remind the user to complete the study.
 * @private
 */
function scheduleReminderForUser() {
    setTimeout(remindUser, Math.max((lastSurveyRequest + reminderInterval * millisecondsPerSecond) - Date.now(), 0));
}

/**
 * Remind the user to complete the study, by prompting with a notification.
 * @private
 */
async function remindUser() {
    const surveyCompleted = await storageSpace.get("surveyCompleted");
    const surveyCancelled = await storageSpace.get("surveyCancelled");
    if (surveyCompleted || surveyCancelled) {
        return;
    }
    lastSurveyRequest = Date.now();
    await storageSpace.set("lastSurveyRequest", lastSurveyRequest);
    browser.notifications.create({
        type: "image",
        message: reminderMessage,
        title: reminderTitle,
        iconUrl: reminderIconUrl
    });
    scheduleReminderForUser();
}

/**
 * Set the browser action popup to the survey's no prompt page.
 * @private
 */
function setPopupToNoPromptPage() {
    browser.browserAction.setPopup({
        popup: dataUrlToBlobUrl(popupNoPromptPage)
    });
}

/**
 * Initialize storage for the module.
 * @private
 */
function initializeStorage() {
    if (storageSpace === null) {
        storageSpace = createKeyValueStorage("webScience.userSurvey");
    }
}

/**
 * Listener for webRequest.onBeforeRequest when the URL is the survey
 * completion URL. Sets surveyCompleted to true in storage and changes
 * the browser action popup to the survey's no prompt page.
 * @private
 */
function surveyCompletionUrlListener() {
    storageSpace.set("surveyCompleted", true);
    setPopupToNoPromptPage();
}

/**
 * Prompt the user to respond to a survey. There can only be one survey running at a time.
 * To run a single survey in a study, simply call setSurvey with the specified SurveyOptions object.
 * If there is more than one survey in a study, endSurvey must be called after every survey
 * before starting the next survey.
 * 
 * # Usage Notes
 *   * If there is no active survey, saves the options parameter to storage and
 *     starts the survey based on this parameter.
 *   * If there is an active survey and options.surveyName matches the name of
 *     the active survey, continues the survey based on the options in storage.
 *     This allows for studies with only one survey to simply call this function
 *     with the survey options on study extension startup.
 *   * If there is already an active survey and options.surveyName does not match
 *     the name of the active survey, throws an error as there can only be one
 *     active survey at a time.
 * @param {SurveyOptions} options - The options for the survey.
 */
async function setSurvey(options) {
    initializeStorage();

    let surveyDetails = await storageSpace.get("surveyDetails");

    // If there's no survey in storage, save the parameters in
    //    storage and carry out the survey based on the parameters.
    // If options.surveyName differs from the survey name in storage,
    //    throw an error, because only one survey can be set at a time.
    // Otherwise, options.surveyName is the same as the survey name in
    //    storage. In this case, use the survey attributes from storage.
    if (!surveyDetails) {
        surveyDetails = options;
        await storageSpace.set("surveyDetails", options);
    } else if (surveyDetails.surveyName !== options.surveyName) {
        throw new Error("userSurvey only supports one survey at a time. Complete the survey that has previously been set.");
    }

    const currentTime = Date.now();
    ({surveyUrl,reminderInterval, reminderTitle, reminderMessage } = surveyDetails);
    browser.storage.local.set({
        "webScience.userSurvey.popupPromptMessage": surveyDetails.popupPromptMessage
    });
    browser.storage.local.set({
        "webScience.userSurvey.popupNoPromptMessage": surveyDetails.popupNoPromptMessage
    });
    reminderIconUrl = surveyDetails.reminderIcon ?
        browser.runtime.getURL(surveyDetails.reminderIcon) : null;
    browser.storage.local.set({
        "webScience.userSurvey.popupIconUrl": 
            surveyDetails.popupIcon ? browser.runtime.getURL(surveyDetails.popupIcon) : null
    });

    // Check when we last asked the user to do the survey. If it's null,
    // we've never asked, which means the extension just got installed.
    // Open a tab with the survey, and save this time as the most recent
    // request for participation.
    lastSurveyRequest = await storageSpace.get("lastSurveyRequest");
    const surveyCompleted = await storageSpace.get("surveyCompleted");
    const surveyCancelled = await storageSpace.get("surveyCancelled");

    // Configure the browser action popup page
    if (surveyCompleted || surveyCancelled) {
        setPopupToNoPromptPage();
        return;
    }
    else {
        browser.browserAction.setPopup({
            popup: dataUrlToBlobUrl(popupPromptPage)
        });
    }

    // If this is the first survey request, open the survey in a new tab.
    if (lastSurveyRequest === null) {
        lastSurveyRequest = currentTime;
        await storageSpace.set("lastSurveyRequest", lastSurveyRequest);

        // Since this is the first survey request, initialize the stored
        // completed and cancelled state to false.
        await storageSpace.set("surveyCompleted", false);
        await storageSpace.set("surveyCancelled", false);
        openSurveyInNewTab();
    }

    // Schedule a reminder for the user
    scheduleReminderForUser();

    // Set a listener for the survey completion URL.
    browser.webRequest.onBeforeRequest.addListener(
        surveyCompletionUrlListener,
        { urls: [ (new URL(surveyDetails.surveyCompletionUrl)).href + "*" ] }
    );

    // Listeners for cancel and open survey button click only need to be added once.
    // They do not need to be added again for subsequent calls to setSurvey.
    // These listeners do not need to be removed in endCurrentSurvey because they will
    // not receive messages when the popup is the no prompt page.
    if (!listenersRegistered) {
        // Set listeners for cancel and open survey button clicks in the survey request.
        onMessage.addListener(() => {
            storageSpace.set("surveyCancelled", true);
            setPopupToNoPromptPage();
            browser.webRequest.onBeforeRequest.removeListener(surveyCompletionUrlListener);
        }, { type: "webScience.userSurvey.cancelSurvey" });
        onMessage.addListener(() => {
            openSurveyInNewTab();
        }, { type: "webScience.userSurvey.openSurvey" });
    }

    listenersRegistered = true;
}

/**
 * Each study participant has a persistent survey ID, generated with
 * the id module. The ID is automatically added as a parameter to
 * the survey URL, enabling researchers to import survey data from an
 * external platform and sync it with Rally data. This method returns the
 * survey ID, generating it if it does not already exist.
 * @returns {string} - The participant's survey ID.
 */
async function getSurveyId() {
    initializeStorage();
    let surveyId = await storageSpace.get("surveyId");
    if (surveyId === null) {
        surveyId = generateId();
        await storageSpace.set("surveyId", surveyId);
    }
    return surveyId;
}

/**
 * Gets the status of the current survey. Can be used if a
 * subsequent survey depends on the status of the previous survey.
 * @returns {string|null} - The status of the survey (either "completed",
 * "cancelled", or "active") or null if there is no survey.
 */
async function getSurveyStatus() {
    initializeStorage();

    const surveyDetails = await storageSpace.get("surveyDetails");
    const surveyCompleted = await storageSpace.get("surveyCompleted");
    const surveyCancelled = await storageSpace.get("surveyCancelled");

    if (!surveyDetails) {
        return null;
    } else if(surveyCompleted) {
        return "completed";
    } else if(surveyCancelled) {
        return "cancelled";
    } else {
        return "active";
    }
}

var pageNavigationContentScript = "data:application/javascript;base64,";

/**
 * This module enables measuring user engagement with webpages. See the `onPageData`
 * event for specifics.
 *
 * @module webScience.pageNavigation
 */

/**
 * Additional information about the page data event.
 * @typedef {Object} PageDataDetails
 * @property {number} pageId - The ID for the page, unique across browsing sessions.
 * @property {string} url - The URL of the page, without any hash.
 * @property {string} referrer - The referrer URL for the page, or `""` if there is no referrer.
 * @property {number} pageVisitStartTime - The time when the page visit started, in ms since
 * the epoch.
 * @property {number} pageVisitStopTime - The time when the page visit ended, in ms since the
 * epoch.
 * @property {number} attentionDuration - The amount of time in ms that the page had user attention.
 * @property {number} audioDuration - The amount of time in ms that the page was playing audio.
 * @property {number} attentionAndAudioDuration - The amount of time in ms that the page both had
 * user attention and was playing audio.
 * @property {number} maxRelativeScrollDepth - The maximum relative scroll depth on the page.
 * @property {boolean} privateWindow - Whether the page loaded in a private window.
 */

/**
 * @callback pageDataListener
 * @param {PageDataDetails} details - Additional information about the page data event.
 */

/**
 * @typedef {Object} PageDataListenerRecord
 * @property {matching.MatchPatternSet} matchPatternSet - The match patterns for the listener.
 * @property {boolean} privateWindows - Whether to notify the listener about pages in private windows.
 * @property {browser.contentScripts.RegisteredContentScript} contentScript - The content
 * script associated with the listener.
 * @private
 */

/**
 * A map where each key is a listener function and each value is a record for that listener function.
 * @constant {Map<pageDataListener, PageDataListenerRecord>}
 * @private
 */
const pageDataListeners = new Map();

/**
 * @callback PageDataAddListener
 * @param {pageDataListener} listener - The listener to add.
 * @param {Object} options - Options for the listener.
 * @param {string[]} options.matchPatterns - The webpages that the listener should be notified about, specified with WebExtensions match patterns.
 * @param {boolean} [options.privateWindows=false] - Whether to measure pages in private windows.
 */

/**
 * @callback PageDataRemoveListener
 * @param {pageDataListener} listener - The listener to remove.
 */

/**
 * @callback PageDataHasListener
 * @param {pageDataListener} listener - The listener to check.
 * @returns {boolean} Whether the listener has been added for the event.
 */

/**
 * @callback PageDataHasAnyListeners
 * @returns {boolean} Whether the event has any listeners.
 */

/**
 * @typedef {Object} PageDataEvent
 * @property {PageDataAddListener} addListener - Add a listener for page data.
 * @property {PageDataRemoveListener} removeListener - Remove a listener for page data.
 * @property {PageDataHasListener} hasListener - Whether a specified listener has been added.
 * @property {PageDataHasAnyListeners} hasAnyListeners - Whether the event has any listeners.
 */

/**
 * An event that fires when a page visit has ended and data about the
 * visit is available.
 * @constant {PageDataEvent}
 */
const onPageData = createEvent({
    name: "webScience.pageNavigation.onPageData",
    addListenerCallback: addListener$1,
    removeListenerCallback: removeListener$1,
    notifyListenersCallback: () => { return false; }
});

/**
 * Whether the module has completed initialization.
 * @type{boolean}
 * @private
 */
let initialized$3 = false;

/**
 * A callback function for adding a page data listener.
 * @param {pageDataCallback} listener - The listener function being added.
 * @param {Object} options - Options for the listener.
 * @param {string[]} options.matchPatterns - The match patterns for pages where the listener should
 * be notified.
 * @param {boolean} [options.privateWindows=false] - Whether the listener should be notified for
 * pages in private windows.
 * @private
 */
async function addListener$1(listener, {
    matchPatterns,
    privateWindows = false
}) {
    // Initialization
    if(!initialized$3) {
        initialized$3 = true;
        await initialize$1();
        onMessage.addListener(messageListener,
            {
                type: "webScience.pageNavigation.pageData",
                schema: {
                    pageId: "string",
                    url: "string",
                    referrer: "string",
                    pageVisitStartTime: "number",
                    pageVisitStopTime: "number",
                    attentionDuration: "number",
                    audioDuration: "number",
                    attentionAndAudioDuration: "number",
                    maxRelativeScrollDepth: "number",
                    privateWindow: "boolean"
                }
            });
    }

    // Compile the match patterns for the listener
    const matchPatternSet = createMatchPatternSet(matchPatterns);
    // Register a content script for the listener
    const contentScript = await browser.contentScripts.register({
        matches: matchPatterns,
        js: [{
            code: dataUrlToString(pageNavigationContentScript)
        }],
        runAt: "document_start"
    });

    // Store a record for the listener
    pageDataListeners.set(listener, {
        matchPatternSet,
        contentScript,
        privateWindows
    });
}

/**
 * A callback function for removing a page data listener.
 * @param {pageDataCallback} listener - The listener that is being removed.
 * @private
 */
 function removeListener$1(listener) {
    // If there is a record of the listener, unregister its content script
    // and delete the record
    const listenerRecord = pageDataListeners.get(listener);
    if(listenerRecord === undefined) {
        return;
    }
    listenerRecord.contentScript.unregister();
    pageDataListeners.delete(listener);
}

/**
 * A callback function for messages from the content script.
 * @param {PageDataDetails} pageData - Information about the page.
 * @private
 */
 function messageListener(pageData) {
    // Remove the type string from the content script message
    delete pageData.type;

    // Notify listeners when the private window and match pattern requirements are met
    for(const [listener, listenerRecord] of pageDataListeners) {
        if((!pageData.privateWindow || listenerRecord.privateWindows)
        && (listenerRecord.matchPatternSet.matches(pageData.url))) {
            listener(pageData);
        }
    }
}

/**
 * This module enables measuring user exposure to linked content. See the
 * `onLinkExposureData` and `onLinkExposureUpdate` events for specifics.
 * There is an important difference between these events: `onLinkExposureData`
 * fires once per page with a complete set of link exposure data, while
 * `onLinkExposureUpdate` fires throughout a page's lifespan as link exposures
 * occur. For most use cases, `onLinkExposureData` is the right event to use.
 *
 * @module webScience.linkExposure
 */

check({
    module: "webScience.linkExposure",
    requiredPermissions: [ "storage" ],
    suggestedPermissions: [ "unlimitedStorage" ]
});

var pageTextContentScript = "data:application/javascript;base64,";

/**
 * This module enables analyzing the text content of webpages, including with
 * natural language processing methods. The module uses Mozilla Readability
 * in a content script to parse document title and content when possible.
 * 
 * # Training, Testing, and Deploying Natural Language Processing Models
 * A motivating use case for this module is applying natural language
 * processing methods to webpage text. The module provides infrastructure for
 * NLP models, but leaves implementation and evaluation of models to study
 * authors. We recommend using existing toolkits for NLP feature generation
 * (e.g., Natural or NLP.js) and for working with models (e.g., TensorFlow.js,
 * ONNX.js, WebDNN, or sklearn-porter). We also recommend using the same
 * codebase for collecting data (e.g., with web crawls), constructing models,
 * evaluating models, and deploying models in browser-based studies. When
 * maintaining multiple NLP codebases for a browser-based study, subtle
 * inconsistencies are easy to introduce and can call into question NLP model
 * performance.
 * 
 * # Web Crawls to Collect Natural Language Processing Training Data
 * Because WebScience integrates with ordinary browser extensions, you can
 * use this module in a web crawl to collect page text content as NLP training
 * data. All the major browser automation toolkits (e.g., Selenium, Puppeteer,
 * Playwright, and WebdriverIO) support running web crawls with browser
 * extensions installed. We recommend running an online crawl to collect NLP
 * data, using this module to extract webpage text, then training and testing
 * models offline. If you use web crawl data to construct an NLP model for a
 * browser-based study, be sure to carefully consider how the distribution
 * of pages in the crawl compares to the distribution of pages that a user in
 * the study might visit. If a crawl is not representative of user browsing,
 * NLP model performance on crawl data might significantly differ from
 * performance when deployed in a browser-based study.
 * 
 * # Implementing Natural Language Processing in Web Workers
 * Because natural language processing methods can be computationally
 * expensive, it is very important to offload NLP tasks from an extension's
 * main thread. We recommend pairing this module with the `workers` module to 
 * implement NLP tasks inside of Web Workers, which run in separate threads
 * and will not block the extension's main thread. Some NLP toolkits support
 * additional optimizations, such as WebAssembly or WebGL, and we recommend
 * enabling all available optimizations to minimize the possibility of impact
 * on the user's browsing experience. 
 * 
 * @see {@link https://github.com/mozilla/readability}
 * @see {@link https://github.com/NaturalNode/natural}
 * @see {@link https://github.com/axa-group/nlp.js}
 * @see {@link https://www.tensorflow.org/js}
 * @see {@link https://github.com/microsoft/onnxjs}
 * @see {@link https://mil-tokyo.github.io/webdnn/}
 * @see {@link https://github.com/nok/sklearn-porter}
 * @module webScience.pageText
 */

/**
 * Additional information about the page data event.
 * @typedef {Object} TextParsedDetails
 * @property {number} pageId - The ID for the page, unique across browsing sessions.
 * @property {string} url - The URL of the page, without any hash.
 * @property {string} title - The title of the document, parsed by Readability.
 * @property {string} content - The document text content as an HTML string, parsed by Readability.
 * @property {string} textContent - The document text content with HTML tags removed, parsed by Readability.
 * @property {boolean} privateWindow - Whether the page loaded in a private window.
 */

/**
 * @callback textParsedListener
 * @param {TextParsedDetails} details - Additional information about the page data event.
 */

/**
 * @typedef {Object} TextParsedListenerRecord
 * @property {matching.MatchPatternSet} matchPatternSet - The match patterns for the listener.
 * @property {boolean} privateWindows - Whether to notify the listener about pages in private windows.
 * @property {browser.contentScripts.RegisteredContentScript} contentScript - The content
 * script associated with the listener.
 */

/**
 * A map where each key is a listener function and each value is a record for that listener function.
 * @constant {Map<textParsedListener, TextParsedListenerRecord>}
 * @private
 */
const textParsedListeners = new Map();

/**
 * @callback TextParsedAddListener
 * @param {textParsedListener} listener - The listener to add.
 * @param {Object} options - Options for the listener.
 * @param {string[]} options.matchPatterns - The webpages where the listener should be notified about page text.
 * @param {boolean} [options.privateWindows=false] - Whether to notify the listener about pages in private windows.
 */

/**
 * @callback TextParsedRemoveListener
 * @param {textParsedListener} listener - The listener to remove.
 */

/**
 * @callback TextParsedHasListener
 * @param {textParsedListener} listener - The listener to check.
 * @returns {boolean} Whether the listener has been added for the event.
 */

/**
 * @callback TextParsedHasAnyListeners
 * @returns {boolean} Whether the event has any listeners.
 */

/**
 * @typedef {Object} TextParsedEvent
 * @property {TextParsedAddListener} addListener - Add a listener for page text.
 * @property {TextParsedRemoveListener} removeListener - Remove a listener for page text.
 * @property {TextParsedHasListener} hasListener - Whether a specified listener has been added.
 * @property {TextParsedHasAnyListeners} hasAnyListeners - Whether the event has any listeners.
 */

/**
 * An event that fires when a page's text content has been parsed with Readability. If the text
 * content is not parseable, this event does not fire.
 * @constant {TextParsedEvent}
 */
const onTextParsed = createEvent({
    name: "webScience.pageText.onTextParsed",
    addListenerCallback: addListener$2,
    removeListenerCallback: removeListener$2,
    notifyListenersCallback: () => { return false; }
});

/**
 * Whether the module has completed initialization.
 * @type{boolean}
 * @private
 */
let initialized$4 = false;

/**
 * A callback function for adding a text parsed listener.
 * @param {pageDataCallback} listener - The listener function being added.
 * @param {Object} options - Options for the listener.
 * @param {string[]} options.matchPatterns - The match patterns for pages where the listener should
 * be notified.
 * @param {boolean} [options.privateWindows=false] - Whether the listener should be notified for
 * pages in private windows.
 * @private
 */
async function addListener$2(listener, {
    matchPatterns,
    privateWindows = false
}) {
    // Initialization
    if (!initialized$4) {
        initialized$4 = true;
        await initialize$1();
        // Listen for content script messages
        onMessage.addListener(messageListener$1,
            {
                type: "webScience.pageText.parsedText",
                schema: {
                    pageId: "string",
                    url: "string",
                    title: "string",
                    content: "string",
                    textContent: "string",
                    privateWindow: "boolean"
                }
            });
        // Notify the content script when there is a new Readability status
        // for a page and the page URL matches at least one listener
        registerSchema("webScience.pageText.isArticle", {
            isArticle: "boolean"
        });
        browser.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
            if("isArticle" in changeInfo && "url" in tab) {
                // Test match patterns here rather than in the tabs.onUpdated
                // listener options so we don't have to manage multiple listeners
                // or remove and add the listener while events might be queued
                for (const listenerRecord of textParsedListeners.values()) {
                    if (listenerRecord.matchPatternSet.matches(tab.url)) {
                        sendMessageToTab(tabId, {
                            type: "webScience.pageText.isArticle",
                            isArticle: tab.isArticle
                        });
                        break;
                    }
                }
            }
        }, {
            urls: [ "<all_urls>" ],
            properties: [ "isArticle" ]
        });
    }

    // Compile the match patterns for the listener
    const matchPatternSet = createMatchPatternSet(matchPatterns);
    // Register a content script for the listener
    const contentScript = await browser.contentScripts.register({
        matches: matchPatterns,
        js: [{
            code: dataUrlToString(pageTextContentScript)
        }],
        runAt: "document_idle"
    });

    // Store a record for the listener
    textParsedListeners.set(listener, {
        matchPatternSet,
        contentScript,
        privateWindows
    });
}

/**
 * A callback function for removing a text parsed listener.
 * @param {pageDataCallback} listener - The listener that is being removed.
 * @private
 */
function removeListener$2(listener) {
    // If there is a record of the listener, unregister its content script
    // and delete the record
    const listenerRecord = textParsedListeners.get(listener);
    if (listenerRecord === undefined) {
        return;
    }
    listenerRecord.contentScript.unregister();
    textParsedListeners.delete(listener);
}

/**
 * A callback function for messages from the content script.
 * @param {TextParsedDetails} textParsedDetails - Details of the text parsed from the
 * page.
 * @private
 */
function messageListener$1(textParsedDetails) {
    // Remove the type string from the content script message
    delete textParsedDetails.type;

    // Notify listeners when the private window and match pattern requirements are met
    for (const [listener, listenerRecord] of textParsedListeners) {
        if ((!textParsedDetails.privateWindow || listenerRecord.privateWindows)
            && (listenerRecord.matchPatternSet.matches(textParsedDetails.url))) {
            listener(textParsedDetails);
        }
    }
}

/**
 * This is a wrapper to store things that WebScience PageNavigation used to
 *
 * Brian Chivers, 3/19/2021
 *
 * @module WebScience.Measurements.PageText
 */
 let initialized$5 = false;
 
 /**
  * Start an article contents study.
  * @param {Object} options - A set of options for the study.
  * @param {string[]} [options.domains=[]] - The domains of interest for the study.
  */
 async function startMeasurement ({
     domains = []
 }) {
 
   if (initialized$5){
     return   
   }
   initialized$5 = true;
 
   onTextParsed.addListener(async (pageData) => {
    let surveyStatus  = await getSurveyStatus();
    if (surveyStatus=="completed"){
      let pageId = "WebScience.ArticleContents."+pageData.pageId;
      let userID = await getSurveyId();
      pageData['userID'] = ''+userID;
      delete pageData.content;
      browser.storage.local.set({[pageId]:pageData});
    } else {
      console.log("Survey not completed");
    }
   }, {
     matchPatterns: domainsToMatchPatterns(domains)
   });
 }

/**
 * This module measures advertisement info on news pages
 *
 * Brian Chivers, 3/19/2021
 * @module WebScience.Measurements.Advertisements
 */
let initialized$6 = false;

/**
 * Start an advertisements study.
 * @param {Object} options - A set of options for the study.
 * @param {string[]} [options.domains=[]] - The domains of interest for the study.
 */
async function startMeasurement$1 ({
  domains = []
}) {
  if (initialized$6) {
    return
  }
  
  initialized$6 = true;
  await initialize$1();

  // Build the URL matching set for content scripts
  let contentScriptMatches = domainsToMatchPatterns(domains, true);

  // Register the content script for measuring advertisement info
  // The CSS selectors file is needed to find ads on the page
  await browser.contentScripts.register ({
    matches: contentScriptMatches,
    js: [
      {
        file: '/src/ad_css_selectors.js'
      },
      {
        file: '/src/content-scripts/page-ads.js'
      }
      ],
    runAt: 'document_start'
  });

  // Handle page depth events
  onMessage.addListener( async (adInfo, sender, sendResponse) => {
    let surveyStatus  = await getSurveyStatus();
    if (surveyStatus=="completed"){
      let pageId = "WebScience.Advertisements."+adInfo.pageId;
      adInfo.url = normalizeUrl(sender.url);
      adInfo.tabId = sender.tab.id;
      let userID = await getSurveyId();
      adInfo['userID'] = ''+userID;
      browser.storage.local.set({[pageId]:adInfo});
    } else {
      console.log("Survey not completed");
    }
  }, {
    type: 'WebScience.advertisements',
    schema:{
      pageId:'string',
      type: 'string',
      url: 'string',
      ads: 'object',
      body: 'object',
      context:'object'
    }
  }
  );
}

/**
 * This is a wrapper to store things that WebScience PageNavigation used to
 *
 * Brian Chivers, 3/19/2021
 *
 * @module WebScience.Measurements.PageNav
 */

/**
 * A KeyValueStorage object for data associated with the study.
 * @type {Object}
 * @private
 */
let initialized$7 = false;

/**
 * Start an article contents study.
 * @param {Object} options - A set of options for the study.
 * @param {string[]} [options.domains=[]] - The domains of interest for the study.
 */
async function startMeasurement$2 ({
    domains = []
}) {

  if (initialized$7){
    return   
  }
  initialized$7 = true;

  onPageData.addListener(async (pageData) => {
    let surveyStatus  = await getSurveyStatus();
    if (surveyStatus=="completed"){
      let pageId = "WebScience.PageNav."+pageData.pageId.toString();
      let userID = await getSurveyId();
      pageData['userID'] = ''+userID;
      browser.storage.local.set({[pageId]:pageData});
    } else {
      console.log("Survey not completed");
    }
  }, {
    matchPatterns: domainsToMatchPatterns(domains)
  });
}

const destinationDomains = [
"1011now.com",
"10news.com",
"10tv.com",
"11alive.com",
"12news.com",
"12newsnow.com",
"12up.com",
"13abc.com",
"13newsnow.com",
"13wham.com",
"13wmaz.com",
"14news.com",
"14wfie.com",
"22thepoint.com",
"247sports.com",
"247wallst.com",
"27east.com",
"2havefun.com",
"35wsee.com",
"397news.com",
"39online.com",
"3dprintingindustry.com",
"3newsnow.com",
"4029tv.com",
"4029tv.com",
"4029tv.com",
"417mag.com",
"47tv.com",
"48north.com",
"4bcaonline.com",
"4utah.com",
"58abc.com",
"5newsonline.com",
"5newsonline.com",
"6abc.com",
"6sqft.com",
"98online.com",
"9and10news.com",
"9and10news.com",
"9news.com",
"9news.com.au",
"a2indy.com",
"abajournal.com",
"abbington.com",
"abbington.com",
"abbington.com",
"abc-11.com",
"abc10.com",
"abc10up.com",
"abc11.com",
"abc12.com",
"abc13.com",
"abc15.com",
"abc18lima.com",
"abc19.tv",
"abc22.com",
"abc22now.com",
"abc22tv.com",
"abc23.com",
"abc24.com",
"abc25.com",
"abc26.com",
"abc27.com",
"abc30.com",
"abc3340.com",
"abc3340.com",
"abc3340.com",
"abc45.com",
"abc53.com",
"abc6.com",
"abc6onyourside.com",
"abc7.com",
"abc7amarillo.com",
"abc7amarillo.com",
"abc7chicago.com",
"abc7news.com",
"abc7ny.com",
"abcactionnews.com",
"abcnews.go.com",
"abcnews4.com",
"abcnewspapers.com",
"abcnewspapers.com",
"abcnewspapers.com",
"abcstlouis.com",
"aberdeennews.com",
"abilene-rc.com",
"aboutstark.com",
"abovethelaw.com",
"abqjournal.com",
"abqjournal.com",
"abqjournal.com",
"abqthemag.com",
"acadianagazette.net",
"accesspress.org",
"accountingtoday.com",
"accuweather.com",
"acfreepress.com",
"ack.net",
"aclj.org",
"aclu.org",
"actionnewsjax.com",
"actionnewsnow.com",
"acuoptimist.com",
"adage.com",
"adaherald.com",
"adaircountyfreepress.com",
"adairprogress.com",
"adairvoice.com",
"adamsc.com",
"addisonindependent.com",
"adelnews.com",
"adirondackdailyenterprise.com",
"adirondackexpress.com",
"adn.com",
"advances.sciencemag.org",
"advancetitan.com",
"advertiser-tribune.com",
"advertiserdemocrat.com",
"advertisergleam.com",
"advertisernewsnorth.com",
"advisor-chronicle.com",
"advocate-news.com",
"advocate-online.net",
"advocate.com",
"advocateanddemocrat.com",
"advocatepress.com",
"adweek.com",
"aei.org",
"aetn.org",
"aetn.org",
"aetn.org",
"aetn.org",
"af.reuters.com",
"afr.com",
"africanarguments.org",
"africanews.com",
"afro.com",
"agalert.com",
"agjournalonline.com",
"agri-pulse.com",
"ahwatukee.com",
"aikenstandard.com",
"ainonline.com",
"ainsworthnews.com",
"ainsworthnews.com",
"ainsworthnews.com",
"airforcetimes.com",
"ajc.com",
"ajc.com",
"ajnews.com",
"akbizmag.com",
"akron.com",
"akronhometowner.com",
"akronlegalnews.com",
"akronlife.com",
"akronnewsreporter.com",
"aksuperstation.com",
"al-monitor.com",
"al.com",
"al.com",
"al.com",
"alabama.travel",
"alabamamessenger.com",
"alabamanews.net",
"alachuatoday.com",
"alamedasun.com",
"alamogordonews.com",
"alamosanews.com",
"alaska broadcast television",
"alaska.edu",
"alaskaadventures.net",
"alaskajournal.com",
"alaskamagazine.com",
"alaskaone.org",
"alaskaoutdoorjournal.com",
"alaskastar.com",
"albanyenterprise.com",
"albanyherald.com",
"albawaba.com",
"albertleatribune.com",
"albianews.com",
"albionnewsonline.com",
"albionnewsonline.com",
"albionpleiad.com",
"alconareview.com",
"aldenadvance.com",
"aldenadvertisernews.com",
"aldianews.com",
"aledotimesrecord.com",
"alestlelive.com",
"aleteia.org",
"alexandriagazette.com",
"alexcityoutlook.com",
"alexcityoutlook.com",
"alextimes.com",
"algona.com",
"alianzanews.com",
"alibi.com",
"alicetx.com",
"aljazeera.com",
"allafrica.com",
"allegannews.com",
"allegannews.com",
"alleghanynews.com",
"alliancetimes.com",
"alligator.org",
"alligator.org",
"allkpop.com",
"allotsego.com",
"allure.com",
"almadentimes.com",
"almanacnews.com",
"alpineavalanche.com",
"alternet.org",
"altnewsban.com",
"altoonamirror.com",
"altpress.com",
"altustimes.com",
"alvareviewcourier.com",
"alvinsun.net",
"am-news.com",
"amarillo.com",
"amboynews.com",
"ameliamonitor.com",
"america.aljazeera.com",
"americamagazine.org",
"americanbanker.com",
"americanbazaaronline.com",
"americanpress.com",
"americanprogress.org",
"americanrivermessenger.com",
"americanthinker.com",
"americateve.com",
"americustimesrecorder.com",
"americusumterobserver.com",
"amestrib.com",
"amherstbee.com",
"amherstbulletin.com",
"amigonews.com",
"amish-heartland.com",
"amisun.com",
"amityvillerecord.com",
"amnesty.org",
"amny.com",
"anchoragepress.com",
"ancient-origins.net",
"andalusiastarnews.com",
"andersonian.com",
"andovertownsman.com",
"andrewscountynews.com",
"annandaleadvocate.com",
"annanews.com",
"annistonstar.com",
"annistonstar.com",
"annistonstar.com",
"annistonstar.com",
"annistonstar.com",
"annistonstar.com",
"ansonrecord.com",
"anthonyrepublicannews.com",
"antigodailyjournal.com",
"antonnews.com",
"antrimreview.net",
"aol.com",
"aopa.org",
"apalachtimes.com",
"apg-wi.com",
"apg-wi.com",
"apg-wi.com",
"apg-wi.com",
"apg-wi.com",
"apnews.com",
"app.com",
"appalachianhighways.com",
"appalachianhighways.com",
"appalachianhighways.com",
"appalachianhighways.com",
"appeal-democrat.com",
"appeal-democrat.com",
"appeal-democrat.com",
"appeal-democrat.com",
"applaudwomen.com",
"appleinsider.com",
"aptv.org",
"aptv.org",
"aptv.org",
"aptv.org",
"aptv.org",
"aptv.org",
"aptv.org",
"aptv.org",
"aptv.org",
"aquinas.edu",
"arabnews.com",
"aransaspassprogress.com",
"arapahoemirror.org",
"arbiteronline.com",
"arcadianews.com",
"archboldbuckeye.com",
"archdaily.com",
"archpaper.com",
"arcolarecordherald.com",
"ardeerhunting.com",
"ardmoreite.com",
"areanewsgroup.com",
"areanewsgroup.com",
"areanewsgroup.com",
"areawidenews.com",
"arenacindependent.com",
"argonautnews.com",
"argus-press.com",
"argusleader.com",
"argusleader.com",
"argusobserver.com",
"argusobserver.com",
"argussunonline.com",
"arizhwys.com",
"arizona.edu",
"arizonaguide.com",
"arkansas.com",
"arkansasbusiness.com",
"arkansasleader.com",
"arkansasonline.com",
"arkansasweekly.com",
"arklatexhomepage.com",
"arklatexhomepage.com",
"arklatexhomepage.com",
"arktimes.com",
"arkvalleynews.com",
"arlingtonconnection.com",
"arlingtonmnnews.com",
"arlingtontimes.com",
"armenianweekly.com",
"armytimes.com",
"arnoldne.org",
"aroundosceola.com",
"arstechnica.com",
"artesianews.com",
"artsy.net",
"artvoice.com",
"arvadapress.com",
"as-coa.org",
"asahi.com",
"ashleycountyledger.com",
"ashleynewsobserver.com",
"ashtongazette.com",
"asia.nikkei.com",
"asianjournal.com",
"asianjournalusa.com",
"asianreporter.com",
"aspendailynews.com",
"aspentimes.com",
"aspentimes.com",
"asu.edu",
"asuchronicle.com",
"asuherald.com",
"asurampage.com",
"atascaderonews.com",
"atchisonglobenow.com",
"athensmessenger.com",
"athensnews.com",
"athensreview.com",
"atholdailynews.com",
"atimes.com",
"atkinschronicle.com",
"atkinschronicle.com",
"atkinsongraphic.com",
"atlanta.net",
"atlantadailyworld.com",
"atlanticbreezes.com",
"atlasobscura.com",
"atmoreadvance.com",
"atmorenews.com",
"auburnjournal.com",
"auburnpub.com",
"augusta.com",
"augusta.com",
"augustafreepress.com",
"augustatimes.net",
"auroraadvertiser.net",
"auroraadvocate.com",
"auroranewsregister.com",
"aurorasentinel.com",
"austinchronicle.com",
"austindailyherald.com",
"austinweeklynews.com",
"autoblog.com",
"avclub.com",
"avenuenews.com",
"avidgolferonline.com",
"avoyellestoday.com",
"avpress.com",
"axios.com",
"azbilingual.com",
"azbw.com",
"azcapitoltimes.com",
"azcardinals.com",
"azcentral.com",
"azcentral.com",
"azcentral.com",
"azcentral.com",
"azdailysun.com",
"azfamily.com",
"azjournal.com",
"azpm.org",
"azpm.org",
"azteca43.tv",
"azteca48.com",
"aztecasd.com",
"aztv.com",
"aztv.com",
"babsonfreepress.com",
"babylonbeacon.com",
"backbaysun.com",
"backroadsnews.com",
"bacone.edu",
"badgerherald.com",
"bainbridgereview.com",
"bajoelsol.com",
"bakercityherald.com",
"bakercountypress.com",
"bakersfield.com",
"bakersfieldnow.com",
"bakersfieldnow.com",
"baldwincity.com",
"balita.com",
"balkaninsight.com",
"ballardnewstribune.com",
"ballstatedaily.com",
"baltimore.cbslocal.com",
"baltimorechronicle.com",
"baltimorepostexaminer.com",
"baltimoreravens.com",
"baltimoresun.com",
"baltimoresun.com",
"baltimoresun.com",
"baltimoresun.com",
"baltimoresun.com",
"baltimoresun.com",
"baltimoretimes-online.com",
"banderabulletin.com",
"bangkokpost.com",
"bangordailynews.com",
"bankerandtradesman.com",
"bankrate.com",
"banksnewstoday.com",
"bannergraphic.com",
"barbertonherald.com",
"barnesville.com",
"barnesvillerecordreview.net",
"barnstablepatriot.com",
"barrons.com",
"barrowcountynews.com",
"barrowjournal.com",
"bartonchronicle.com",
"baruchconnect.com",
"basehorinfo.com",
"bastropenterprise.com",
"batesvilleheraldtribune.com",
"battlecreekenquirer.com",
"baxleynewsbanner.com",
"baxterbulletin.com",
"bayareaobserver.com",
"baycitytribune.com",
"baylorlariat.com",
"baymillsnews.com",
"baysideoc.com",
"baystateparent.com",
"baytownsun.com",
"bayweekly.com",
"bbc.co.uk",
"bbherald.com",
"bccourier.com",
"bcdemocrat.com",
"bcdemocratonline.com",
"bcheights.com",
"bcn-news.com",
"bcrnews.com",
"bctelegraph.com",
"bctribune.com",
"bdemo.com",
"bdtonline.com",
"beachcarolina.com",
"beachcomber.com",
"beachesleader.com",
"beaconhilltimes.com",
"beacononlinenews.com",
"beaconseniornews.com",
"beardstownnewspapers.com",
"beatricedailysun.com",
"beaumontenterprise.com",
"beaumontenterprise.com",
"beaumontenterprise.com",
"beaumontenterprise.com",
"beaumontenterprise.com",
"beaumontenterprise.com",
"beauregarddailynews.net",
"beavercreeknewscurrent.com",
"beckershospitalreview.com",
"becon.tv",
"becon.tv",
"bedfordbulletin.com",
"bedfordtimes-press.com",
"beebenews.com",
"beenews.com",
"belfasttelegraph.co.uk",
"belgrade-news.com",
"belleplaineherald.com",
"bellevilleareaindependent.com",
"bellevuebusinessjournal.com",
"bellevueheraldleader.com",
"bellinghambusinessnews.com",
"bellinghamherald.com",
"belmondnews.com",
"beloitdailynews.com",
"bemidjipioneer.com",
"bemidjipioneer.com",
"bendbulletin.com",
"bendsource.com",
"benewsjournal.com",
"beniciaheraldonline.com",
"benningtonbanner.com",
"bensonnews-sun.com",
"bentonconews.com",
"bentoncountyenterprise.com",
"bentoncourier.com",
"bentoneveningnews.com",
"bentonspiritnews.com",
"berkeley.edu",
"berkeleybeacon.com",
"berkeleydailyplanet.com",
"berkeleyobserver.com",
"berkshireeagle.com",
"berkshirerecord.net",
"berlincitizen.com",
"berlindailysun.com",
"bernewitness.com",
"berthoudrecorder.com",
"berthoudsurveyor.com",
"bestofneworleans.com",
"bet.com",
"bethanyclipper.com",
"bethelcitizen.com",
"bethesdamagazine.com",
"betnahrain.org",
"betterlifetv.tv",
"betterlifetv.tv",
"betweenclasses.org",
"beverlyhillsview.org",
"beverlypress.com",
"beverlyreview.net",
"bgdailynews.com",
"bgnews.com",
"bhcourier.com",
"bhgnews.com",
"bhgnews.com",
"bhgnews.com",
"bhgnews.com",
"bhgnews.com",
"bhgnews.com",
"bhgnews.com",
"bhpioneer.com",
"bhweekly.com",
"bigbeargrizzly.net",
"bigbeargrizzly.net",
"bigbendsentinel.com",
"bigcountryhomepage.com",
"bigcountryhomepage.com",
"bigforkeagle.com",
"bighorncountynews.com",
"bigislandmagazine.com",
"bigsandynews.com",
"bigskypress.com",
"bigspringherald.com",
"bigthink.com",
"bigtimberpioneer.net",
"billboard.com",
"billingsgazette.com",
"billypenn.com",
"biloxi-diberville-press.com",
"binghamtonhomepage.com",
"binghamtonhomepage.com",
"biography.com",
"birminghamtimes.com",
"bismarcktribune.com",
"bisnow.com",
"bitcoinmagazine.com",
"bitterrootstar.com",
"bizjournals.com",
"bizlex.com",
"biztimes.com",
"biztimes.com",
"bizwest.com",
"bjournal.com",
"blabbermouth.net",
"blabtv.com",
"blackforestnews-co.com",
"blackmountainnews.com",
"blackvoicenews.com",
"blackwelljournaltribune.net",
"bladeempire.com",
"bladenjournal.com",
"blissfieldadvance.com",
"blogs.biomedcentral.com",
"blogs.plos.org",
"blogspot.com",
"blogspot.com",
"blogspot.com",
"bloodyelbow.com",
"bloomberg.com",
"bloombergquint.com",
"bloomeradvance.com",
"bloomingprairieonline.com",
"bloomingprairieonline.com",
"bloomingprairieonline.com",
"blountcountian.com",
"blscourierherald.com",
"bluemountaineagle.com",
"blueridgecountry.com",
"blueridgecountry.com",
"blueridgenow.com",
"bluffcountrynews.com",
"bluffcountrynews.com",
"bluffcountrynews.com",
"bluffcountrynews.com",
"bluffcountrynews.com",
"blufftonconnection.com",
"blufftontoday.com",
"blythevillecourier.com",
"blythewoodonline.com",
"bmj.com",
"bna.com",
"bnd.com",
"bnd.com",
"bnd.com",
"bocabeacon.com",
"bocaratontribune.com",
"bocojo.com",
"boernestar.com",
"bogalusadailynews.com",
"bohemian.com",
"boingboing.net",
"boiseweekly.com",
"bolivarcommercial.com",
"bolivarmonews.com",
"bondbuyer.com",
"bonnercountydailybee.com",
"bonnersferryherald.com",
"boonevilledemocrat.com",
"boonvilledailynews.com",
"boonvilleherald.com",
"boothbayregister.com",
"borgernewsherald.com",
"bossierpress.com",
"boston-online.com",
"boston.cbslocal.com",
"boston.com",
"bostonglobe.com",
"bostonherald.com",
"bostonirish.com",
"bostonmagazine.com",
"boulder-monitor.com",
"bouldercityreview.com",
"boulderweekly.com",
"bowdoinorient.com",
"bowienewsonline.com",
"bowlinggreentimes.com",
"boyleheightsbeat.com",
"boynegazette.com",
"bozemandailychronicle.com",
"bpnews.net",
"bradenton.com",
"bradfordera.com",
"bradystandard.com",
"brainerddispatch.com",
"bransontrilakesnews.com",
"bransonwebzine.com",
"braseltonnewstoday.com",
"breakingenergy.com",
"breakingnews.ie",
"breckenridgeamerican.com",
"breezecourier.com",
"breezejmu.org",
"breitbart.com",
"brenhambanner.com",
"brewtonstandard.com",
"bridgemi.com",
"bridgton.com",
"brightonparklife.com",
"brightonpittsfordpost.com",
"brightsidenews.com",
"bristolobserver.com",
"british-weekly.com",
"broadsideonline.com",
"bronx.news12.com",
"brookings.edu",
"brookingsregister.com",
"brooklyndaily.com",
"brooklyneagle.com",
"brooklynreporter.com",
"broomfieldenterprise.com",
"browardpalmbeach.com",
"brown-spectator.com",
"browncountydm.com",
"browndailyherald.com",
"brownfieldonline.com",
"brownsvilleherald.com",
"brownwoodtx.com",
"brproud.com",
"brproud.com",
"brproud.com",
"brproud.com",
"brunswickbeacon.com",
"brushnewstribune.com",
"bryancountynews.net",
"bryantdaily.com",
"bryantimes.com",
"bsu.edu",
"btimesherald.com",
"buchtelite.com",
"buckeyelakebeacon.net",
"buckscountycouriertimes.com",
"buckscountyherald.com",
"bucksportenterprise.com",
"bucyrustelegraphforum.com",
"buffalo.edu",
"buffalobulletin.com",
"buffalohealthyliving.com",
"buffalonews.com",
"buffalonews.com",
"buffaloreflex.com",
"buffaloriverfun.com",
"buffaloriverreview.com",
"buffalostate.edu",
"buglenewspapers.com",
"buglenewspapers.com",
"bulgariasega.com",
"bullardnews.com",
"bulletin-news.com",
"bulletinnewspapers.com",
"bulletinnewspapers.com",
"bulletinnewspapers.com",
"bulletintimesnews.com",
"bullheadcity-bee.com",
"bupipedream.com",
"burkeconnection.com",
"burlington-record.com",
"burlingtoncountytimes.com",
"burlingtonfreepress.com",
"burnetbulletin.com",
"busconews.com",
"business-standard.com",
"business2community.com",
"businessexaminer.com",
"businessinsider.com",
"businessinsider.in",
"businessinsurance.com",
"businessjournaldaily.com",
"businessobserverfl.com",
"businesspulse.com",
"businessreport.com",
"busjournal.com",
"bustle.com",
"butlercountytimesgazette.com",
"butlercountytribune.com",
"butlereagle.com",
"butteamerica.com",
"buvoice.com",
"bvtack.com",
"byronreviewonline.com",
"byu.edu",
"byuh.edu",
"byuiscroll.org",
"c-bstatesman.com",
"c-span.org",
"ca.news.yahoo.com",
"cabinet.com",
"cabinet.com",
"cabinet.com",
"cabinet.com",
"caboolenterprise.com",
"cadillacnews.com",
"cadizrecord.com",
"calaverasenterprise.com",
"caldwelljournal.com",
"caledonianrecord.com",
"calgaryherald.com",
"calgarysun.com",
"calhounchronicle.com",
"calhouncountyjournal.com",
"calhounnewsherald.com",
"californiademocrat.com",
"californiahealthline.org",
"callandpost.com",
"caller.com",
"calmarcourier.com",
"calmatters.org",
"calu.edu",
"calvin.edu",
"camaspostrecord.com",
"cambridgechron.com",
"camdenarknews.com",
"camdencc.edu",
"cameronherald.com",
"cameronpilot.com",
"campbellexpress.com",
"campcountynow.com",
"campustimes.org",
"canadafreepress.com",
"canal63.com",
"canarsiecourier.com",
"canberratimes.com.au",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"candgnews.com",
"cannoncourier.com",
"cannonfalls.com",
"canoncitydailyrecord.com",
"cantondailyledger.com",
"cantonrep.com",
"canyon-news.com",
"canyoncourier.com",
"canyonnews.com",
"cape-coral-daily-breeze.com",
"capecodchronicle.com",
"capecodlife.com",
"capecodtimes.com",
"capecourier.com",
"capegazette.com",
"capemaycountyherald.com",
"capemaytimes.com",
"capenews.net",
"capenews.net",
"capenews.net",
"capenews.net",
"capenews.net",
"capitalcityweekly.com",
"capitalfm.co.ke",
"capitalgazette.com",
"capitalgazette.com",
"capitalpress.com",
"capitalregionscw.com",
"capitolhilltimes.com",
"capitolweekly.net",
"capitolwire.com",
"capjournal.com",
"capradio.org",
"caprockcourier.com",
"captivacurrent.com",
"caravannews.com",
"carbonbrief.org",
"carboncountynews.com",
"carlislemosquito.org",
"carmichaeltimes.com",
"carmitimes.com",
"carnegieendowment.org",
"carolinacoastonline.com",
"carolinacorner.com",
"carolinascw.com",
"carriagetownenews.com",
"carrizospringsjavelin.com",
"carrollconews.com",
"carrollcountycomet.com",
"carrollcountytimes.com",
"carrollcountytimes.com",
"carrollcountytimes.com",
"carrollcountytimes.com",
"carrollspaper.com",
"carscoops.com",
"carthagecourier.com",
"carthagepress.com",
"carycitizen.com",
"cascadebusnews.com",
"cascademontana.com",
"case.edu",
"caseynews.net",
"cashmerevalleyrecord.com",
"casperjournal.com",
"cassville-democrat.com",
"castlerocknewspress.net",
"caswellmessenger.com",
"catholicculture.org",
"catholicnews.com",
"catholicnewsagency.com",
"catholicphilly.com",
"catskillmountainnews.com",
"cavalierdaily.com",
"cbc.ca",
"cbcmagazine.com",
"cblnews.com",
"cbn.com",
"cbr.com",
"cbs12.com",
"cbs17.com",
"cbs19.tv",
"cbs2iowa.com",
"cbs42.com",
"cbs46.com",
"cbs4indy.com",
"cbs4local.com",
"cbs58.com",
"cbs5az.com",
"cbs6albany.com",
"cbs7.com",
"cbs8.com",
"cbsatlanta.com",
"cbsaustin.com",
"cbslima.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbslocal.com",
"cbsnews.com",
"cbssports.com",
"cbstv3.com",
"ccchronicle.net",
"ccenterdispatch.com",
"ccheadliner.com",
"ccheadliner.com",
"cctimesdemocrat.com",
"cdapress.com",
"cdispatch.com",
"cecildaily.com",
"cedarkeybeacon.com",
"cedarrepublican.com",
"cedarspringspost.com",
"celebritynetworth.com",
"cen.acs.org",
"cenlanow.com",
"centennialcitizen.net",
"centerpostdispatch.com",
"centexproud.com",
"centexproud.com",
"centralcitynews.net",
"centralctcommunications.com",
"centralctcommunications.com",
"centralctcommunications.com",
"centraldakotanews.com",
"centralfloridafuture.com",
"centralillinoiscw.com",
"centraljersey.com",
"centraljersey.com",
"centraljersey.com",
"centraljersey.com",
"centraljersey.com",
"centralkitsapreporter.com",
"centralkynews.com",
"centralkynews.com",
"centralkynews.com",
"centralkynews.com",
"centralmaine.com",
"centralmaine.com",
"centralrecorder.com",
"centralwinews.com",
"centralwinews.com",
"centralwinews.com",
"centre-view.com",
"centredaily.com",
"ceoworld.biz",
"cerescourier.com",
"cetconnect.org",
"cfpmidweek.com",
"cfr.org",
"cgsentinel.com",
"ch4549.org",
"ch4549.org",
"chaffeecountytimes.com",
"chagrinvalleytoday.com",
"challismessenger.com",
"chamberlainsun.com",
"championnewspapers.com",
"channel3000.com",
"channel4.com",
"channelnewsasia.com",
"chanute.com",
"charitonleader.com",
"charkoosta.com",
"charlescitypress.com",
"charlestonbusiness.com",
"charlestoncitypaper.com",
"charlestonexpress.com",
"charlestownbridge.com",
"charlotte-sun.com",
"charlotteobserver.com",
"charltoncountyherald.com",
"chathamnewsandrecord.com",
"chattanoogacw.com",
"chattanoogan.com",
"chattanoogapulse.com",
"cheatsheet.com",
"cheboygannews.com",
"cheektowagabee.com",
"chelsearecord.com",
"chemistryworld.com",
"cheneyfreepress.com",
"cherokeescout.com",
"chesapeake-angler.com",
"cheshireherald.com",
"chesterfieldobserver.com",
"chestertelegraph.org",
"chestertontribune.com",
"chetekalert.com",
"chevychaser.com",
"chicago.cbslocal.com",
"chicago.suntimes.com",
"chicagobusiness.com",
"chicagocrusader.com",
"chicagocrusader.com",
"chicagodefender.com",
"chicagogolfreport.com",
"chicagolawbulletin.com",
"chicagomaroon.com",
"chicagoparent.com",
"chicagoreader.com",
"chicagoreporter.com",
"chicagosuburbanfamily.com",
"chicagotribune.com",
"chickashanews.com",
"chicoer.com",
"chiefexecutive.net",
"chieflandcitizen.com",
"chieftain.com",
"chilkatvalleynews.com",
"chillicothegazette.com",
"chillicothenews.com",
"chillicothetimesbulletin.com",
"chinookobserver.com",
"chipleybugle.com",
"chipleypaper.com",
"chipleypaper.com",
"chippewa.com",
"chippewa.com",
"chisagocountypress.com",
"choctawplaindealer.com",
"choctawsun.org",
"choteauacantha.com",
"christianheadlines.com",
"christianitytoday.com",
"christianpost.com",
"christiantoday.com",
"chron.com",
"chron.com",
"chron.com",
"chron.com",
"chron.com",
"chron.com",
"chron.com",
"chron.com",
"chronicle-express.com",
"chronicle-independent.com",
"chronicle-tribune.com",
"chronicle-tribune.com",
"chronicle-tribune.com",
"chronicle-tribune.com",
"chronicle-tribune.com",
"chronicle.com",
"chroniclelive.co.uk",
"chronicleonline.com",
"chroniclet.com",
"chronicletimes.com",
"chronline.com",
"cibolabeacon.com",
"cicourierinc.com",
"cidrap.umn.edu",
"cincinnati.com",
"cincinnatimagazine.com",
"cincymagazine.com",
"ciproud.com",
"ciproud.com",
"circlevilleherald.com",
"cisternyard.com",
"citizen-times.com",
"citizennewspapers.com",
"citizensvoice.com",
"citizentribune.com",
"citrusheightsmessenger.com",
"city-journal.org",
"citybeat.com",
"citylimits.org",
"citymetric.com",
"citynews.ca",
"citypages.com",
"citypaper.com",
"citysuntimes.com",
"cityviewmag.com",
"cityweekly.net",
"civilbeat.org",
"civileats.com",
"cjonline.com",
"cjr.org",
"cknj.com",
"clairemonttimes.com",
"clantonadvertiser.com",
"clarecountyreview.com",
"claremont-courier.com",
"claremoreprogress.com",
"clarencebee.com",
"clarendonlive.com",
"clarindaherald.com",
"clarioncallnews.com",
"clarionherald.info",
"clarionledger.com",
"clarionledger.com",
"clarionledger.com",
"clarionledger.com",
"clarionnewsonline.com",
"clarionpaper.com",
"clarkcountygazette.com",
"clarkecountydemocrat.com",
"clarkecountytrib.com",
"clarkstonnews.com",
"clatl.com",
"claxtonenterprise.com",
"claycity-times.com",
"claytodayonline.com",
"claytoncountyregister.com",
"clclt.com",
"cleantechnica.com",
"clearcreekcourant.com",
"clearwatergazette.com",
"clearwaterprogress.com",
"clearwatertribune.com",
"cleburnetimesreview.com",
"clermontnewsleader.com",
"clermontsun.com",
"cleveland.com",
"cleveland.com",
"cleveland.cbslocal.com/",
"clevelandbanner.com",
"clevelandcountyherald.com",
"clevelandmagazine.com",
"clevescene.com",
"click2houston.com",
"clickondetroit.com",
"clickorlando.com",
"cliftonadvocate.com",
"cliftonrecord.com",
"climatechangenews.com",
"clintonchronicle.com",
"clintoncountyleader.com",
"clintondailyjournal.com",
"clintondailynews.com",
"clintonherald.com",
"clintonnc.com",
"clintonnews.net",
"clipperpubco.com",
"clipperpubco.com",
"clipperpubco.com",
"cljnews.com",
"clreporter.com",
"cm-life.com",
"cnbc.com",
"cnet.com",
"cnjonline.com",
"cnn.com",
"cnn.com",
"cnsnews.com",
"cnycentral.com",
"cnycentral.com",
"cnycentral.com",
"cnyhomepage.com",
"cnyhomepage.com",
"cnyhomepage.com",
"cnyvision.com",
"coalvalleynews.com",
"coastalcourier.com",
"coastaljournal.com",
"coastalpoint.com",
"coastalview.com",
"coastreportonline.com",
"cobbonline.com",
"codyenterprise.com",
"coffeycountyonline.com",
"coindesk.com",
"cointelegraph.com",
"colbsent.com",
"colfaxrecord.com",
"collegian.com",
"collegian.psu.edu",
"collegianonline.com",
"collegiatetimes.com",
"colorado.net",
"coloradoan.com",
"coloradoan.com",
"coloradocountycitizen.com",
"coloradodaily.com",
"coloradoguide.com",
"coloradohometownweekly.com",
"coloradomagazineonline.com",
"coloradoserenity.com",
"coloradoskiauthority.com",
"coloradostatesman.com",
"columbiabasinherald.com",
"columbiabusinesstimes.com",
"columbiachronicle.com",
"columbiacountyobserver.com",
"columbiadailyherald.com",
"columbiagreenemedia.com",
"columbiamissourian.com",
"columbian.com",
"columbianprogress.com",
"columbiaspectator.com",
"columbiatribune.com",
"columbinecourier.com",
"columbusalive.com",
"columbusmonthly.com",
"columbusparent.com",
"columbuspost.com",
"columbustelegram.com",
"columbustelegram.com",
"wsavcw.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comettv.com",
"comicbook.com",
"commdiginews.com",
"commentarymagazine.com",
"commercecitysentinel.com",
"commercejournal.com",
"commercenewstoday.com",
"commercial-news.com",
"commercialappeal.com",
"commercialrecord.com",
"commondreams.org",
"commonwealthmagazine.org",
"commonwealthtimes.org",
"communityadvocate.com",
"communityedtv.org",
"communityedtv.org",
"communityedtv.org",
"communitynewscorp.com",
"communitynewspapergroup.com",
"communitynewspapergroup.com",
"communitynewspapergroup.com",
"communitynewspapergroup.com",
"communitynewspapers.com",
"communitynewspapers.com",
"communityvoiceks.com",
"complianceweek.com",
"computerworld.com.au",
"conchovalleyhomepage.com",
"conchovalleyhomepage.com",
"concordmonitor.com",
"concrete-herald.com",
"conejoscountycitizen.com",
"connecticut.com",
"connecticutmag.com",
"connectoregonwi.com",
"connectsavannah.com",
"connectstatesboro.com",
"conntact.com",
"conquistadornews.com",
"conservativereview.com",
"consumerreports.org",
"conwaydailysun.com",
"cookcountynews-herald.com",
"coopercrier.com",
"copamonitor.com",
"copiahcountycourier.com",
"copperarea.com",
"coppercountrynews.com",
"cordeledispatch.com",
"cordellbeacon.com",
"core-media.org",
"cornellsun.com",
"coronadonewsca.com",
"corpct.com",
"corridormessenger.com",
"corsicanadailysun.com",
"cortlandstandard.net",
"corydondemocrat.com",
"corydontimes.com",
"coshoctontribune.com",
"cosmopolitan.com",
"cottonwoodchronicle.com",
"cottonwoodholladayjournal.com",
"countable.us",
"counton2.com",
"countrymessenger.com",
"countyenews.com",
"countytimes.com",
"courant.com",
"courant.com",
"courier-herald.com",
"courier-journal.com",
"courier-tribune.com",
"courieranywhere.com",
"courierherald.com",
"courierjournal.net",
"couriermail.com.au",
"couriernews.com",
"courierpapers.com",
"courierpapers.com",
"courierpapers.com",
"courierpostonline.com",
"courierpress.com",
"courierstandardenterprise.com",
"couriertribuneonline.com",
"courthousenews.com",
"coveleaderpress.com",
"covingtonleader.com",
"covnews.com",
"coyote-tv.com",
"cozine.com",
"cp24.com",
"cpapracticeadvisor.com",
"cpcnewspapers.com",
"cpcnewspapers.com",
"cpioneer.com",
"cpr.org",
"cptv.org",
"cptv.org",
"cptv.org",
"cptv.org",
"cq9tv.com",
"craigdailypress.com",
"crainscleveland.com",
"crainsdetroit.com",
"crainsnewyork.com",
"crawfordcountyavalanche.com",
"creators.com",
"creightonian.com",
"creightonnews.com",
"crescent-news.com",
"crescotimes.com",
"crestedbuttenews.com",
"crestonnews.com",
"crestviewbulletin.com",
"croftonjournal.com",
"cronicasnewspaper.com",
"crookstontimes.com",
"crosscut.com",
"crossroadschronicle.com",
"crossroadsnews.com",
"crossville-chronicle.com",
"crowleypostsignal.com",
"crowrivermedia.com",
"crowrivermedia.com",
"crozetgazette.com",
"crunchyroll.com",
"cruxnow.com",
"csbj.com",
"csbsjurecord.com",
"csctimes.com",
"csindy.com",
"csmonitor.com",
"csrecord.net",
"csun.edu",
"csuohio.edu",
"ct.com",
"ctmirror.org",
"ctnewsonline.com",
"ctnewsonline.com",
"ctnonline.com",
"ctnow.com",
"ctnow.com",
"ctpost.com",
"ctpost.com",
"ctvn.org",
"ctvn.org",
"ctvnews.ca",
"cuchimes.com",
"cuestonian.com",
"cullmansense.com",
"cullmantimes.com",
"culturadoor.com",
"culvercityobserver.com",
"cumberland-advocate.com",
"cumberlandcountynewspaper.com",
"cumberlink.com",
"cunews.info",
"curbed.com",
"currentargus.com",
"currentincarmel.com",
"currentinfishers.com",
"currentinwestfield.com",
"currentnoblesville.com",
"currentzionsville.com",
"currycountyreporter.com",
"currypilot.com",
"custercountychief.com",
"cutbankpioneerpress.com",
"cutbankpioneerpress.com",
"cutbankpioneerpress.com",
"cutbankpioneerpress.com",
"cvbugle.com",
"cvrnews.com",
"cvt-news.com",
"cw12.com",
"cw14online.com",
"cw15kxvo.com",
"cw18tv.com",
"cw23.com",
"cw23tv.com",
"cw27.com",
"cw30.com",
"cw33.com",
"cw34.com",
"cw47columbia.com",
"cw56.com",
"cw58.tv",
"cw7michigan.com",
"cwalbany.com",
"cwarkansas.com",
"cwaze.com",
"cwbaltimore.com",
"cwcentralpa.com",
"cwcincinnati.com",
"cwcolumbus.com",
"cwlasvegas.com",
"cwlouisville.com",
"cwmontgomery.com",
"cwokc.com",
"cwreno.com",
"cwrichmond.tv",
"cwrochester.com",
"cwtreasurevalley.com",
"cwuobserver.com",
"cychron.com",
"cyclingutah.com",
"cynthianademocrat.com",
"daily-chronicle.com",
"daily-jeff.com",
"daily-journal.com",
"daily-times.com",
"daily-tribune.com",
"daily.jstor.org",
"daily49er.com",
"dailyadvance.com",
"dailyadvocate.com",
"dailyamerican.com",
"dailyastorian.com",
"dailyastorian.com",
"dailyastorian.com",
"dailybarometer.com",
"dailybreeze.com",
"dailybruin.com",
"dailybulletin.com",
"dailycal.org",
"dailycall.com",
"dailycaller.com",
"dailycamera.com",
"dailycampus.com",
"dailychiefunion.com",
"dailycollegian.com",
"dailycomet.com",
"dailycommercial.com",
"dailycorinthian.com",
"dailycourier.com",
"dailydem.com",
"dailydemocrat.com",
"dailydot.com",
"dailyegyptian.com",
"dailyemerald.com",
"dailyfreeman.com",
"dailyfreepress.com",
"dailygalaxy.com",
"dailygamecock.com",
"dailygate.com",
"dailygazette.com",
"dailyhelmsman.com",
"dailyherald.com",
"dailyillini.com",
"dailyindependent.com",
"dailyinterlake.com",
"dailyiowan.com",
"dailyiowegian.com",
"dailyitem.com",
"dailyjournal.com",
"dailyjournal.net",
"dailyjournalonline.com",
"dailyjournalonline.com",
"dailyjournalonline.com",
"dailyleader.com",
"dailyleaderextra.com",
"dailylobo.com",
"dailylocal.com",
"dailymail.co.uk",
"dailymaverick.co.za",
"dailynebraskan.com",
"dailynews.com",
"dailynexus.com",
"dailynorthwestern.com",
"dailyorange.com",
"dailypostathenian.com",
"dailypress.com",
"dailypress.net",
"dailyprincetonian.com",
"dailyprogress.com",
"dailyprogress.com",
"dailyprogress.com",
"dailyprogress.com",
"dailyprogress.com",
"dailyranger.com",
"dailyrecord.co.uk",
"dailyrecord.com",
"dailyrecord.us",
"dailyrecordnews.com",
"dailyregister.com",
"dailyreportonline.com",
"dailyrepublic.com",
"dailyrepublicannews.com",
"dailysentinel.com",
"dailysignal.com",
"dailystandard.com",
"dailystar.co.uk",
"dailystarjournal.com",
"dailysunnews.com",
"dailytargum.com",
"dailytarheel.com",
"dailytexanonline.com",
"dailytidings.com",
"dailytimes.com",
"dailytimesleader.com",
"dailytitan.com",
"dailytoreador.com",
"dailytrib.com",
"dailytribune.com",
"dailytribune.net",
"dailytrojan.com",
"dailyunion.com",
"dailyutahchronicle.com",
"dailywire.com",
"dailyworld.com",
"dailyyonder.com",
"dallasnews.com",
"dallasnews.com",
"dallasobserver.com",
"daltondailycitizen.com",
"danapointtimes.com",
"danbury-ia.com",
"dansvilleonline.com",
"dariennewsonline.com",
"darientimes.com",
"darnews.com",
"dartreview.com",
"dasselcokato.com",
"davidsonian.com",
"davisclipper.com",
"davisenterprise.com",
"dawn.com",
"dawsonnews.com",
"dawsonspringsprogress.com",
"daystar.com",
"daystar.com",
"daystar.com",
"daytonatimes.com",
"daytondailynews.com",
"daytonscw.com",
"dbrnews.com",
"dc.eater.com",
"dc50tv.com",
"dchieftain.com",
"dcourier.com",
"dcourier.com",
"dcpostgazette.com",
"dcpostgazette.com",
"dcspotlight.com",
"dcw50.com",
"dddnews.com",
"ddtonline.com",
"deadline.com",
"deadspin.com",
"deadwoodmagazine.com",
"decanter.com",
"decaturdaily.com",
"decaturdailydemocrat.com",
"decaturtribune.com",
"decorahnewspapers.com",
"defensenews.com",
"defenseone.com",
"delawareonline.com",
"delawarestatenews.net",
"delawaretoday.com",
"delcotimes.com",
"deleonfreepress.com",
"delgazette.com",
"delish.com",
"delmartimes.net",
"delmartimes.net",
"delmartimes.net",
"delmarvanow.com",
"delmarvanow.com",
"delmarvanow.com",
"delmarvanow.com",
"delnorteprospector.com",
"delphosherald.com",
"delraynewspaper.com",
"delraynewspaper.com",
"delrionewsherald.com",
"deltabroadcasting.org",
"deltacountyindependent.com",
"deltadiscovery.com",
"deltanewscitizen.com",
"deltanewsweb.com",
"deltawindonline.com",
"delvalrampages.com",
"demingheadlight.com",
"demo-mo.com",
"democracynow.org",
"democratandchronicle.com",
"democratandchronicle.com",
"democratargus.com",
"democratherald.com",
"democratnewspapers.com",
"democratnewspapers.com",
"democrattribune.com",
"demopolistimes.com",
"dennews.com",
"dentonorator.com",
"dentonrc.com",
"denver.cbslocal.com",
"denverbroncos.com",
"denveriaforum.com",
"denverpost.com",
"denverurbanspectrum.com",
"denvervoice.org",
"depauliaonline.com",
"dequeenbee.com",
"dequincynews.com",
"derbyinformer.com",
"derrynews.com",
"deseretnews.com",
"desertdispatch.com",
"desertnews.com",
"desertstarweekly.com",
"desertsun.com",
"desertsun.com",
"desertsun.com",
"desmoinesregister.com",
"desmoinesregister.com",
"desmoinesregister.com",
"desmoinesregister.com",
"desotoexplorer.com",
"desototimes.com",
"desplainesvalleynews.com",
"destructoid.com",
"detroitlions.com",
"detroitnews.com",
"devilslakejournal.com",
"dewitt-ee.com",
"dewittcountytoday.com",
"dewittobserver.com",
"dexerto.com",
"dglobe.com",
"dhakatribune.com",
"diaadianews.com",
"diamondbackonline.com",
"diariopalmbeach.com",
"dibollfreepress.com",
"dickinsoncountynews.com",
"digbatonrouge.com",
"digital.vpr.net",
"digitalburg.com",
"digitalinformationworld.com",
"digitaljournal.com",
"digitalspy.com",
"dillonheraldonline.com",
"dillontribune.com",
"dioceseoffresno.org",
"dioceseoffresno.org",
"disabilityscoop.com",
"discoveringhawaii.com",
"discovermagazine.com",
"discoverohio.com",
"dispatch.com",
"dispatchnews.com",
"diverseeducation.com",
"dixonpilot.com",
"djc.com",
"djournal.com",
"djournal.com",
"djournal.com",
"djournal.com",
"djournal.com",
"djournal.com",
"djournal.com",
"dl-online.com",
"dln.com",
"dmagazine.com",
"dnaindia.com",
"dnews.com",
"dnews.com",
"dnj.com",
"dnronline.com",
"doaneline.com",
"dodgecountynews.com",
"dodgeglobe.com",
"donaldsonvillechief.com",
"donalsonvillenews.com",
"doniphanherald.com",
"dosmundos.com",
"dothaneagle.com",
"dothaneagle.com",
"dothaneagle.com",
"dothaneagle.com",
"dothanfirst.com",
"dotnews.com",
"douglas-budget.com",
"douglascountyherald.com",
"douglascountynewspress.net",
"douglascountysentinel.com",
"douglasdispatch.com",
"douglasenterprise.net",
"dovebroadcasting.com",
"dovecreekpress.com",
"doverpost.com",
"downeast.com",
"downriversundaytimes.com",
"downtownexpress.com",
"dptribune.com",
"draperjournal.com",
"draugas.org",
"dreamhosters.com",
"dresdenenterprise.com",
"drewacorn.com",
"drurymirror.org",
"dtnpf.com",
"dublincitizen.com",
"duboiscountyherald.com",
"duclarion.com",
"dukechronicle.com",
"duluthbudgeteer.com",
"duluthnewstribune.com",
"duluthshippingnews.com",
"duncanbanner.com",
"dundalkeagle.com",
"dundeeonline.com",
"duquoin.com",
"durangoherald.com",
"durangotelegraph.com",
"durantdemocrat.com",
"durhamskywriter.com",
"dutchnews.nl",
"duxburyclipper.com",
"dvalnews.com",
"dyersvillecommercial.com",
"dysartreporter.com",
"dziennik.com",
"dziennikzwiazkowy.com",
"e360.yale.edu",
"eacourier.com",
"eaglelakeheadlight.com",
"eaglenewsonline.com",
"eaglenewsonline.com",
"eaglenewsonline.com",
"eaglenewsonline.com",
"eagleobserver.com",
"eagletimes.com",
"eagletribune.com",
"earlycountynews.com",
"eastaurorabee.com",
"eastbayexpress.com",
"eastbayri.com",
"eastbayri.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastbaytimes.com",
"eastcountygazette.com",
"eastcountymagazine.org",
"eastcountytimesonline.com",
"easterncoloradoplainsman.com",
"easternecho.com",
"easterneronline.com",
"easterngazette.com",
"easternprogress.com",
"easternshorepost.com",
"easthamptonstar.com",
"eastidahonews.com",
"eastietimes.com",
"eastoncourier.com",
"eastoregonian.com",
"eastpeoriatimescourier.com",
"eastsidereviewnews.com",
"easttennessean.com",
"easttennesseescw.com",
"easttexasmatters.com",
"easttexasmatters.com",
"easttexasmatters.com",
"eastvalleytribune.com",
"easyreadernews.com",
"eater.com",
"ebar.com",
"eccalifornian.com",
"echo-pilot.com",
"echopress.com",
"ecmpostreview.com",
"ecmpublishers.com",
"eco-business.com",
"ecollegetimes.com",
"ecommercebytes.com",
"economictimes.indiatimes.com",
"economist.com",
"ecori.org",
"ecowatch.com",
"ecprogress.com",
"edgefieldadvertiser.com",
"edgertonenterprise.com",
"edmondsun.com",
"edmontonjournal.com",
"edsurge.com",
"eenews.net",
"effinghamdailynews.com",
"effinghamherald.net",
"efortsmith.com",
"egcitizen.com",
"egpnews.com",
"ehextra.com",
"ehgazette.com",
"ehstoday.com",
"einnews.com",
"el-observador.com",
"el.com",
"elba-clipper.com",
"elbertcountynews.net",
"elberton.com",
"elcolombiano.net",
"elcruceronews.com",
"eldianewschicago.com",
"eldoradonews.com",
"eldoradospringsmo.com",
"electronicintifada.net",
"elgincourier.com",
"elginreview.com",
"elheraldonews.com",
"elhispanonews.com",
"elhispanonewspaper.com",
"elizabethton.com",
"elkharttruth.com",
"elkintribune.com",
"elkodaily.com",
"elkvalleytimes.com",
"ellatinoarkansas.com",
"ellatinoonline.com",
"elle.com",
"ellenvillejournal.com",
"ellicottvilletimes.com",
"elliscountypress.com",
"ellsworthamerican.com",
"ellwoodcityledger.com",
"elmundo.net",
"elmundoboston.com",
"elnuevogeorgia.com",
"elnuevoherald.com",
"elonpendulum.com",
"elpais.com",
"elpasoproud.com",
"elpasotimes.com",
"elplaneta.com",
"elpopularnews.com",
"elrenotribune.com",
"elreporterosf.com",
"elsberrydemocrat.com",
"elsoldesalinas.com",
"elsolnews.com",
"eltecolote.org",
"eltiempohispano.com",
"elvaq.com",
"elwoodpublishing.com",
"elwoodpublishing.com",
"elwoodpublishing.com",
"elyecho.com",
"elynews.com",
"emanuelcountylive.com",
"emissourian.com",
"emmetsburgnews.com",
"emmitsburg.com",
"emorywheel.com",
"emporiagazette.com",
"en.wiktionary.org",
"enca.com",
"endeavornews.com",
"enewscourier.com",
"englewoodherald.net",
"englewoodindependent.com",
"enidnews.com",
"ennisdailynews.com",
"enquirerdemocrat.com",
"enquirerjournal.com",
"enterprise-journal.com",
"enterprise-tocsin.com",
"enterprisecourier.com",
"enterprisenews.com",
"enterprisepub.com",
"enterprisepub.com",
"enterprisepub.com",
"enterprisepub.com",
"enterprisepub.com",
"entrepreneur.com",
"environmentalleader.com",
"eonline.com",
"epostpaper.com",
"eptrail.com",
"erienewsnow.com",
"erstarnews.com",
"erwinrecord.net",
"escalontimes.com",
"espn.com",
"esquire.com",
"essence.com",
"essexnewsdaily.com",
"esterrepublic.com",
"esthervilledailynews.com",
"esubulletin.com",
"etonline.com",
"eugeneweekly.com",
"eunicetoday.com",
"euobserver.com",
"euractiv.com",
"eurasianet.org",
"eurekaherald.com",
"eurekalert.org",
"eurekasentinel.com",
"eurekaspringsindependent.com",
"eurekatelevision.tv",
"eurekatelevision.tv",
"eurogamer.net",
"euronews.com",
"evangelinetoday.com",
"evangelinetoday.com",
"evanstonroundtable.com",
"eveningsun.com",
"eveningtribune.com",
"everettindependent.com",
"evergreentimes.com",
"everythinglubbock.com",
"everythinglubbock.com",
"evesun.com",
"ew.com",
"examiner-enterprise.com",
"examiner.net",
"examiner.org",
"examinerpublications.com",
"experiencekc.com",
"explorebigsky.com",
"exploreclarion.com",
"exploregeorgia.org",
"express.co.uk",
"extranews.net",
"extremetech.com",
"factcheck.org",
"fairborndailyherald.com",
"fairburyjournalnews.com",
"fairfaxconnection.com",
"fairfaxtimes.com",
"fairfield-sun.com",
"fairfieldbaynews.com",
"fairfieldcitizenonline.com",
"fairfieldmirror.com",
"fairfieldsuntimes.com",
"fairmontsentinel.com",
"fairobserver.com",
"faithwire.com",
"falloncountyextra.com",
"falmouthoutlook.com",
"family49.com",
"familyvisiontv.com",
"fanninfocusnewspaper.com",
"fanninsentinel.com",
"fansided.com",
"faribaultcountyregister.com",
"farmandranchguide.com",
"farmerpublishing.com",
"farmers-exchange.net",
"farmersvilletimes.com",
"farmingtonindependent.com",
"farmlandnews.com",
"farmvilleherald.com",
"fastcompany.com",
"fauquier.com",
"fayettecountyrecord.com",
"fayettenewspapers.com",
"fayobserver.com",
"fb.org",
"fbherald.com",
"fbnewsleader.com",
"fcjournal.net",
"fcnp.com",
"fdlreporter.com",
"federalwaymirror.com",
"feedstuffs.com",
"ferdinandnews.com",
"ferdinandnews.com",
"fergusfallsjournal.com",
"ferndaleenterprise.us",
"ferrum.edu",
"fgazette.com",
"fhsu.edu",
"fhtimes.com",
"fifa.com",
"filamvoicemaui.com",
"fillmorecountyjournal.com",
"fillmoregazette.com",
"filmschoolrejects.com",
"finance-commerce.com",
"finance.yahoo.com",
"financialexpress.com",
"fireisland-news.com",
"firesideguard.com",
"firstcoastnews.com",
"firstcoastnews.com",
"firstpost.com",
"firstthings.com",
"fishandgame.com",
"fishandgame.com",
"fishandgame.com",
"fit.edu",
"fivethirtyeight.com",
"flagpole.com",
"flathatnews.com",
"flatheadbeacon.com",
"flcourier.com",
"flippinonline.com",
"flkeysnews.com",
"flkeysnews.com",
"florala.net",
"florence-forestnews.com",
"florida.com",
"floridahomesandlifestyles.com",
"floridamagazine.com",
"floridapolitics.com",
"floridasportsman.com",
"floridatoday.com",
"floridatravellife.com",
"floridaweekly.com",
"floridaweekly.com",
"flovalleynews.com",
"floydcountytimes.com",
"fltimes.com",
"fluent-magazine.com",
"fluvannareview.com",
"flyergroup.com",
"flyernews.com",
"focusnewspaper.com",
"foghornnews.com",
"folioweekly.com",
"folsomtelegraph.com",
"folsomtelegraph.com",
"fontanaheraldnews.com",
"foodandwaterwatch.org",
"foodnavigator-usa.com",
"fool.com",
"foothillstrader.com",
"forbes.com",
"foreignpolicy.com",
"foresthillstimes.com",
"forestlaketimes.com",
"forestparkreview.com",
"forksforum.com",
"forsythnews.com",
"fortmeadeleader.com",
"fortmorgantimes.com",
"fortmyersbeach.news",
"fortmyersbeachtalk.com",
"fortstocktonpioneer.com",
"fortune.com",
"fortwaynereader.com",
"fortworthbusiness.com",
"forumfortnightly.com",
"forwardtimesonline.com",
"fosters.com",
"fosters.com",
"fourstateshomepage.com",
"fourstateshomepage.com",
"fourthestatenewspaper.com",
"fowlertribune.com",
"fox10phoenix.com",
"fox10phoenix.com",
"fox10tv.com",
"fox11az.com",
"fox11online.com",
"fox13news.com",
"fox13now.com",
"fox14.tv",
"fox14tv.com",
"fox16.com",
"fox17.com",
"fox17online.com",
"fox18wccb.com",
"fox19.com",
"fox2127.com",
"fox2127.com",
"fox21news.com",
"fox21news.com",
"fox23.com",
"fox23.com",
"fox23albany.com",
"fox23news.com",
"fox24.com",
"fox25fox48.com",
"fox25fox48.com",
"fox26houston.com",
"fox26houston.com",
"fox26medford.com",
"fox28.com",
"fox2840.com",
"fox28iowa.com",
"fox29.com",
"fox2detroit.com",
"fox2now.com",
"fox30jax.com",
"fox32chicago.com",
"fox32chicago.com",
"fox33.com",
"fox35.com",
"fox35orlando.com",
"fox38corpuschristi.com",
"fox39.com",
"fox40.com",
"fox40now.com",
"fox40now.com",
"fox41.com",
"fox43.com",
"fox43.com",
"fox43topeka.com",
"fox44.net",
"fox45.com",
"fox45now.com",
"fox46charlotte.com",
"fox47.com",
"fox47kxlt.com",
"fox47news.com",
"fox49.com",
"fox4beaumont.com",
"fox4florida.com",
"fox4kc.com",
"fox4news.com",
"fox4news.com",
"fox50.com",
"fox51.com",
"fox54.com",
"fox56.com",
"fox56.com",
"fox56.com",
"fox59.com",
"fox5atlanta.com",
"fox5dc.com",
"fox5dc.com",
"fox5ny.com",
"fox5sandiego.com",
"fox5vegas.com",
"fox61.com",
"fox66.tv",
"fox6now.com",
"fox7austin.com",
"fox8.com",
"fox8fox14.com",
"fox8fox14.com",
"fox8live.com",
"fox8tv.com",
"fox9.com",
"fox9.com",
"fox9now.com",
"foxbaltimore.com",
"foxbororeporter.com",
"foxbusiness.com",
"foxcarolina.com",
"foxcharleston.com",
"foxchattanooga.com",
"foxct.com",
"foxillinois.com",
"foxillinois.com",
"foxkansas.com",
"foxkansas.com",
"foxkansas.com",
"foxkansas.com",
"foxkansas.com",
"foxkrbk.com",
"foxla.com",
"foxla.com",
"foxlexington.com",
"foxlima.com",
"foxnebraska.com",
"foxnews.com",
"foxprovidence.com",
"foxreno.com",
"foxrichmond.com",
"foxrochester.com",
"foxsanantonio.com",
"foxsavannah.com",
"foxsports.com",
"foxtoledo.com",
"foxtricities.com",
"france24.com",
"frankenmuthnews.com",
"frankfortstation.com",
"franklincountycitizen.com",
"franklincountytimes.com",
"franklinfavorite.com",
"frankstoncitizen.com",
"franoi.com",
"frazeeforum.com",
"fredericknewspost.com",
"fredericksburg.com",
"fredericksburgstandard.com",
"free-times.com",
"freebeacon.com",
"freeburgtribune.com",
"freedom43tv.com",
"freemanjournal.net",
"freemansd.com",
"freep.com",
"freepresshouston.com",
"freepressnewspapers.com",
"freepressnewspapers.com",
"freepressnewspapers.com",
"freepressonline.com",
"freepressstandard.com",
"freestonecountytimesonline.com",
"freeweekly.com",
"fremonttribune.com",
"fremonttribune.com",
"fresnobee.com",
"fresnobee.com",
"frionaonline.com",
"frontdoorsnews.com",
"fronterasdesk.org",
"frontiersman.com",
"frostillustrated.com",
"fsgnews.com",
"fstribune.com",
"fsunews.com",
"fsutorch.com",
"ft.com",
"ftleavenworthlamp.com",
"ftluptonpress.com",
"fuldafreepress.net",
"fullcoll.edu",
"fullertonobserver.com",
"fultoncountynews.com",
"fultonsun.com",
"futurism.com",
"fvshopper.com",
"fwbusiness.com",
"fwweekly.com",
"gadcotimes.com",
"gadgets.ndtv.com",
"gadsdenmessenger.com",
"gadsdentimes.com",
"gaffneyledger.com",
"gainesville.com",
"gainesvilleregister.com",
"gainesvilletimes.com",
"gainformer.com",
"galaxgazette.com",
"galenagazette.com",
"galesburg.com",
"galioninquirer.com",
"gallatinnews.com",
"gallatinnorthmissourian.com",
"gallup.com",
"gallupindependent.com",
"galtheraldonline.com",
"galvanews.com",
"galvnews.com",
"gamesindustry.biz",
"gamespot.com",
"gantdaily.com",
"gao.gov",
"gardenandgun.com",
"gardenavalleynews.org",
"gardencountynews.com",
"garrardcentralrecord.com",
"gasconadecountyrepublican.com",
"gastongazette.com",
"gateschilipost.com",
"gatesvillemessenger.com",
"gatewaynews.org",
"gatewaytosedona.com",
"gazebogazette.com",
"gazette-tribune.com",
"gazette.com",
"gazettechicago.com",
"gazettenet.com",
"gazetterecord.com",
"gazettes.com",
"gazettetimes.com",
"gazettevandetroit.com",
"gazettextra.com",
"gbpnews.com",
"gbpnews.com",
"gbpnews.com",
"gbpnews.com",
"gbtribune.com",
"gcdailyworld.com",
"gcherald.com",
"gcnews.com",
"gcnewsgazette.com",
"gcrnews.com",
"gcsunade.com",
"gctelegram.com",
"gctimesonline.com",
"gearpatrol.com",
"geekwire.com",
"geeky-gadgets.com",
"geneseorepublic.com",
"geneticliteracyproject.org",
"georgetownvoice.com",
"georgiamagazine.com",
"georgiastatesignal.com",
"geringcitizen.com",
"getreligion.org",
"gettysburgtimes.com",
"gfucrescent.com",
"gilbertsunnews.com",
"gillettenewsrecord.com",
"gilmermirror.com",
"gilroydispatch.com",
"gizmodo.co.uk",
"gizmodo.com",
"gjsentinel.com",
"gladwinmi.com",
"glamour.com",
"glasgowcourier.com",
"glasgowdailytimes.com",
"glcitizen.com",
"glcitizen.com",
"glencoenews.com",
"glendaleregister.com",
"glendalestar.com",
"glennvillesentinel.net",
"glenrockind.com",
"glensfallschronicle.com",
"glenviewlantern.com",
"globalnews.ca",
"globaltimes.cn",
"globegazette.com",
"globegazette.com",
"globegazette.com",
"globegazette.com",
"gloucestertimes.com",
"gmdmedia.net",
"gmdmedia.net",
"gmdmedia.net",
"gmdmedia.net",
"gmnews.com",
"gmnews.com",
"gmnews.com",
"gmnews.com",
"gmnews.com",
"gmnews.com",
"gmnews.com",
"gmnews.com",
"gmtoday.com",
"goal.com",
"gocwtv.com",
"godanriver.com",
"godslearningchannel.com",
"goerie.com",
"gogolfarizona.com",
"gohighlanders.com",
"golaurens.com",
"goldendalesentinel.com",
"goldenstatenewspapers.com",
"goldenstatenewspapers.com",
"goldenstatenewspapers.com",
"goldentranscript.net",
"goldrivermessenger.com",
"goldthwaiteeagle.com",
"goleader.com",
"golfchicago.com",
"golfhouston.com",
"golfohio.com",
"golocalprov.com",
"gonzalesinquirer.com",
"gonzalestribune.com",
"good4utah.com",
"good4utah.com",
"goodtimes.sc",
"google.com",
"gopusa.com",
"gorevillegazette.com",
"gorhamtimes.com",
"gosanangelo.com",
"goshen.edu",
"goshennews.com",
"goskagit.com",
"gothamgazette.com",
"gothamist.com",
"gothenburgtimes.com",
"gotowncrier.com",
"goupstate.com",
"gouverneurtribunepress.com",
"gov.uk",
"governing.com",
"govexec.com",
"govtech.com",
"gowilkes.com",
"gpb.org",
"gpb.org",
"gpb.org",
"gpb.org",
"gpb.org",
"gpb.org",
"gpkmedia.com",
"grafwv.com",
"grahamleader.com",
"grahamstar.com",
"grandcanyonnews.com",
"grandcanyontourguide.com",
"grandforksherald.com",
"grandhaventribune.com",
"grandlakenews.com",
"grandrapidsmn.com",
"granitefallsnews.com",
"grantcountypress.com",
"grantherald.com",
"grantky.com",
"granvilleonline.com",
"grapevine.is",
"graysonrecord.com",
"graziadaily.co.uk",
"grbj.com",
"greatfallsconnection.com",
"greatfallstribune.com",
"greatneckrecord.com",
"greecepost.com",
"greeleytribune.com",
"greenbaypressgazette.com",
"greenbaypressgazette.com",
"greenbeltnewsreview.com",
"greenbiz.com",
"greenecountycommonwealth.com",
"greenecountyheraldonline.com",
"greeneprairiepress.com",
"greenepublishing.com",
"greenevillesun.com",
"greenfieldnews.com",
"greenfieldreporter.com",
"greenfieldvedette.com",
"greenfiretimes.com",
"greenpointstar.com",
"greensboro.com",
"greensboro.com",
"greensburgdailynews.com",
"greenvilleadvocate.com",
"greenvilleadvocate.com",
"greenvilleonline.com",
"greenvilleonline.com",
"greenwich-post.com",
"greenwichmag.com",
"greenwichtime.com",
"greenwooddemocrat.com",
"greercitizen.com",
"grenadastar.com",
"gridleyherald.com",
"griffindailynews.com",
"grist.org",
"grmag.com",
"groesbeckjournal.com",
"grossepointenews.com",
"grtimes.com",
"grundycountyherald.com",
"gsabusiness.com",
"gtrnews.com",
"gtweekly.com",
"guampdn.com",
"guardian.ng",
"guardianlv.com",
"guardonline.com",
"guernseygazette.com",
"gueydantoday.com",
"guilfordgazette.com",
"guilfordian.com",
"gulf-times.com",
"gulfbreezenews.com",
"gulfcoastnews.com",
"gulfcoastnewstoday.com",
"gulfcoastnewstoday.com",
"gulfcoastnewstoday.com",
"gulffishing.com",
"gulflive.com",
"gulfnews.com",
"gulfofmaine.org",
"gunnisontimes.com",
"guns.com",
"gustavus.edu",
"guttenbergpress.com",
"guymondailyherald.com",
"gvnews.com",
"gwcommonwealth.com",
"gwhatchet.com",
"gwinnettcitizen.com",
"gwinnettdailypost.com",
"gyphillpremiere.com",
"haaretz.com",
"haddonfieldsun.com",
"hakaimagazine.com",
"hamburgreporter.com",
"hamiltoncountyexpress.com",
"hamlethub.com",
"hamlethub.com",
"hamlethub.com",
"hamlethub.com",
"hamlethub.com",
"hamlethub.com",
"hamlethub.com",
"hamlethub.com",
"hamlethub.com",
"hamlineoracle.com",
"hammondstar.com",
"hammontongazette.com",
"hampshirereview.com",
"hamptonchronicle.com",
"hamptonroadsmessenger.com",
"hancockclarion.com",
"hanfordsentinel.com",
"hanfordsentinel.com",
"hanfordsentinel.com",
"hanmo.com",
"hannapub.com",
"hannapub.com",
"hannapub.com",
"hannibal.net",
"happyherald.com",
"harborcountry-news.com",
"harborlightnews.com",
"harlandaily.com",
"harlanonline.com",
"harrisburgmagazine.com",
"harrisondaily.com",
"harrisonnewsherald.com",
"harrodsburgherald.com",
"hartfordbusiness.com",
"hartfordcitynewstimes.com",
"hartfordinformer.com",
"hartington.net",
"hartselleenquirer.com",
"harvard.edu",
"harvardindependent.com",
"hastingsbanner.com",
"hastingsreminder.com",
"hastingsstargazette.com",
"hastingstribune.com",
"hattiesburgamerican.com",
"havasunews.com",
"havenews.com",
"havredailynews.com",
"hawaii-golf.com",
"hawaiinewsnow.com",
"hawaiireporter.com",
"hawaiiskindiver.com",
"hawaiistar.com",
"hawaiitribune-herald.com",
"hawleyherald.net",
"hawleyherald.net",
"haysfreepress.com",
"hazard-herald.com",
"hbnews.us",
"hbr.org",
"hccourier.com",
"hceronline.org",
"hcindependent.com",
"hclocal.com",
"hcn.org",
"hcnews.com",
"hcpress.com",
"hdnews.net",
"headlightherald.com",
"headlightnews.com",
"healthcitysun.com",
"heavy.com",
"hebronjournalregister.com",
"heightsobserver.org",
"helena-arkansas.com",
"helenair.com",
"hellogiggles.com",
"hendersondailynews.com",
"hendersondispatch.com",
"henriettapost.com",
"henryherald.com",
"herald-citizen.com",
"herald-dispatch.com",
"herald-journal.com",
"herald-leader.net",
"herald-progress.com",
"herald-publishing.com",
"herald-review.com",
"herald-zeitung.com",
"heraldadvocate.com",
"heraldandnews.com",
"heraldandtribune.com",
"heraldargus.com",
"heraldbanner.com",
"heraldbulletin.com",
"heraldbulletin.com",
"heraldchronicle.com",
"heraldcourier.com",
"heraldcourier.com",
"heralddemocrat.com",
"heraldextra.com",
"heraldguide.com",
"heraldledger.com",
"heraldmailmedia.com",
"heraldnet.com",
"heraldnews.com",
"heraldnewstn.com",
"heraldonline.com",
"heraldonline.com",
"heraldonline.com",
"heraldpalladium.com",
"heraldpub.com",
"heraldpublications.com",
"heraldpublications.com",
"heraldpublications.com",
"heraldpublications.com",
"heraldpublications.com",
"heraldpublications.com",
"heraldpublishingcompany.com",
"heraldpublishingcompany.com",
"heraldpublishingcompany.com",
"heraldpublishingcompany.com",
"heraldpubs.com",
"heraldstandard.com",
"heraldstandard.com",
"heraldstaronline.com",
"heraldsun.com",
"heraldsun.com.au",
"heraldtimesonline.com",
"heraldtribune.com",
"heritage.org",
"hermannadvertisercourier.com",
"hermistonherald.com",
"herndonconnection.com",
"herscherpilot.com",
"hesperianbeacononline.com",
"hesperiastar.com",
"hesstonrecord.com",
"hfherald.com",
"hgazette.com",
"hhcourier.com",
"hhjonline.com",
"hiawathaworldonline.com",
"hibbingmn.com",
"hickoryrecord.com",
"hicksvillenewstribune.com",
"hidesertstar.com",
"highlandernews.com",
"highlandnews.net",
"highlandscurrent.com",
"highlandsnews.com",
"highlandsranchherald.net",
"highplainsobserver.com",
"hightimbertimes.com",
"hillcountryherald.net",
"hillcountrynews.com",
"hillcountrypassport.com",
"hillcountrypassport.com",
"hillcountrypassport.com",
"hillsborofreepress.com",
"hillsdale.net",
"hillsdalecollegian.com",
"hinckleynews.com",
"hindustantimes.com",
"hippopress.com",
"hispanosnews.com",
"hjnews.com",
"hmbreview.com",
"hngnews.com",
"hobbsnews.com",
"hockessincommunitynews.com",
"hodinkee.com",
"hofstrachronicle.com",
"hoinews.com",
"hola-arkansas.com",
"holaciudad.com",
"holaciudad.com",
"hollandsentinel.com",
"hollywoodreporter.com",
"holmescountyherald.com",
"holtindependent.com",
"holtonrecorder.net",
"holtvilletribune.com",
"holyokeenterprise.com",
"homenewshere.com",
"homenewshere.com",
"homenewshere.com",
"homenewshere.com",
"homerhorizon.com",
"homerindex.com",
"homernews.com",
"homertribune.com",
"hometownargus.com",
"hometowndebate.com",
"hometownfocus.us",
"hometownjournal.biz",
"hometownjournal.org",
"hometownlife.com",
"hometownlife.com",
"hometownlife.com",
"hometownlife.com",
"hometownlife.com",
"hondoanvilherald.com",
"hongkongfp.com",
"hoodrivernews.com",
"hookem.com",
"hopestar.com",
"hopewellnews.com",
"hotair.com",
"hotnewhiphop.com",
"hotsr.com",
"houghtonlakeresorter.com",
"houmatoday.com",
"housingwire.com",
"houstonherald.com",
"houstonianonline.com",
"houstonpbs.org",
"houstonpress.com",
"howeenterprise.com",
"hoylosangeles.com",
"hpenews.com",
"hpenews.com",
"hpherald.com",
"hpj.com",
"hplandmark.com",
"hrw.org",
"hsjonline.org",
"hsuoracle.com",
"hsvvoice.com",
"htrnews.com",
"hubcityspokes.com",
"hudsonpg.net",
"hudsonreporter.com",
"hudsonreporter.com",
"hudsonreporter.com",
"hudsonreporter.com",
"hudsonreporter.com",
"hudsonreporter.com",
"hudsonreporter.com",
"hudsonreporter.com",
"hudsonstarobserver.com",
"hudsonvalleyone.com",
"hudsonvalleyone.com",
"huerfanojournal.com",
"huffingtonpost.ca",
"huffingtonpost.com",
"hugonews.com",
"hugotonhermes.com",
"hulltimes.com",
"humboldtbeacon.com",
"humboldtnews.com",
"hungryhorsenews.com",
"huntersdomain.com",
"hunterword.com",
"huntingtoncountytab.com",
"huntingtonnews.net",
"huntnewsnu.com",
"hurherald.com",
"hurriyetdailynews.com",
"hutchnews.com",
"hyperallergic.com",
"i24news.tv",
"iberianet.com",
"ibj.com",
"ibtimes.com",
"icl.coop",
"idacountycourier.com",
"idahobusinessreview.com",
"idahocountyfreepress.com",
"idahoednews.org",
"idahofallsmagazine.com",
"idahomagazine.com",
"idahopress.com",
"idahoptv.org",
"idahoptv.org",
"idahoptv.org",
"idahoseniornews.com",
"idahostatejournal.com",
"idahostatesman.com",
"idahoworld.com",
"identidadlatina.com",
"idfishnhunt.com",
"idsnews.com",
"idyllwildtowncrier.com",
"iecn.com",
"ifallsjournal.com",
"iflscience.com",
"ign.com",
"iheart.com",
"ijr.com",
"illinoistimes.com",
"ilovefc.com",
"impact360.ms",
"impactolatino.com",
"impactousa.com",
"imperialbeachnewsca.com",
"imperialrepublican.com",
"improper.com",
"inarkansas.com",
"inc.com",
"indeonline.com",
"independent.co.uk",
"independent.com",
"independent.ie",
"independentappeal.com",
"independentcollegian.com",
"independentmail.com",
"independentnews.com",
"independentri.com",
"independenttribune.com",
"independentvoice.com",
"indexjournal.com",
"indexnewspaper.com",
"indiabulletinusa.com",
"indiana.edu",
"indiana9.com",
"indianagazette.com",
"indianapolisrecorder.com",
"indianas4.com",
"indianas4.com",
"indianastatesman.com",
"indiancountrytodaymedianetwork.com",
"indianexpress.com",
"indiatoday.in",
"indiewire.com",
"indreg.com",
"indy100.com",
"indyeastend.com",
"indyrepnews.com",
"indystar.com",
"indyweek.com",
"inews.co.uk",
"informermg.com",
"informermg.com",
"informnny.com",
"inforum.com",
"ingrams.com",
"inhnews.com",
"inlander.com",
"inquisitr.com",
"inside-business.com",
"insideclimatenews.org",
"insidecolumbia.net",
"insideedition.com",
"insidehighered.com",
"insideindianabusiness.com",
"insidenorthernnevada.com",
"insidenorthernnevada.com",
"insidenorthernnevada.com",
"insidenova.com",
"insidephilanthropy.com",
"insider.foxnews.com",
"insiderlouisville.com",
"insidesources.com",
"insidethegames.biz",
"insidetucsonbusiness.com",
"insight.kellogg.northwestern.edu",
"insightnews.com",
"insurancejournal.com",
"intertownrecord.com",
"inthesetimes.com",
"intouchweekly.com",
"inverse.com",
"investing.com",
"investmentnews.com",
"investopedia.com",
"investorplace.com",
"investors.com",
"inweekly.net",
"inyoregister.com",
"iol.co.za",
"iolaregister.com",
"iontelevision.com",
"iontelevision.com",
"iontelevision.com",
"iontelevision.com",
"iontelevision.com",
"iontelevision.com",
"iosconews.com",
"iosconews.com",
"iowafarmertoday.com",
"iowan.com",
"iowastatedaily.com",
"ipsnews.net",
"iptv.org",
"iptv.org",
"iptv.org",
"iptv.org",
"iptv.org",
"iptv.org",
"iptv.org",
"irish-herald.com",
"irishamericannews.com",
"irishcentral.com",
"irishecho.com",
"irishexaminer.com",
"irishmirror.ie",
"irishnews.com",
"irishtimes.com",
"ironcountyminer.com",
"ironcountyreporter.com",
"irondequoitpost.com",
"ironmountaindailynews.com",
"irontontribune.com",
"isanti-chisagocountystar.com",
"isanticountynews.com",
"island-reporter.com",
"islandadvantages.com",
"islander.org",
"islandgazette.net",
"islandpacket.com",
"islandpacket.com",
"islandssounder.com",
"islipbulletin.net",
"israelnationalnews.com",
"israeltoday.co.il",
"issaquahpress.com",
"issuu.com",
"isthmus.com",
"isubengal.com",
"itemlive.com",
"itemonline.com",
"ithaca.com",
"ithacajournal.com",
"itpro.co.uk",
"itv.com",
"ivpressonline.com",
"ivpressonline.com",
"iwantabuzz.com",
"jackcentral.com",
"jacksboronewspapers.com",
"jacksonadvocateonline.com",
"jacksoncountypilot.com",
"jacksoncountytimes.net",
"jacksonfreepress.com",
"jacksonheraldtoday.com",
"jacksonholenet.com",
"jacksonnewspapers.com",
"jacksonprogress-argus.com",
"jacksonsun.com",
"jacksontimesvoice.com",
"jacksonville.com",
"jacksonvilleprogress.com",
"jalopnik.com",
"jalrecordonline.com",
"jamaica-gleaner.com",
"jamaicaobserver.com",
"jamaicaplaingazette.com",
"jamestownnews.com",
"jamestownpress.com",
"jamestownsun.com",
"japantimes.co.jp",
"japantoday.com",
"jasonvilleindependent.com",
"jaxdailyrecord.com",
"jcadvocate.com",
"jcfloridan.com",
"jcnews.com",
"jconline.com",
"jdledger.com",
"jdnews.com",
"jdsupra.com",
"jeffcountynews.com",
"jeffcountynews.com",
"jeffersonpost.com",
"jeffersonstarnews.com",
"jenningsdailynews.net",
"jerseycountyjournal.com",
"jesupcitizenherald.com",
"jewishaz.com",
"jewishexponent.com",
"jewishjournal.com",
"jewishobserver-la.com",
"jewishpresspinellas.com",
"jewishvoicesnj.org",
"jezebel.com",
"jg-tc.com",
"jg-tc.com",
"jhnewsandguide.com",
"jhunewsletter.com",
"joeswall.com",
"johnsoncitypress.com",
"johnstoniannews.com",
"johnstoniannews.com",
"jonesborosun.com",
"jonews.com",
"joplinglobe.com",
"joplinindependent.com",
"journal-advocate.com",
"journal-eureka.com",
"journal-news.com",
"journal-news.com",
"journal-news.net",
"journal-republican.com",
"journal-spectator.com",
"journal-times.com",
"journal-topics.com",
"journal-topics.com",
"journal-topics.com",
"journal-topics.com",
"journal-topics.com",
"journal-topics.com",
"journal-topics.com",
"journal-topics.com",
"journalaz.com",
"journalaz.com",
"journaldemocrat.com",
"journalenterprise.com",
"journalexpress.net",
"journalgazette.net",
"journalherald.com",
"journalinquirer.com",
"journalistsresource.org",
"journalmpls.com",
"journalnow.com",
"journalpatriot.com",
"journalpilot.com",
"journalrecord.com",
"journalreview.com",
"journalstandard.com",
"journalstar.com",
"journalstar.com",
"journaltimes.com",
"journaltrib.com",
"journaltribune.com",
"jpinews.com",
"jpinews.com",
"jpost.com",
"jrbj.biz",
"jsonline.com",
"jsu.edu",
"jta.org",
"jtacnews.com",
"julesburgadvocate.com",
"juliannews.com",
"junctioneagle.com",
"juneauempire.com",
"jurist.org",
"jwsim.org",
"k2radio.com",
"k2tv.com",
"k5thehometeam.com",
"kaaltv.com",
"kabb.com",
"kacv.org",
"kadn.com",
"kaef.tv",
"kail.tv",
"kait8.com",
"kake.com",
"kakm.org",
"kalb.com",
"kaleo.org",
"kalonanews.com",
"kalw.org",
"kamc28.com",
"kamr.com",
"kanerepublican.com",
"kansan.com",
"kansas.com",
"kansascity.com",
"kansascity.com",
"kansascw.com",
"kaplantoday.com",
"kapptv.com",
"kard.com",
"kare11.com",
"kark.com",
"kark.com",
"kasa.com",
"kasn.com",
"katc.com",
"katu.com",
"katv.com",
"katytimes.com",
"kaufmanherald.com",
"kauz.com",
"kayutv.com",
"kazq32.org",
"kbcbtv.com",
"kbdi.org",
"kbjr.com",
"kbnt.com",
"kbnztv.com",
"kboi2.com",
"kbsi23.com",
"kbsi23.com",
"kbtc.org",
"kbtx.com",
"kbvotv.com",
"kbyutv.org",
"kbzk.com",
"kcba.com",
"kcbd.com",
"kcby.com",
"kccall.com",
"kcchronicle.com",
"kcchronicle.com",
"kcci.com",
"kcci.com",
"kcentv.com",
"kcet.org",
"kchf.com",
"kchispanicnews.com",
"kckansan.com",
"kcnonline.com",
"kcostv.org",
"kcoy.com",
"kcpo.tv",
"kcpt.org",
"kcra.com",
"kcra.com",
"kcra.com",
"kcra.com",
"kcrg.com",
"kcsg.com",
"kcsm.org",
"kcso33.com",
"kcts.org",
"kctv5.com",
"kctv5.com",
"kcur.org",
"kcvufox20.com",
"kcvufox20.com",
"kdbc.com",
"kdcg.com",
"kdhnews.com",
"kdlt.com",
"kdlt.com",
"kdminer.com",
"kdoc.tv",
"kdrv.com",
"kdrv.com",
"kdsm.com",
"kdvr.com",
"kearneycourier.com",
"kearneyhub.com",
"kearnstimes.com",
"keci.com",
"kedt.org",
"keepmecurrent.com",
"keepmecurrent.com",
"keepmecurrent.com",
"keepmecurrent.com",
"keet.org",
"keizertimes.com",
"kejr40.com",
"keloland.com",
"keloland.com",
"kempercountymessenger.com",
"kendallcountynow.com",
"kenmarend.com",
"kenoshanews.com",
"kens5.com",
"kentonbee.com",
"kentontimes.com",
"kentucky.com",
"kentuckyexplorer.com",
"kentuckyliving.com",
"kentuckymonthly.com",
"kentuckynewera.com",
"kentuckytoday.com",
"kentwired.com",
"kenvtv.com",
"keotaeagle.com",
"keprtv.com",
"kera.org",
"keranews.org",
"kernrivercourier.com",
"kernvalleysun.com",
"kesq.com",
"kesq.com",
"ket.org",
"ket.org",
"ket.org",
"ket.org",
"ket.org",
"ket.org",
"ket.org",
"ket.org",
"ketc.org",
"ketchikandailynews.com",
"ketv.com",
"keyc.tv",
"keyetv.com",
"keypennews.com",
"keysnews.com",
"keyt.com",
"kezi.com",
"kfbb.com",
"kfbimy48.com",
"kfdm.com",
"kfdx.com",
"kff.org",
"kffxtv.com",
"kfor.com",
"kfor.com",
"kfoxtv.com",
"kfsm.com",
"kfvs12.com",
"kfxa.tv",
"kfxp.com",
"kfyrtv.com",
"kgan.com",
"kgbt4.com",
"kgcwtv.com",
"kgeb.net",
"kget.com",
"kgmb.com",
"kgns.tv",
"kgun9.com",
"kgw.com",
"kgwn.tv",
"khaleejtimes.com",
"khastv.com",
"khce.org",
"khmt.com",
"khn.org",
"khon.com",
"khon2.com",
"khou.com",
"khq.com",
"khqa.com",
"khsltv.com",
"kidspot.com.au",
"kiem-tv.com",
"kiiitv.com",
"kikutv.com",
"kilgorenewsherald.com",
"kimatv.com",
"kimt.com",
"king5.com",
"kingcityrustler.com",
"kingfisherpress.net",
"kingsmannews.com",
"kingstreenews.com",
"kingsvillerecord.com",
"kinston.com",
"kint.com",
"kionrightnow.com",
"kiowacountypress.net",
"kiowacountysignal.com",
"kiowanews.com",
"kiplinger.com",
"kirksvilledailyexpress.com",
"kirkwoodstudentmedia.com",
"kiro7.com",
"kirotv.com",
"kitsapsun.com",
"kitsapsun.com",
"kittsonarea.com",
"kitv.com",
"kivitv.com",
"kixe.org",
"kjct8.com",
"kjeotv.com",
"kjrh.com",
"kjtv34.com",
"kjwp2.com",
"kjzz.com",
"kjzz.org",
"kkfx.com",
"kkpm.tv",
"kkpm.tv",
"kkspc.com",
"kktv.com",
"klax-tv.com",
"klbk.com",
"klcs.org",
"kldotv.com",
"klewtv.com",
"klft21.com",
"klfy.com",
"kljb.com",
"klkntv.com",
"klmv68.com",
"klrn.org",
"klrt.com",
"klru.org",
"klsrtvfox.com",
"kltj.org",
"kltv.com",
"klvx.org",
"km3news.com",
"kmaland.com",
"kmbc.com",
"kmbc.com",
"kmbc.com",
"kmbh.org",
"kmci.com",
"kmex.com",
"kmir6.com",
"kmiz.com",
"kmos.org",
"kmov.com",
"kmph-kfre.com",
"kmph.com",
"kmph.com",
"kmsgtv.com",
"kmsgtv.com",
"kmsstv.com",
"kmtp.tv",
"kmtr.com",
"kmvt.com",
"kmys.tv",
"kmyu.tv",
"knct.org",
"kndo.com",
"kndu.com",
"knik.com",
"knlc.tv",
"knlj.tv",
"knmetv.org",
"knoe.com",
"knoxfocus.com",
"knoxnews.com",
"knoxnews.com",
"knoxvilledailysun.com",
"knpb.org",
"knvn.com",
"knwa.com",
"koaa.com",
"koamtv.com",
"koat.com",
"koat.com",
"kob.com",
"kobtv.com",
"koco.com",
"koco.com",
"kodiakdailymirror.com",
"kofytv.com",
"kohd.com",
"koin.com",
"kokomoherald.com",
"kokomoperspective.com",
"kokomotribune.com",
"kold.com",
"kolnkgin.com",
"kolotv.com",
"kolr10.com",
"komonews.com",
"komotv.com",
"komu.com",
"kongtv.com",
"koreatimes.com",
"kotatv.com",
"kotv.com",
"kpax.com",
"kpbs.org",
"kpbt.org",
"kpcnews.com",
"kpcnews.com",
"kpcnews.com",
"kpcnews.com",
"kpcnews.com",
"kpcnews.com",
"kpcnews.com",
"kpcnews.com",
"kpdx.com",
"kpho.com",
"kpic.com",
"kplctv.com",
"kplr11.com",
"kptm.com",
"kpts.org",
"kptv.com",
"kptv.com",
"kpvi.com",
"kpwb.com",
"kpxj21.com",
"kq2.com",
"kqdsfox21.tv",
"kqed.org",
"kqegtv.com",
"kqet.com",
"krbc.tv",
"krcb.org",
"krcg.com",
"krcgtv.com",
"krcrtv.com",
"krdo.com",
"krdotv.com",
"krem.com",
"krem.com",
"krextv.com",
"krgv.com",
"kristv.com",
"krma.org",
"kron.com",
"kron4.com",
"krqe.com",
"krqe.com",
"krqe.com",
"krtv.com",
"krwg-tv.org",
"ksat.com",
"ksawtv.com",
"ksbw.com",
"ksbw.com",
"ksby.com",
"kscetv.com",
"ksdk.com",
"ksee24.com",
"ksfy.com",
"kshb.com",
"kshv.com",
"ksl.com",
"ksla.com",
"ksmq.org",
"ksn.com",
"ksnblocal4.com",
"ksnt.com",
"ksnt.com",
"ksnt.com",
"kspr.com",
"ksps.org",
"kstatecollegian.com",
"kstc45.com",
"kstp.com",
"ksusentinel.com",
"ksvi.com",
"kswo.com",
"kswt.com",
"ktabtv.com",
"ktar.com",
"ktbs.com",
"ktbytv.com",
"ktca.org",
"kteh.org",
"kten.com",
"ktgf.com",
"kticradio.com",
"ktiv.com",
"ktka.tv",
"ktla.com",
"ktlm-tv.com",
"ktmd.com",
"ktmf.com",
"ktnv.com",
"ktnw.org",
"ktoo.org",
"ktre.com",
"ktsf.com",
"ktsm.com",
"kttc.com",
"kttu.com",
"kttw.com",
"kttz.org",
"ktul.com",
"ktuu.com",
"ktva.com",
"ktvb.com",
"ktvh.com",
"ktvh.com",
"ktvl.com",
"ktvm.com",
"ktvn.com",
"ktvo.com",
"ktvq.com",
"ktvu.com",
"ktvu.com",
"ktvz.com",
"ktvz.com",
"ktxs.com",
"kued.org",
"kued.org",
"kulr8.com",
"kunamelbanews.com",
"kunc.org",
"kunptv.com",
"kunptv.com",
"kunstv.com",
"kunwtv.com",
"kunwtv.com",
"kunwtv.com",
"kuow.org",
"kuqitv.com",
"kusi.com",
"kut.org",
"kutower.com",
"kutv.com",
"kuvi45.com",
"kval.com",
"kvcr.org",
"kveo.com",
"kvewtv.com",
"kvia.com",
"kvie.org",
"kvii.com",
"kviqcbs17.com",
"kvmdtv.com",
"kvoa.com",
"kvos.com",
"kvpt.org",
"kvue.com",
"kwbq.com",
"kwbq.com",
"kwbq.com",
"kwbu.org",
"kwce.tv",
"kwch.com",
"kwgn.com",
"kwhb.com",
"kwhe.com",
"kwhs.tv",
"kwhy22.com",
"kwqc.com",
"kwsu.org",
"kwtx.com",
"kwvtsalem.com",
"kwwl.com",
"kwyb.com",
"kx4.com",
"kxan.com",
"kxgn.com",
"kxii.com",
"kxlatv.com",
"kxlf.com",
"kxly.com",
"kxrm.com",
"kxtu.com",
"kxvo.com",
"kxxv.com",
"ky-news.com",
"ky-news.com",
"ky3.com",
"kyes.com",
"kyivpost.com",
"kykernel.com",
"kyma.com",
"kystandard.com",
"kyve.org",
"kzhb.us",
"kztv10.com",
"la-mag.com",
"la.eater.com",
"labornotes.org",
"labusinessjournal.com",
"lacampana.us",
"lacrossetribune.com",
"lacrossetribune.com",
"lacrossetribune.com",
"lacrossetribune.com",
"lacrossetribune.com",
"laderatimes.com",
"ladowntownnews.com",
"ladysmithnews.com",
"lafayettecountypress.com",
"lafayettestudentnews.com",
"lafollettepress.com",
"lagniappemobile.com",
"lagrandeobserver.com",
"lagrangenews.com",
"lagrangepublishing.com",
"lagunabeachindy.com",
"lahainanews.com",
"laist.com",
"lajollalight.com",
"lajuntatribunedemocrat.com",
"lakeandpine.com",
"lakechelanmirror.com",
"lakecityreporter.com",
"lakeconews.com",
"lakecountrysun.com",
"lakecountyexam.com",
"lakecountysuburbanlife.com",
"lakegazette.net",
"lakegenevanews.net",
"lakelandtimes.com",
"lakenewsonline.com",
"lakenormanpublications.com",
"lakenormanpublications.com",
"lakeoconeebreeze.net",
"lakeorionreview.com",
"lakeplacidnews.com",
"lakepowellchronicle.com",
"lakerpioneer.com",
"lakeviewareanewspaper.com",
"lakewoodobserver.com",
"lakewoodsentinel.com",
"lakinindependent.com",
"lakotacountrytimes.com",
"laloyolan.com",
"lamardemocrat.com",
"lamarleader.com",
"lamarledger.com",
"lamesacourier.com",
"lamonitor.com",
"lamorindaweekly.com",
"lampasasdispatchrecord.com",
"lancasterbee.com",
"lancastereaglegazette.com",
"lancasteronline.com",
"lanoticia.com",
"lansesentinel.com",
"lansingstatejournal.com",
"lansingstatejournal.com",
"lanthorn.com",
"laoferta.com",
"laopinion.com",
"laopinion.com",
"lapage.com",
"laprensa-sandiego.org",
"laprensadecolorado.com",
"laprensadelosangeles.com",
"laprensademn.com",
"laprensanwa.com",
"laprensasa.com",
"laprensatoledo.com",
"laprensatoledo.com",
"laramieboomerang.com",
"laraza.com",
"larchmontchronicle.com",
"lareviewofbooks.org",
"laruecountyherald.com",
"lasamericasnews.com",
"lascrucesbulletin.com",
"lasentinel.net",
"laserbuddy.com",
"lassennews.com",
"lasvegasnow.com",
"lasvegasoptic.com",
"lasvegassun.com",
"lasvegastribune.net",
"lasvegasweekly.com",
"lasvegasweekly.com",
"latimes.com",
"latinodetroit.com",
"laughlinentertainer.com",
"laughlinentertainer.com",
"laughspin.com",
"laurelmountainpost.com",
"laureloutlook.com",
"laurelstar.com",
"laurinburgexchange.com",
"laverne.edu",
"lavozarizona.com",
"lavozcolorado.com",
"lavozdeanza.com",
"lavozdebrazoriacounty.com",
"lavozhispanact.com",
"lavozlatinaonline.net",
"lavoznewspapers.com",
"law.com",
"lawattstimes.com",
"lawdailyrecord.com",
"laweekly.com",
"lawfareblog.com",
"lawndalenews.com",
"lawrencecountypress.com",
"lawrentian.com",
"lazocultural.com",
"lbbusinessjournal.com",
"lbccviking.com",
"lbpost.com",
"lccentral.com",
"lcnewschronicle.com",
"lcnme.com",
"lcsun-news.com",
"ldnews.com",
"leader-call.com",
"leader-news.com",
"leaderadvertiser.com",
"leaderandtimes.com",
"leaderherald.com",
"leaderlandnews.com",
"leadernewsroom.com",
"leaderpost.com",
"leaderpub.com",
"leaderpub.com",
"leaderpub.com",
"leadertelegram.com",
"leadertimes.com",
"leaderunion.com",
"leadvilleherald.com",
"leavenworthecho.com",
"leavenworthtimes.com",
"lebanon-express.com",
"lebanondailyrecord.com",
"lebanondemocrat.com",
"lebanonenterprise.com",
"ledger-dispatch.com",
"ledger-enquirer.com",
"ledgertranscript.com",
"leecountyledger.com",
"leelanaunews.com",
"leesvilledailyleader.com",
"legalnews.com",
"legalnews.com",
"legislativegazette.com",
"lehighacrescitizen.com",
"lehighacresgazette.us",
"lehighvalleylive.com",
"lehighvalleylive.com",
"lemarssentinel.com",
"lenconnect.com",
"lennoxnews.com",
"leominsterchamp.com",
"leoweekly.com",
"leroyny.com",
"lesoleildelafloride.com",
"levyjournalonline.com",
"lewisboroledger.com",
"lewiscountyherald.com",
"lewispnj.com",
"lewistonjournal.net",
"lewistownnews.com",
"lewistownsentinel.com",
"lewisvilletexan.com",
"lex18.com",
"lexch.com",
"lexingtonchronicle.com",
"lexingtonleader.com",
"lexology.com",
"lfadvertiser.com",
"lfpress.com",
"lhvc.com",
"libertychampion.com",
"libertycountytimes.net",
"libertyheadlines.com",
"libertylakesplash.com",
"libertytribune.com",
"libn.com",
"liboatingworld.com",
"licjournal.com",
"lifehacker.com",
"lifenews.com",
"lifesitenews.com",
"lifezette.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"liherald.com",
"likethedew.com",
"likethedew.com",
"lillienews.com",
"lillienews.com",
"lillienews.com",
"lillienews.com",
"limaohio.com",
"lincnews.com",
"lincolncountyjournal.com",
"lincolncourier.com",
"lincolndailynews.com",
"lincolnherald.net",
"lincolnjournalonline.com",
"lincolnnewsmessenger.com",
"lincolnsentinel.com",
"lincolntimesnews.com",
"lindalenews-times.com",
"lindenherald.com",
"lindenwood.edu",
"linfield.edu",
"lingleguide.com",
"linkvermont.com",
"linnbenton.edu",
"linncountyleader.com",
"linncountynews.net",
"lionessmagazine.com",
"lionsroar.com",
"lionsroarnews.com",
"littletonindependent.net",
"live5news.com",
"livelytimes.com",
"livemint.com",
"liverpoolecho.co.uk",
"livescience.com",
"livestockweekly.com",
"livingjackson.com",
"livingstondaily.com",
"livingstonenterprise.com",
"livingstonparishnews.com",
"ljworld.com",
"lmgraphic.com",
"lmtonline.com",
"lmtribune.com",
"lobservateur.com",
"local10.com",
"local12.com",
"local15tv.com",
"local21news.com",
"local6.com",
"localdvm.com",
"localheadlinenews.com",
"localkicks.com",
"localmaine.com",
"localmaine.com",
"localmemphis.com",
"localmemphis.com",
"localmemphis.com",
"localnews8.com",
"localnews8.com",
"localnewscomesfirst.com",
"localnewscomesfirst.com",
"localrag.com",
"localsyr.com",
"localtownpages.com",
"localtownpages.com",
"localtownpages.com",
"localtownpages.com",
"localtownpages.com",
"lockhaven.com",
"lockportjournal.com",
"lockportlegend.com",
"lodinews.com",
"loganbanner.com",
"logandaily.com",
"loganwoodbine.com",
"lohud.com",
"lohud.com",
"lombardian.info",
"lompocrecord.com",
"londonderrytimes.net",
"lonesomevalleynewspaper.com",
"lonetreevoice.net",
"long-weekends.com",
"longisland.news12.com",
"longislandadvance.net",
"longislandernews.com",
"longislandpress.com",
"lonokenews.net",
"lonokenews.net",
"lonokenews.net",
"loogooteetribune.com",
"losaltosonline.com",
"losangeles.cbslocal.com",
"losbanosenterprise.com",
"loscerritosnews.net",
"lostcreekguide.com",
"loudountimes.com",
"loudountimes.com",
"louisianapressjournal.com",
"louisianatravel.com",
"louisville.com",
"louisvillecardinal.com",
"lovellchronicle.com",
"lovelycitizen.com",
"lovingtonleaderonline.com",
"lovinlife.com",
"lowcountrytoday.com",
"lowellbuyersguide.com",
"lowellsun.com",
"lowellsun.com",
"lowndessignal.com",
"loyolamaroon.com",
"lpb.org",
"lpb.org",
"lpb.org",
"lpb.org",
"lpb.org",
"lpb.org",
"lpleader.com",
"lsjournal.com",
"lslonline.net",
"lsonews.com",
"lstribune.net",
"lsureveille.com",
"lubbockonline.com",
"lucernevalleyleader.com",
"lufkindailynews.com",
"luminanews.com",
"luskherald.com",
"lyndentribune.com",
"lynnjournal.com",
"lyoncountyreporter.com",
"lyonsrecorder.com",
"maannews.com",
"maceandcrown.com",
"machiasnews.com",
"mackinacislandnews.com",
"macleans.ca",
"macombdaily.com",
"macon.com",
"maconcountytimes.com",
"maconhomepress.com",
"macrumors.com",
"maderatribune.com",
"madison-press.com",
"madison.com",
"madison.com",
"madison.com",
"madisoncountyrecord.com",
"madisoncourier.com",
"madisoniannews.com",
"madisonjournaltoday.com",
"madisonparktimes.com",
"madisonscw.com",
"madriverunion.com",
"magic-city-news.com",
"magicvalley.com",
"magicvalleypublishing.com",
"magicvalleypublishing.com",
"magnatimes.com",
"magnoliabannernews.com",
"magnoliagazette.com",
"magnoliareporter.com",
"mahnomenpioneer.com",
"mahometdaily.com",
"mailtribune.com",
"mainebiz.biz",
"maineboats.com",
"mainecampus.com",
"maineguides.com",
"maineinsights.com",
"mainelymediallc.com",
"mainelymediallc.com",
"mainelymediallc.com",
"mainepublic.org",
"mainesportsman.com",
"mainichi.jp",
"mainlinemedianews.com",
"mainlinemedianews.com",
"mainstreetnews.com",
"maldennews.com",
"malibusurfsidenews.com",
"malibutimes.com",
"malvern-online.com",
"mammothtimes.com",
"manchestereveningnews.co.uk",
"manchesterjournal.com",
"manchesterpress.com",
"manchestertimes.com",
"manhassetpress.com",
"manhattanfreepress.com",
"manitoumessenger.com",
"mankatofreepress.com",
"mansfieldmirror.com",
"mansfieldnewsjournal.com",
"mansionglobal.com",
"mantecabulletin.com",
"maplelakemessenger.com",
"maplight.org",
"maqnews.com",
"marca.com",
"marcoislandflorida.com",
"margatenews.net",
"mariettatimes.com",
"marinecorpstimes.com",
"marinij.com",
"marinscope.com",
"marinscope.com",
"marinscope.com",
"marinscope.com",
"marinscope.com",
"marinscope.com",
"marion-press.com",
"marionrecord.com",
"marionstar.com",
"mariontoday.org",
"mariposagazette.com",
"marketplace.org",
"markets.businessinsider.com",
"marketwatch.com",
"marlboro.edu",
"marlindemocrat.com",
"marquettecountytribune.com",
"marquettewire.org",
"marshallindependent.com",
"marshallnews.com",
"marshallnewsmessenger.com",
"marshallparthenon.com",
"marshalltribune.com",
"marshfieldmail.com",
"marshfieldmail.com",
"marshfieldnewsherald.com",
"martinezgazette.com",
"martinsvillebulletin.com",
"martinsvilledaily.com",
"marysvilleglobe.com",
"marysvillejt.com",
"marysvilleonline.net",
"maryvilledailyforum.com",
"masoncountynews.com",
"massapequaobserver.com",
"massapequapost.com",
"masslive.com",
"masslive.com",
"mauinews.com",
"maysville-online.com",
"mbj.com",
"mcalesternews.com",
"mcall.com",
"mccallstarnews.com",
"mcclatchydc.com",
"mccookgazette.com",
"mcdonoughvoice.com",
"mcdowellnews.com",
"mcduffieprogress.com",
"mcgregormirror.com",
"mchnews.com",
"mcindependentnews.com",
"mcitizen.com",
"mckenzieriverreflectionsnewspaper.com",
"mckinleyvillepress.com",
"mcleanconnection.com",
"mcleansborotimesleader.com",
"mcnairycountynews.com",
"mcnewsonline.com",
"mcphersonsentinel.com",
"mcrecord.com",
"mcrecordonline.com",
"md-update.com",
"mdcoastdispatch.com",
"mdislander.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdjonline.com",
"mdwfp.com",
"meadecountymessenger.com",
"meadvilletribune.com",
"mebaneenterprise.com",
"mecktimes.com",
"mediaite.com",
"mediamatters.org",
"medina-gazette.com",
"medpagetoday.com",
"mega.tv",
"melrosebeacon.com",
"memphisdailynews.com",
"memphisdemocrat.com",
"memphisflyer.com",
"menastar.com",
"mendocinobeacon.com",
"mendonoma.com",
"mendotareporter.com",
"mercedcountytimes.net",
"mercedsunstar.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercurynews.com",
"mercyhurst.edu",
"meridianstar.com",
"merrillfotonews.com",
"mesalegend.com",
"mesquitelocalnews.com",
"messagemedia.co",
"messagemedia.co",
"messenger-index.com",
"messenger-inquirer.com",
"messenger-inquirer.com",
"messengernews.net",
"messengerpaper.com",
"messengerweekly.net",
"methowvalleynews.com",
"metnews.com",
"metro.co.uk",
"metro.us",
"metroactive.com",
"metromonthly.net",
"metropolisplanet.com",
"metrospirit.com",
"metrotimes.com",
"metroweekly.com",
"metrowestdailynews.com",
"metteradvertiser.com",
"metvmilwaukee.com",
"metvnetwork.com",
"mexicoledger.com",
"mg.co.za",
"mhealthintelligence.com",
"mhznetworks.org",
"mhznetworks.org",
"mi-reporter.com",
"miami.cbslocal.com",
"miami.com",
"miamiherald.com",
"miaminewtimes.com",
"miamiok.com",
"miamistudent.net",
"miamitimesonline.com",
"miamitodaynews.com",
"mibiz.com",
"mibiz.com",
"michigandaily.com",
"michigangolfer.com",
"michiganjournal.org",
"michiganmagazine.com",
"michiganradio.org",
"michigansthumb.com",
"michronicleonline.com",
"micromediapubs.com",
"micromediapubs.com",
"micromediapubs.com",
"micromediapubs.com",
"micromediapubs.com",
"micromediapubs.com",
"micromediapubs.com",
"midcountymemo.com",
"middleburycampus.com",
"middlesborodailynews.com",
"middletownpress.com",
"middletowntranscript.com",
"midhudsonnews.com",
"midiaenterprise.com",
"midksnews.com",
"midriversnewsmagazine.com",
"midtod.com",
"midvalleynews.com",
"midweek.com",
"midweeknews.com",
"midwestmessenger.com",
"midwestmessenger.com",
"mihomepaper.com",
"mihomepaper.com",
"mihomepaper.com",
"mihomepaper.com",
"mihomepaper.com",
"mihomepaper.com",
"mihomepaper.com",
"mihomepaper.com",
"mihomepaper.com",
"mihomepaper.com",
"milanmirrorexchange.com",
"milanmirrorexchange.com",
"milescitystar.com",
"milfordbeacon.com",
"milfordchronicle.net",
"milforddailynews.com",
"milfordliving.com",
"milfordmirror.com",
"military.com",
"militarypress.com",
"militarytimes.com",
"millburysutton.com",
"millelacscountytimes.com",
"millercountyliberal.com",
"miltontimes.com",
"milwaukeemagazine.com",
"mineolaamerican.com",
"mineralcountyminer.com",
"mineralwellsindex.com",
"minicassia.com",
"mininggazette.com",
"miningjournal.net",
"miniondas.com",
"minnesota.cbslocal.com",
"minnpost.com",
"minotdailynews.com",
"minutemannewscenter.com",
"minutemannewscenter.com",
"miramesanews.com",
"mirror.co.uk",
"misscotimes.com",
"missionhillgazette.com",
"missiontimescourier.com",
"missionvalleynews.com",
"missloumagazine.com",
"missoulian.com",
"missourifarmertoday.com",
"missourilife.com",
"mit.edu",
"mitchellnews.com",
"mitchellrepublic.com",
"mlb.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlive.com",
"mlssoccer.com",
"mlstargazette.com",
"mndaily.com",
"mnsun.com",
"mnsun.com",
"mnsun.com",
"mnsun.com",
"mnsun.com",
"mnsun.com",
"moabtimes.com",
"moberlymonitor.com",
"mobridgetribune.com",
"modbee.com",
"modernhealthcare.com",
"modocrecord.com",
"mohavedailynews.com",
"mohavedailynews.com",
"mohavedailynews.com",
"mokenamessenger.com",
"molokaiadvertiser-news.com",
"momenceprogressreporter.com",
"mondoviherald.net",
"monett-times.com",
"money.usnews.com",
"monitor.co.ug",
"monroebuzz.com",
"monroecountyappeal.com",
"monroecourier.com",
"monroejournal.com",
"monroelegacy.com",
"monroemonitor.com",
"monroenews.com",
"montanakaimin.com",
"montanamagazine.com",
"montanapbs.org",
"montanapbs.org",
"montecitojournal.net",
"montenews.com",
"montereycountyweekly.com",
"montereyherald.com",
"montevistajournal.com",
"montgomeryadvertiser.com",
"montgomeryadvertiser.com",
"montgomerycountynews.net",
"montgomeryherald.com",
"montgomerynews.com",
"monticelloexpress.com",
"monticellotimes.com",
"montmorencytribune.com",
"montrosepress.com",
"montynews.com",
"moodycountyenterprise.com",
"moorefieldexaminer.com",
"moorenews.com",
"mooresvilletribune.com",
"mor-tv.com",
"mor-tv.com",
"moraminn.com",
"morgancountycitizen.com",
"morganhilltimes.com",
"morganmessenger.com",
"morganton.com",
"morning-times.com",
"morningjournal.com",
"morningjournalnews.com",
"morningstar.com",
"morningsun.net",
"morrisherald-news.com",
"morrissuntribune.com",
"morrissuntribune.com",
"mortontimesnews.com",
"motherboard.vice.com",
"motherjones.com",
"motorsport.com",
"moultonadvertiser.com",
"moultrieobserver.com",
"moundcitynews.com",
"mountain-news.com",
"mountainadvocate.com",
"mountaineagle.com",
"mountainecho.com",
"mountainenterprise.com",
"mountainhomenews.com",
"mountainjackpot.com",
"mountainlake.org",
"mountainmessenger.com",
"mountainmonthly.com",
"mountainstatesman.com",
"mountaintimes.net",
"mountainviewstandard.com",
"mountainx.com",
"mountolivetribune.com",
"mountvernongazette.com",
"mountvernonnews.com",
"movillerecord.com",
"mpacorn.com",
"mpbn.net",
"mpbn.net",
"mpbn.net",
"mpbn.net",
"mpbonline.org",
"mpbonline.org",
"mpbonline.org",
"mpbonline.org",
"mpbonline.org",
"mpcourier.com",
"mpnnow.com",
"mprnews.org",
"mpt.org",
"mpt.org",
"mpt.org",
"mpt.org",
"mptv.org",
"mptv.org",
"mrt.com",
"ms-sportsman.com",
"msadvocate.com",
"msbusiness.com",
"msgr.com",
"msjnews.com",
"msnbc.com",
"mssu.edu",
"mt-peaks.com",
"mt-vernon.com",
"mtairynews.com",
"mtayrnews.com",
"mtcarmelregister.com",
"mtdemocrat.com",
"mteagle.com",
"mtexpress.com",
"mtjulietnews.com",
"mtlakenews.com",
"mtnlaurel.com",
"mtprogress.net",
"mtshastanews.com",
"mtstandard.com",
"mtsusidelines.com",
"mtulode.com",
"mucc.org",
"muhlenbergweekly.com",
"muleshoejournal.com",
"muncievoice.com",
"mundohispanico.com",
"mundohispanotn.com",
"murfreesboropost.com",
"murraycountynews.net",
"murrayjournal.com",
"murrayledger.com",
"muscatinejournal.com",
"mushing.com",
"muskogeephoenix.com",
"mustangdaily.net",
"muwspectator.com",
"mv-voice.com",
"mvlsun.com",
"mvprogress.com",
"mvtelegraph.com",
"mvtimes.com",
"my13palmsprings.com",
"my15wtcn.com",
"my15wtcn.com",
"my16.tv",
"my18.tv",
"my20denver.com",
"my21reno.com",
"my40.tv",
"my43.net",
"my43.tv",
"my48.tv",
"my50.tv",
"my59.tv",
"my64.tv",
"my65orlando.com",
"my9nj.com",
"myajc.com",
"myandrewsjournal.com",
"myarklamiss.com",
"myarklamiss.com",
"myatltv.com",
"mybiglake.com",
"mybrtv.com",
"mybulletinnewspaper.com",
"mycaldwellcounty.com",
"mycameronnews.com",
"mycarrollcountynews.com",
"mycarrollcountynews.com",
"mycbs4.com",
"mycbs4.com",
"mycentraljersey.com",
"mycentraljersey.com",
"mycentx.com",
"mycentx.com",
"mychamplainvalley.com",
"mychamplainvalley.com",
"mycitizensnews.com",
"mycitypaper.com",
"mydailyrecord.com",
"mydailyregister.com",
"mydailysentinel.com",
"mydailytribune.com",
"mydallaspost.com",
"mydaytondailynews.com",
"myeasternshoremd.com",
"myeasternshoremd.com",
"myeasternshoremd.com",
"myeasternshoremd.com",
"myeasternshoremd.com",
"myeldorado.net",
"myetv.org",
"myetv.org",
"myetv.org",
"myeyewitnessnews.com",
"myfox28columbus.com",
"myfox8.com",
"myfoxboston.com",
"myfoxmaine.com",
"myfoxmemphis.com",
"myfoxnepa.com",
"myfoxtallahassee.com",
"myfoxzone.com",
"mygtn.tv",
"myhighplains.com",
"myhighplains.com",
"myhighplains.com",
"myironcountynews.com",
"myjohnstownbreeze.com",
"myjournalcourier.com",
"myksmotv.com",
"mylaredofox.com",
"mylvtv.com",
"mymalonetelegram.com",
"mymcr.net",
"mymetmedia.com",
"mymichianatv.com",
"mymonticellonews.net",
"myndnow.com",
"myndnow.com",
"myndnow.com",
"myndnow.com",
"mynew32.com",
"myneworleans.com",
"mynews3.com",
"mynews4.com",
"mynorth.com",
"mynorthwest.com",
"mynptv.org",
"mynptv.org",
"mynptv.org",
"mynwapaper.com",
"mypanhandle.com",
"myphl17.com",
"myplainview.com",
"myprogressnews.com",
"myrdctv.com",
"myrecordjournal.com",
"myrtlebeachonline.com",
"mysanantonio.com",
"mysanantonio.com",
"mysanfordherald.com",
"mysoutex.com",
"mysoutex.com",
"myspace.com",
"mystateline.com",
"mystateline.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysuburbanlife.com",
"mysullivannews.com",
"mysuncoast.com",
"mytjnow.com",
"mytrimblenews.com",
"mytrpaper.com",
"mytv13.com",
"mytv30web.com",
"mytv4albany.com",
"mytv9web.com",
"mytvbaltimore.com",
"mytvbuffalo.com",
"mytvcharleston.com",
"mytvdayton.com",
"mytvmonterey.com",
"mytvrichmond.com",
"mytvwichita.com",
"mytvwichita.com",
"mytvz.com",
"mytwintiers.com",
"myvalleynews.com",
"myvictoriaonline.com",
"mywabashvalley.com",
"mywabashvalley.com",
"mywaynenews.com",
"mywdka.com",
"mywebtimes.com",
"mywindsornow.com",
"mywnynews.com",
"mywnynews.com",
"naacp.org",
"nadignewspapers.com",
"napavalleyregister.com",
"napavalleyregister.com",
"napavalleyregister.com",
"napavalleyregister.com",
"naplesnews.com",
"naplesnews.com",
"naplesnews.com",
"naplesnews.com",
"nashobavalleyvoice.com",
"nashobavalleyvoice.com",
"nashobavalleyvoice.com",
"nashobavalleyvoice.com",
"nashobavalleyvoice.com",
"nashobavalleyvoice.com",
"nashobavalleyvoice.com",
"nashuatelegraph.com",
"nashvillecitypaper.com",
"nashvillescene.com",
"nassaucountyrecord.com",
"nassauweekly.com",
"natchezdemocrat.com",
"natchitochestimes.com",
"nation.co.ke",
"nationalgeographic.com",
"nationalinterest.org",
"nationalobserver.com",
"nationalpost.com",
"nationalreview.com",
"natlawreview.com",
"nature.com",
"navajotimes.com",
"navarrepress.com",
"navasotaexaminer.com",
"navigatorjournal.com",
"navytimes.com",
"nba.com",
"nbc-2.com",
"nbc11news.com",
"nbc12.com",
"nbc15.com",
"nbc16.com",
"nbc24.com",
"nbc25news.com",
"nbc29.com",
"nbc33tv.com",
"nbc4i.com",
"nbcactionnews.com",
"nbcbayarea.com",
"nbcbayarea.com",
"nbcboston.com",
"nbcchicago.com",
"nbcchicago.com",
"nbcconnecticut.com",
"nbcdfw.com",
"nbcforwyoming.com",
"nbcforwyoming.com",
"nbclosangeles.com",
"nbcmiami.com",
"nbcmontana.com",
"nbcnews.com",
"nbcnewyork.com",
"nbcnewyork.com",
"nbcphiladelphia.com",
"nbcphiladelphia.com",
"nbcsandiego.com",
"nbcsports.com",
"nbcwashington.com",
"ncadvertiser.com",
"ncatregister.com",
"ncbtv.org",
"ncbtv.org",
"nccu.edu",
"ncnewsonline.com",
"ncnewspress.com",
"ncppub.com",
"ncppub.com",
"ncppub.com",
"ncregister.com",
"ncronline.org",
"ncse.com",
"ndhorizons.com",
"ndsmcobserver.com",
"ndsuspectrum.com",
"ndtv.com",
"ne.gov",
"neagle.com",
"nebraska.tv",
"nebraskaland.com",
"nebraskalife.com",
"necn.com",
"nelighnews.com",
"nelighnews.com",
"nemonews.net",
"neoshodailynews.com",
"neotrib.com",
"neowin.net",
"nephitimesnews.com",
"nepr.net",
"nerdwallet.com",
"neshobademocrat.com",
"nesn.com",
"nevadaappeal.com",
"nevadaappeal.com",
"nevadadailymail.com",
"nevadaiowajournal.com",
"nevadamagazine.com",
"nevadaweb.com",
"newarkadvocate.com",
"newarkadvocate.com",
"newarkadvocate.com",
"newarkpostonline.com",
"newbernsj.com",
"newberry-news.com",
"newberryobserver.com",
"newburyportnews.com",
"newcanaandarienmag.com",
"newcanaannewsonline.com",
"newcarlislenews.net",
"newcomerstown-news.com",
"newhampshire.com",
"newhampshire.com",
"newhampshire.com",
"newhampshirelakesandmountains.com",
"newhampshirelakesandmountains.com",
"newhampshirelakesandmountains.com",
"newhampshirelakesandmountains.com",
"newhampshirelakesandmountains.com",
"newhampshirelakesandmountains.com",
"newhampshirelakesandmountains.com",
"newhavenbanner.com",
"newhavenindependent.org",
"newindianexpress.com",
"newjersey.news12.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newjerseyhills.com",
"newkirkherald.com",
"newlenoxpatriot.com",
"newmexicoscw.tv",
"newmilfordspectrum.com",
"neworleans.com",
"neworleanscitybusiness.com",
"newpittsburghcourieronline.com",
"newportindependent.com",
"newportnewstimes.com",
"newportplaintalk.com",
"newportri.com",
"newportri.com",
"newpraguetimes.com",
"newpraguetimes.com",
"newrepublic.com",
"newrichlandstar.com",
"news-banner.com",
"news-bulletin.com",
"news-daily.com",
"news-examiner.net",
"news-expressky.com",
"news-gazette.com",
"news-gazette.com",
"news-graphic.com",
"news-herald.com",
"news-herald.net",
"news-journal.com",
"news-journal.net",
"news-journalonline.com",
"news-leader.com",
"news-medical.net",
"news-press.com",
"news-press.com",
"news-reporter.com",
"news-sentinel.com",
"news-shield.com",
"news-star.com",
"news.abs-cbn.com",
"news.artnet.com",
"news.bitcoin.com",
"news.com.au",
"news.sky.com",
"news.stanford.edu",
"news.stlpublicradio.org",
"news.wjct.org",
"news.yale.edu",
"news10.com",
"news18.com",
"news24.com",
"news3lv.com",
"news4jax.com",
"news4jax.com",
"news4sanantonio.com",
"news4u.me",
"news5cleveland.com",
"news9.com",
"news9.com",
"newsadvance.com",
"newsaegis.com",
"newsandcitizen.com",
"newsandsentinel.com",
"newsandtribune.com",
"newsargus.com",
"newsblade.com",
"newsbtc.com",
"newsbug.info",
"newsbug.info",
"newsbug.info",
"newsbug.info",
"newsbug.info",
"newsbug.info",
"newsbug.info",
"newsbug.info",
"newsbug.info",
"newsbusters.org",
"newschannel10.com",
"newschannel5.com",
"newschannel5.tv",
"newschannel9.com",
"newschief.com",
"newscientist.com",
"newsday.com",
"newsdemocrat.com",
"newsdemocratleader.com",
"newser.com",
"newsexaminer.com",
"newsfixnow.com",
"newsherald.com",
"newsitem.com",
"newsleader.com",
"newsminer.com",
"newsmirror.net",
"newsnet5.com",
"newsobserver.com",
"newsobserver.com",
"newsobserver.com",
"newsobserver.com",
"newsobserver.com",
"newsobserver.com",
"newsoforange.com",
"newsok.com",
"newsok.com",
"oklahoman.com",
"newson6.com",
"newsouthernview.com",
"newspress.com",
"newspressnow.com",
"newsprogress.com",
"newsrecord.org",
"newsregister.com",
"newsrepublican.com",
"newsreview.com",
"newsreview.com",
"newsreview.com",
"newssun.com",
"newstalk.com",
"newstalkflorida.com",
"newstimes.com",
"newstimes.com",
"newstopicnews.com",
"newstrib.com",
"newstribune.com",
"newstribune.info",
"newsvirginian.com",
"newswatch50.com",
"newswatchman.com",
"newsweek.com",
"newswest9.com",
"newsy.com",
"newtimesslo.com",
"newtoncitizen.com",
"newtoncountyappeal.com",
"newtoncountytimes.com",
"newtondailynews.com",
"newtownbee.com",
"newuniversity.org",
"newvision.co.ug",
"newyork.cbslocal.com",
"newyorkbeacon.net",
"newyorker.com",
"newyorkupstate.com",
"nextbigfuture.com",
"nextgov.com",
"nfl.com",
"nganews.com",
"nhbr.com",
"nhgazette.com",
"nhmagazine.com",
"nhonews.com",
"nhpr.org",
"nhregister.com",
"nhtrib.com",
"nhtrib.com",
"niagara-gazette.com",
"niagarafallsreporter.com",
"nichibei.org",
"niemanlab.org",
"nikkeiwest.com",
"nineronline.com",
"niobraratribune.com",
"nique.net",
"nj.com",
"nj.com",
"nj.com",
"nj.com",
"nj.com",
"nj.com",
"nj.com",
"nj1015.com",
"njbiz.com",
"njdiningguide.net",
"njeffersonnews.com",
"njherald.com",
"njitvector.com",
"njmonthly.com",
"njspotlight.com",
"njtoday.net",
"njtvonline.org",
"njtvonline.org",
"njtvonline.org",
"njtvonline.org",
"nkctribune.com",
"nmmagazine.com",
"nmpoliticalreport.com",
"nmsantos.com",
"nmspress.com",
"nmtribune.com",
"nmu.edu",
"nnbw.com",
"nnu.edu",
"noblescountyreview.net",
"nodawaynews.com",
"nogalesinternational.com",
"nogalesinternational.com",
"nola.com",
"nola.com",
"nola38.com",
"nomenugget.net",
"nonpareilonline.com",
"nonprofitquarterly.org",
"noozhawk.com",
"noreast.com",
"norfolkdailynews.com",
"normalite.com",
"normantranscript.com",
"northbaybusinessjournal.com",
"northbaytv.com",
"northbendeagle.com",
"northbrooktower.com",
"northcoastcitizen.com",
"northcoastjournal.com",
"northcoastnow.com",
"northcountrynow.com",
"northcountrypublicradio.org",
"northcountymessenger.com",
"northeastnews.net",
"northendregionalreview.com",
"northern-iowan.org",
"northernexpress.com",
"northernnhmagazine.com",
"northernstar.info",
"northernsunprint.com",
"northernwoodlands.org",
"northfortynews.com",
"northfortynews.com",
"northfulton.com",
"northglenn-thorntonsentinel.com",
"northhawaiinews.com",
"northiowatimes.com",
"northjersey.com",
"northjersey.com",
"northjersey.com",
"northjersey.com",
"northjersey.com",
"northjersey.com",
"northjersey.com",
"northjersey.com",
"northkitsapherald.com",
"northlandsnewscenter.com",
"northlibertyleader.com",
"northplattebulletin.com",
"northscottpress.com",
"northshorenews.com",
"northsidesun.com",
"northstate.news",
"northvalleymagazine.com",
"northwestgeorgianews.com",
"northwestgeorgianews.com",
"northwestgeorgianews.com",
"northwestgeorgianews.com",
"northwestgeorgianews.com",
"northwestgeorgianews.com",
"northwestsignal.net",
"norwalkreflector.com",
"norwichbulletin.com",
"norwoodnews.org",
"noticiasya.com",
"nowthisnews.com",
"npr.org",
"nptelegraph.com",
"nraila.org",
"nrcolumbus.com",
"nrdc.org",
"nrn.com",
"nrtoday.com",
"nsjonline.com",
"nst.com.my",
"nsunews.com",
"ntdaily.com",
"ntxe-news.com",
"nuevosiglo.com",
"nuggetnews.com",
"nujournal.com",
"numbersusa.com",
"nutfieldnews.net",
"nuvo.net",
"nvdaily.com",
"nwahomepage.com",
"nwahomepage.com",
"nwaonline.com",
"nwaonline.com",
"nwaonline.com",
"nwaonline.com",
"nwaonline.com",
"nwaonline.com",
"nwaonline.com",
"nwasianweekly.com",
"nwestiowa.com",
"nwfdailynews.com",
"nwherald.com",
"nwitimes.com",
"nwkansas.com",
"nwkansas.com",
"nwmissourinews.com",
"nwnews.com",
"nwobserver.com",
"nwtntoday.com",
"nwtntoday.com",
"ny.curbed.com",
"ny.eater.com",
"nyartsmagazine.com",
"nyc.gov",
"nydailynews.com",
"nydailynews.com",
"nymag.com",
"nypost.com",
"nysun.com",
"nytimes.com",
"nytimes.com",
"nyunews.com",
"nzherald.co.nz",
"oakdaleleader.com",
"oakhillgazette.com",
"oaklandlakefront.com",
"oaklandpostonline.com",
"oakpark.com",
"oakridger.com",
"oann.com",
"oanow.com",
"oaoa.com",
"oberlinreview.org",
"obsentinel.com",
"observer-me.com",
"observer-reporter.com",
"observer-review.com",
"observer.com",
"observernewsonline.com",
"observertoday.com",
"ocala.com",
"ocbj.com",
"occrp.org",
"oceancitytoday.net",
"och-c.com",
"ocolly.com",
"oconeeenterprise.com",
"ocregister.com",
"ocregister.com",
"ocsentinel.com",
"ocstandard.com",
"octimesnews.com",
"ocweekly.com",
"oeta.tv",
"oeta.tv",
"oeta.tv",
"offbeat.com",
"ogd.com",
"ogdenreporter.com",
"oglecountylife.com",
"oglecountynews.com",
"ohio.com",
"ohiolodgingrentals.com",
"ohiomagazine.com",
"ohiou.edu",
"ohwy.com",
"ojaivalleynews.com",
"ojornal.com",
"okawvilletimes.com",
"okcfox.com",
"okiemagazine.com",
"oklahomacity.com",
"oklahomaconstitution.com",
"oklahomatoday.com",
"okoboji.com",
"okwomanmag.com",
"oldhamera.com",
"oleantimesherald.com",
"olneydailymail.com",
"olneyenterprise.com",
"omaha.com",
"omaha.com",
"omaha.com",
"omaha.com",
"omaha.com",
"omahadailyrecord.com",
"omakchronicle.com",
"omnibusonline.com",
"oneidadispatch.com",
"onenewsnow.com",
"onlineathens.com",
"onlinechester.com",
"onlinemadison.com",
"ontonagonherald.com",
"opb.org",
"opb.org",
"opb.org",
"opb.org",
"opendemocracy.net",
"opensecrets.org",
"opensocietyfoundations.org",
"opinion-tribune.com",
"oppnewsonline.com",
"oppnewsonline.com",
"oppnewsonline.com",
"opprairie.com",
"optv.org",
"optv.org",
"orangeandblueobserver.com",
"orangeleader.com",
"orangevalesun.com",
"orbike.com",
"orchardparkbee.com",
"oregonbusiness.com",
"oregoncitylink.com",
"oregonherald.com",
"oregonlive.com",
"oregonlive.com",
"oregonmag.com",
"oriongazette.com",
"orlando-times.com",
"orlandosentinel.com",
"orlandosentinel.com",
"orlandoweekly.com",
"orovillemr.com",
"ortonvilleindependent.com",
"osceolaiowa.com",
"osceolatimes.com",
"oskaloosa.com",
"ospreyobserver.com",
"osrecord.com",
"osv.com",
"oswegocountynewsnow.com",
"oswegocountytoday.com",
"oswegonews.com",
"oswegonews.com",
"oswegonews.com",
"oswegonews.com",
"otdowntown.com",
"othellooutlook.com",
"otmj.com",
"ottawacitizen.com",
"ottawaherald.com",
"ottumwacourier.com",
"oudaily.com",
"our-hometown.com",
"ouraynews.com",
"ourcommunityfocus.com",
"ourdavie.com",
"ourherald.com",
"ourmaine.com",
"ourmidland.com",
"ourquadcities.com",
"ourquadcities.com",
"ourquadcities.com",
"ourtown.com",
"ourtownnews.com",
"ourtownnewsonline.com",
"ourtownny.com",
"ourvalley.org",
"ourvalley.org",
"ourvalley.org",
"ourvalley.org",
"ourvalley.org",
"ourvalley.org",
"ourvalleyvoice.com",
"out.com",
"outlooknewspapers.com",
"outsideonline.com",
"outsports.com",
"overtoncountynews.com",
"owentonnewsherald.com",
"owossoindependent.com",
"owutranscript.com",
"owyheepublishing.com",
"oxfordeagle.com",
"oxfordleader.com",
"oysterbayguardian.com",
"ozarkcountytimes.com",
"ozarksfirst.com",
"ozarksfirst.com",
"ozarksfirst.com",
"ozarksfn.com",
"ozarkspectator.net",
"ozaukeepress.com",
"ozonastockman.com",
"ozy.com",
"pacbiztimes.com",
"pacepress.org",
"pacesettingtimesonline.com",
"pacific-times.com",
"pacificatribune.com",
"pacificcitizen.org",
"pacificcitysun.com",
"pacificpublishingcompany.com",
"pacificsun.com",
"packet-media.com",
"paducahsun.com",
"page1publications.com",
"page1publications.com",
"page1publications.com",
"page1publications.com",
"pagelandprogressive.com",
"pagesix.com",
"pagosadailypost.com",
"pagosasun.com",
"pahomepage.com",
"pahomepage.com",
"paintsvilleherald.com",
"paisano-online.com",
"pajiba.com",
"pal-item.com",
"palaciosbeacon.com",
"paladinnews.com",
"palatkadailynews.com",
"palestineherald.com",
"palipost.com",
"palmbeachdailynews.com",
"palmbeachpost.com",
"palmbeachpost.com",
"palmswestmonthly.com",
"palmyra-spectator.com",
"paloaltoonline.com",
"pamplinmedia.com",
"pamplinmedia.com",
"pamplinmedia.com",
"pamplinmedia.com",
"pamplinmedia.com",
"pamplinmedia.com",
"pamplinmedia.com",
"panamericanonline.com",
"pananewsonline.net",
"panews.com",
"panolian.com",
"pantagraph.com",
"pantagraph.com",
"pantagraph.com",
"paolinewsrepublican.com",
"papermag.com",
"parade.com",
"paradisepost.com",
"paragoulddailypress.com",
"paramountjournal.org",
"paris-express.com",
"parisbeacon.com",
"parispi.net",
"parkcitiespeople.com",
"parkecountysentinel.com",
"parkerchronicle.net",
"parkerpioneer.net",
"parkrapidsenterprise.com",
"parkrecord.com",
"parkstonadvance.com",
"parkstonadvance.com",
"parsippanyfocus.com",
"parsonssun.com",
"pasadenaindependent.com",
"pasadenajournal.com",
"pasadenanow.com",
"pasadenastarnews.com",
"pasadenaweekly.com",
"pasoroblesdailynews.com",
"pasoroblespress.com",
"pastemagazine.com",
"patch.com",
"patheos.com",
"patriotledger.com",
"paulickreport.com",
"paulsvalleydailydemocrat.com",
"pawneerepublican.com",
"pawpawcourierleader.com",
"pawtuckettimes.com",
"paxtonrecord.net",
"paynesvillearea.com",
"paysonroundup.com",
"pbcommercial.com",
"pbcommercial.com",
"pbn.com",
"pbshawaii.org",
"pbssocal.org",
"pburgmail.com",
"pcccourier.com",
"pcgazette.com",
"pcherald.com",
"pcnr.com",
"pcrecordtimes.com",
"pctribune.com",
"pctribune.com",
"pdclarion.com",
"pe.com",
"peabodykansas.com",
"peacemakeronline.com",
"peachtreetv.com",
"pecos.net",
"pekintimes.com",
"pelhamplus.com",
"pelicanrapidspress.com",
"pellachronicle.com",
"penderthurston.com",
"pendletontimespost.com",
"pendoreillerivervalley.com",
"penfieldpost.com",
"peninsulaclarion.com",
"peninsulaclarion.com",
"peninsuladailynews.com",
"pennlive.com",
"pennlive.com",
"pennlive.com",
"people.com",
"peoplesdefender.com",
"peoriatimes.com",
"pepperdine-graphic.com",
"perhamfocus.com",
"permianbasin360.com",
"perrycountynews.com",
"perrysburg.com",
"perryvillenews.com",
"personcountylife.com",
"peshtigotimes.net",
"petaluma360.com",
"petersburgpilot.com",
"petoskeynews.com",
"petoskeynews.com",
"petoskeynews.com",
"petroleumnews.com",
"pewglobal.org",
"pewresearch.org",
"pewtrusts.org",
"pfaw.org",
"pghcitypaper.com",
"pgpost.com",
"pharostribune.com",
"philadelphia.cbslocal.com",
"philadelphia.cbslocal.com",
"philadelphiaweekly.com",
"philanthropy.com",
"philippinenews.com",
"phillipscountynews.com",
"phillipscountyreview.com",
"philly.com",
"philly.com",
"philly.com",
"phillymag.com",
"phillytrib.com",
"phillyvoice.com",
"philstar.com",
"phl17.com",
"phoenixnewtimes.com",
"phoenixvillenews.com",
"phtimes.net",
"phys.org",
"physicsworld.com",
"piadvance.com",
"piadvance.com",
"picayune-times.com",
"picayuneitem.com",
"pickensprogressonline.com",
"pickenssentinel.com",
"piercecountyherald.com",
"pikecountygeorgia.com",
"pikepress.com",
"pikespeaknewspapers.com",
"pikespeaknewspapers.com",
"pilotonline.com",
"pilotonline.com",
"pineandlakes.com",
"pinecitymn.com",
"pineconearchive.com",
"pineconepresscitizen.com",
"pineisland-eagle.com",
"pineislandnews.com",
"pinejournal.com",
"pinerivertimes.com",
"pinstripealley.com",
"piolog.com",
"piolog.com",
"pioneer-review.com",
"pioneer.org",
"pioneergroup.com",
"pioneergroup.com",
"pioneergroup.com",
"pioneergroup.com",
"pioneergroup.com",
"pioneernews.net",
"pioneertimes-me.com",
"pioneertimeswpu.com",
"pioneertribune.com",
"pipestonestar.com",
"pitch.com",
"pitchfork.com",
"pittnews.com",
"pittsfieldgazette.com",
"pix11.com",
"pjmedia.com",
"pjstar.com",
"pjstar.com",
"placerherald.com",
"placersentinel.com",
"plaindealer-sun.com",
"plainsman.com",
"plaintalk.net",
"plainviewnews.net",
"plainvillecitizen.com",
"planetary.org",
"planetjh.com",
"plaqueminesgazette.com",
"plattechronicle.com",
"plattecountycitizen.com",
"plattecountylandmark.com",
"playbill.com",
"pleasantonexpress.com",
"pleasantonweekly.com",
"plu.edu",
"plumasnews.com",
"plumasnews.com",
"plymouth-review.com",
"pnj.com",
"pntonline.com",
"pocahontastimes.com",
"poconobusinessjournal.com",
"poconorecord.com",
"pogo.org",
"pointandshoreland.com",
"points-east.com",
"polamjournal.com",
"policeone.com",
"politico.com",
"politico.eu",
"politifact.com",
"polkcountydemocrat.com",
"polkcountynewspaper.com",
"polkio.com",
"polygon.com",
"pomeradonews.com",
"pomeradonews.com",
"pomona.edu",
"poncacitynews.com",
"ponchatoula.com",
"pontevedrarecorder.com",
"pontiacdailyleader.com",
"popculture.com",
"popsci.com",
"popularmechanics.com",
"popville.com",
"portasouthjetty.com",
"portclintonnewsherald.com",
"portisabelsouthpadre.com",
"portlandmercury.com",
"portlandobserver.com",
"portlandscw32.com",
"portlandscw32.com",
"portlandtribune.com",
"portlandtribune.com",
"portlandtribune.com",
"portlandtribune.com",
"portlandtribune.com",
"portlavacawave.com",
"portorchardindependent.com",
"portsmouth-dailytimes.com",
"portuguesetimes.com",
"portwashington-news.com",
"poseycountynews.com",
"post-gazette.com",
"post-journal.com",
"post-register.com",
"post-voice.com",
"post-voice.com",
"postandcourier.com",
"postbulletin.com",
"postcrescent.com",
"postindependent.com",
"postindependent.com",
"postnewsgroup.com",
"postregister.com",
"postsignal.com",
"postsouth.com",
"poststar.com",
"potatogrower.com",
"poteaudailynews.com",
"potomacalmanac.com",
"pottsmerc.com",
"poughkeepsiejournal.com",
"powderspringsmessenger.net",
"powelltribune.com",
"poynter.org",
"ppindependent.net",
"prairieadvocate.com",
"prairiepublic.org",
"prairiepublishingmn.com",
"prairiepublishingmn.com",
"prairiepublishingmn.com",
"pratttribune.com",
"precinctreporter.com",
"premiumtimesng.com",
"prensahispanaaz.com",
"prentissheadlight.com",
"press-citizen.com",
"press-citizen.com",
"press-citizen.com",
"press-herald.com",
"press-leader.com",
"press-times.com",
"press-times.com",
"pressandguide.com",
"pressargus.com",
"pressconnects.com",
"pressdemocrat.com",
"pressenterpriseonline.com",
"pressherald.com",
"pressmentor.com",
"pressnews.com",
"pressofatlanticcity.com",
"presspublications.com",
"presspublisher.us",
"presspubs.com",
"presspubs.com",
"presspubs.com",
"presspubs.com",
"presspubs.com",
"presspubs.com",
"presspubs.com",
"presspubs.com",
"pressregister.com",
"pressreporter.com",
"pressrepublican.com",
"presstelegram.com",
"prestoncitizen.com",
"prestonhollowpeople.com",
"pri.org",
"pride.com",
"priestrivertimes.com",
"primepublishers.com",
"primepublishers.com",
"princetonherald.com",
"printroom.com",
"proctorjournal.com",
"progress-index.com",
"progressnewspaper.org",
"progresstimes.net",
"project-syndicate.org",
"propublica.org",
"prospect.org",
"prospectmagazine.co.uk",
"providencejournal.com",
"providenceonline.com",
"pryordailytimes.com",
"psdispatch.com",
"psmag.com",
"pspb.org",
"psu.edu",
"psucollegio.com",
"psuvanguard.com",
"psychologytoday.com",
"ptcbglc.com",
"ptleader.com",
"ptreyeslight.com",
"publicintegrity.org",
"publicnewsservice.org",
"publicopiniononline.com",
"pucchronicle.com",
"pulaskicountymirror.com",
"pulaskinews.net",
"pulaskinews.net",
"pulaskinews.net",
"pulaskinews.net",
"punchng.com",
"punxsutawneyspirit.com",
"purcellregister.com",
"purdueexponent.org",
"putnamcountycourier.com",
"putnamcountyrecord.com",
"putnampresstimes.com",
"putnamsentinel.com",
"pv-magazine.com",
"pvmonews.com",
"pvnews.com",
"pvtimes.com",
"pvtrib.com",
"pvvt.com",
"pvvt.com",
"pymnts.com",
"q13.com",
"q13fox.com",
"qchron.com",
"qconline.com",
"qconline.com",
"qcsunonline.com",
"qctimes.com",
"qctimes.com",
"qgazette.com",
"qns.com",
"qsaltlake.com",
"queenannenews.com",
"queenstribune.com",
"quepasamedia.com",
"quepasanoticias.com",
"quepasanoticias.com",
"quillnewspaper.com",
"quoddytides.com",
"qwestoffice.net",
"qz.com",
"rabble.ca",
"radaronline.com",
"radiotimes.com",
"rafu.com",
"rainscountyleader.com",
"raleigh2.com",
"raleighcw.com",
"rallshe.com",
"ramaponews.com",
"ramcigar.com",
"ramonajournal.com",
"ramonasentinel.com",
"ranchland-news.com",
"ranchocordovaindependent.com",
"ranchosantafereview.com",
"randolphcountyheraldtribune.com",
"randomlengthsnews.com",
"rangerreview.com",
"rankincn.com",
"rantoulpress.com",
"rapidcityjournal.com",
"rapidcityjournal.com",
"rapidcityjournal.com",
"rapidcityjournal.com",
"rappler.com",
"rappnews.com",
"rasmussenreports.com",
"ravallirepublic.com",
"rawlinstimes.com",
"rawstory.com",
"raymondville-chronicle.com",
"raynetoday.com",
"raytowneagle.com",
"rbj.net",
"rblandmark.com",
"rcnky.com",
"rcreader.com",
"rdrnews.com",
"readingeagle.com",
"readinspiredmag.org",
"realclearmarkets.com",
"realclearpolitics.com",
"reason.com",
"record-bee.com",
"record-bee.com",
"record-eagle.com",
"record-herald.com",
"record-review.com",
"recordbulletin.com",
"recordcourier.com",
"recorder.com",
"recordernews.com",
"recorderonline.com",
"recordgazette.net",
"recordherald.com",
"recordjournal.net",
"recordnet.com",
"recordonline.com",
"recordpub.com",
"recordreporter.com",
"recordstar.com",
"redandblack.com",
"redbluffdailynews.com",
"redding.com",
"redeyechicago.com",
"redfieldpress.com",
"redlandsdailyfacts.com",
"redoakexpress.com",
"redriverminer.com",
"redrocknews.com",
"redwoodtimes.com",
"reedleyexponent.com",
"reedleyexponent.com",
"refinery29.com",
"reflector-online.com",
"reflector.com",
"reflejos.com",
"reformer.com",
"region10.com",
"register-herald.com",
"register-news.com",
"register-pajaronian.com",
"registercitizen.com",
"registerguard.com",
"registerherald.com",
"registerstar.com",
"reinbeckcourier.com",
"reliefweb.int",
"religionnews.com",
"remezcla.com",
"reminderusa.net",
"rentonreporter.com",
"rep-am.com",
"reporter-times.com",
"reporter-times.com",
"reporter.net",
"reporterandfarmer.com",
"reporterherald.com",
"reporternews.com",
"reporternewspapers.net",
"reporternewspapers.net",
"reporternewspapers.net",
"republic-online.com",
"republic-online.com",
"republic-online.com",
"republican-eagle.com",
"republican-me.com",
"republican-times.com",
"republicanherald.com",
"republictimes.net",
"resilience.org",
"resorter.com",
"restaurantbusinessonline.com",
"reston-connection.com",
"retrieverweekly.com",
"reuters.com",
"reverejournal.com",
"review-news.com",
"reviewatlas.com",
"reviewjournal.com",
"reviewjournal.com",
"reviewjournal.com",
"reviewjournal.com",
"reviewonline.com",
"reviewtimes.com",
"rewire.news",
"rexburgstandardjournal.com",
"rez-biz.com",
"rfa.org",
"rferl.org",
"rgj.com",
"rgj.com",
"rgj.com",
"rheaheraldnews.com",
"rhinotimes.com",
"ricentral.com",
"ricentral.com",
"ricentral.com",
"ricentral.com",
"ricentral.com",
"ricentral.com",
"ricethresher.org",
"richfieldreaper.com",
"richlandtoday.com",
"richmond-dailynews.com",
"richmond.com",
"richmondregister.com",
"ricochet.com",
"ridgecrestca.com",
"ridgwayrecord.com",
"rimonthly.com",
"riograndesun.com",
"ripleybee.com",
"ripleynews.com",
"ripleynews.com",
"riverdalepress.com",
"riverfallsjournal.com",
"riverfronttimes.com",
"riverhillstraveler.com",
"rivernewsonline.com",
"riverpressnews.com",
"riverreporter.com",
"rivertowns.net",
"rivertownsenterprise.net",
"rmpbs.org",
"rnntv.com",
"road.cc",
"roadandtrack.com",
"roanecounty.com",
"roanoke-chowannewsherald.com",
"roanoke.com",
"robconews.com",
"robdailynews.com",
"robesonian.com",
"rochellenews-leader.com",
"rochesterfirst.com",
"rochesterlavoz.com",
"rochsent.com",
"rockawave.com",
"rockdalecitizen.com",
"rockdalereporter.com",
"rocket-courier.com",
"rocketcitynow.com",
"rocketcitynow.com",
"rocketcitynow.com",
"rockfordsquire.com",
"rocklandtimes.com",
"rockportpilot.com",
"rockrivertimes.com",
"rockstargames.com",
"rockwallheraldbanner.com",
"rockymounttelegram.com",
"roguebyline.com",
"rogueriverpress.com",
"rollcall.com",
"rollingstone.com",
"rollingthunderexpress.com",
"romesentinel.com",
"roscovoice.com",
"rosemounttownpages.com",
"rosevilletoday.com",
"roslyn-news.com",
"rossford.com",
"rossmoornews.com",
"roundupdaily.com",
"roundupweb.com",
"royalpurplenews.com",
"rpi.edu",
"rrdailyherald.com",
"rrecord.com",
"rrhgazette.com",
"rrobserver.com",
"rrstar.com",
"rsu.edu",
"rt.com",
"rte.ie",
"ruidosonews.com",
"rumfordfallstimes.com",
"ruralvermont.com",
"rushlimbaugh.com",
"rushvillerepublican.com",
"russell-publications.com",
"russell-publications.com",
"russell-publications.com",
"russell-publications.com",
"russellcountynewspapers.com",
"russellcountynewspapers.com",
"rustonleader.com",
"rustorian.com",
"rutartan.com",
"rutherfordreader.com",
"rutlandherald.com",
"rvpnews.com",
"sabethaherald.com",
"sabinetoday.com",
"sacbee.com",
"saccityexpress.com",
"sacgazette.com",
"sacobserver.com",
"sacramento.cbslocal.com",
"sacurrent.com",
"safetv.org",
"sagharborexpress.com",
"saladovillagevoice.com",
"salamancapress.com",
"salem-news.com",
"salemleader.com",
"salemnews.com",
"salemnews.net",
"salemweeklynews.com",
"salina.com",
"salisburypost.com",
"salon.com",
"saltyangler.com",
"saludastandard-sentinel.com",
"salyersvilleindependent.com",
"samessenger.com",
"sampan.org",
"sanangelolive.com",
"sanbenitocountytoday.com",
"sanclementetimes.com",
"sandiego.com",
"sandiego6.com",
"sandiegodowntownnews.com",
"sandiegomagazine.com",
"sandiegoreader.com",
"sandiegouniontribune.com",
"sandiegouniontribune.com",
"sandmountainreporter.com",
"sanduskyregister.com",
"sandyjournal.com",
"sanfordherald.com",
"sangrechronicle.com",
"sanibel-captiva-islander.com",
"sanjuanislander.com",
"sanjuanjournal.com",
"sanluisobispo.com",
"sanluisobispo.com",
"sanmarcosrecord.com",
"sanmarinotribune.com",
"sansabanews.com",
"santacruzsentinel.com",
"santafenewmexican.com",
"santamariasun.com",
"santamariatimes.com",
"santansun.com",
"santapaulatimes.com",
"saratogatodaynewspaper.com",
"saratogian.com",
"saukherald.com",
"saukvalley.com",
"saukvalley.com",
"savannahbusinessjournal.com",
"savannahherald.net",
"savannahmagazine.com",
"savannahnow.com",
"savannahtribune.com",
"sbgi.net",
"sbgi.net",
"sbgi.net",
"sbgi.net",
"sbgi.net",
"sbj.net",
"sbmag.net",
"sbnonline.com",
"sbs.com.au",
"sbstatesman.com",
"sbsun.com",
"scaddistrict.com",
"scanews.com",
"scarymommy.com",
"scdailypress.com",
"scdemocratonline.com",
"scenenewspaper.com",
"scenicrangenewsforum.com",
"scetv.org",
"scetv.org",
"scetv.org",
"scetv.org",
"scetv.org",
"sciencealert.com",
"scienceblog.com",
"sciencedaily.com",
"sciencefriday.com",
"sciencemag.org",
"sciencenews.org",
"sciencenordic.com",
"scientificamerican.com",
"scledger.net",
"scliving.coop",
"scmp.com",
"scnews.com",
"scnow.com",
"scnow.com",
"scoop.co.nz",
"scotsman.com",
"scotusblog.com",
"scroll.in",
"scsun-news.com",
"scsuntimes.com",
"sctimes.com",
"sctonline.net",
"sd.gov",
"sdbj.com",
"sdcitybeat.com",
"sdcnn.com",
"sdgnewsgroup.com",
"sdgnewsgroup.com",
"sdgnewsgroup.com",
"sdgnewsgroup.com",
"sdnews.com",
"sdnews.com",
"sdnews.com",
"sdnews.com",
"sdpb.org",
"sdtranscript.com",
"sdvoice.info",
"seacoastecho.com",
"seacoastnh.com",
"seacoastonline.com",
"seacoastonline.com",
"seacoastonline.com",
"seacoastonline.com",
"seacoastonline.com",
"seafordstar.com",
"sealynews.com",
"seattlepi.com",
"seattlespectator.com",
"seattletimes.com",
"seattleweekly.com",
"secaucushomenews.com",
"secondnexus.com",
"sedaliademocrat.com",
"sedona.biz",
"seeker.com",
"seekingalpha.com",
"seeleylake.com",
"seguingazette.com",
"sekvoice.com",
"seldovia.com",
"self.com",
"selmatimesjournal.com",
"seminoleproducer.com",
"seminolesentinel.com",
"semissourian.com",
"seniornewsga.com",
"seniorspectrumnewspaper.com",
"sent-trib.com",
"sentinel-echo.com",
"sentinel-standard.com",
"sentinelandenterprise.com",
"sentinelnews.com",
"sentinelnews.net",
"sentinelnow.com",
"sentinelsource.com",
"sentineltimes.com",
"sequimgazette.com",
"sequoyahcountytimes.com",
"servedaily.com",
"sespesun.com",
"setxhomepage.com",
"sevendaysvt.com",
"sewaneemessenger.com",
"sewardindependent.com",
"sewardindependent.com",
"sewardindependent.com",
"sewardindependent.com",
"sf.curbed.com",
"sfbayview.com",
"sfchronicle.com",
"sfexaminer.com",
"sfgate.com",
"sflcw.com",
"sfltv.net",
"sfreporter.com",
"sfvbj.com",
"sfweekly.com",
"sg.news.yahoo.com",
"sgvtribune.com",
"shannoncountycurrentwave.com",
"sharonherald.com",
"shawanoleader.com",
"shawneedispatch.com",
"shawneemissionpost.com",
"sheboyganpress.com",
"shelburnenews.com",
"shelbycountyreporter.com",
"shelbynews.com",
"shelbystar.com",
"shelbyvilledailyunion.com",
"sheltonherald.com",
"shepherdexpress.com",
"shingletownridgeridernews.com",
"shobannews.com",
"shorelinemedia.net",
"shorelinemedia.net",
"shorelinemedia.net",
"shorelinetimes.com",
"shorenewstoday.com",
"shorenewstoday.com",
"shorenewstoday.com",
"shorenewstoday.com",
"shorenewstoday.com",
"shorenewstoday.com",
"shorenewstoday.com",
"shorenewstoday.com",
"shoshonenewspress.com",
"showmetheozarks.com",
"shreveporttimes.com",
"si.com",
"sidneydailynews.com",
"sidneyherald.com",
"sierrabooster.com",
"sierraclub.org",
"sierracountyprospect.org",
"sierrastar.com",
"sierrasun.com",
"siftingsherald.com",
"signal-enterprise.com",
"signalamerican.org",
"signalscv.com",
"signaturenewspaper.com",
"sigourneynewsreview.com",
"siliconangle.com",
"silive.com",
"silverbelt.com",
"silvertonstandard.com",
"simivalleyacorn.com",
"simpsoncounty.ms",
"siouxcityjournal.com",
"siouxcountynews.com",
"siouxlandnews.com",
"siouxlandnews.com",
"siouxlandnews.com",
"siouxlandnews.com",
"siouxlandproud.com",
"siskiyoudaily.com",
"sissetoncourier.com",
"sitkasentinel.com",
"sitnews.us",
"sj-r.com",
"sjnewsonline.com",
"sjvalley-times.com",
"skagwaynews.com",
"skidmorenews.com",
"skyhidailynews.com",
"skyvalleychronicle.com",
"skywrighter.com",
"slate.com",
"sleepyeyenews.com",
"sleepyeyeonline.com",
"sltrib.com",
"smalltownpapers.com",
"smalltownpapers.com",
"smcitizen.com",
"smdailyjournal.com",
"smdailypress.com",
"smdp.com",
"smh.com.au",
"smileypete.com",
"smithfieldtimes.com",
"smithvilleherald.com",
"smithvillereview.com",
"smmercury.com",
"smmirror.com",
"smobserved.com",
"smokymountainnews.com",
"smudailycampus.com",
"snopes.com",
"snowest.com",
"snyderdailynews.com",
"so-utah.com",
"soaznewsx.com",
"socialistworker.org",
"sohojournal.com",
"soledadbee.com",
"soloneconomist.com",
"somdnews.com",
"somdnews.com",
"somdnews.com",
"somerset-kentucky.com",
"sonomanews.com",
"sonomasun.com",
"sonomawest.com",
"sonomawest.com",
"sonomawest.com",
"sonomawest.com",
"sonorannews.com",
"sooeveningnews.com",
"soompi.com",
"soprissun.com",
"soptv.org",
"soptv.org",
"sourcenewspapers.com",
"southalabamian.com",
"southbeltleader.com",
"southbendtribune.com",
"southcoasttoday.com",
"southcoasttoday.com",
"southcountytimes.com",
"southeastohiomagazine.com",
"southeastsun.com",
"southeastsun.com",
"southernboating.com",
"southerndigest.com",
"southernminn.com",
"southernminn.com",
"southernminn.com",
"southernminn.com",
"southernminn.com",
"southernminn.com",
"southernminn.com",
"southernminn.com",
"southernoregoncw.com",
"southernstandard.com",
"southforktines.com",
"southhaventribune.net",
"southhillenterprise.com",
"southingtoncitizen.com",
"southingtonobserver.com",
"southjerseylocalnews.com",
"southjerseylocalnews.com",
"southlakepress.com",
"southplatteindependent.net",
"southplattesentinel.com",
"southreporter.com",
"southsidebusiness.com",
"southsidemessenger.com",
"southsidermagazine.com",
"southsidervoice.com",
"southstrandnews.com",
"southvalleyjournal.com",
"southwestern.edu",
"southwestjournal.com",
"southwesttimes.com",
"southwhidbeyrecord.com",
"space.com",
"spacecoastdaily.com",
"spacenews.com",
"spanishjournal.com",
"sparkstrib.com",
"spartaindependent.com",
"spartalive.com",
"spartandaily.com",
"spartanecho.org",
"spcitytimes.com",
"speakinoutweeklynews.com",
"spearmanreporter.com",
"spectatornews.com",
"spectrumlocalnews.com",
"spencercountyjournal.com",
"spencerdailyreporter.com",
"spencereveningworld.com",
"spencermagnet.com",
"spiegel.de",
"spiked-online.com",
"spinalcolumnonline.com",
"spiritofjefferson.com",
"splinternews.com",
"spobserver.com",
"spokanejournal.com",
"spokesman-recorder.com",
"spokesman.com",
"spokesman.com",
"sportingjournal.com",
"sportingnews.com",
"sports.yahoo.com",
"sportsandleisuremag.com",
"spotlightnews.com",
"springfield-il.com",
"springfieldap.com",
"springfieldconnection.com",
"springfieldnewssun.com",
"springsvalleyherald.com",
"spsu.edu",
"spudman.com",
"sputniknews.com",
"srpmic-nsn.gov",
"srpressgazette.com",
"ss-times.com",
"ssentinel.com",
"ssir.org",
"ssnewstelegram.com",
"sspmt.com",
"stamfordadvocate.com",
"stamfordadvocate.com",
"stamfordplus.com",
"standard-democrat.com",
"standard-gazette.com",
"standard-journal.com",
"standard.co.uk",
"standard.net",
"standardbanner.com",
"standardmedia.co.ke",
"standardspeaker.com",
"staplesworld.com",
"star-herald.com",
"star-herald.com",
"star-telegram.com",
"star-telegram.com",
"star-telegram.com",
"star64.tv",
"staradvertiser.com",
"starandwave.com",
"starbeacon.com",
"starcourier.com",
"stardem.com",
"starfl.com",
"stargazette.com",
"starherald-me.com",
"starherald.com",
"starherald.com",
"starherald.com",
"starherald.net",
"starheraldnews.com",
"starj.com",
"starkejournal.com",
"starkvilledailynews.com",
"starlocalmedia.com",
"starlocalmedia.com",
"starlocalmedia.com",
"starlocalmedia.com",
"starlocalmedia.com",
"starlocalmedia.com",
"starlocalmedia.com",
"starlocalmedia.com",
"starlocalmedia.com",
"starnewsga.com",
"starnewsgroup.com",
"starnewsonline.com",
"startribune.com",
"starvalleyindependent.com",
"state-journal.com",
"state.id.us",
"state.id.us",
"state.ms.us",
"state.ms.us",
"state.nj.us",
"state.wy.us",
"statecollege.com",
"stategazette.com",
"statehornet.com",
"statejournal.com",
"statenews.com",
"stateportpilot.com",
"statepress.com",
"statesboroherald.com",
"statesman.com",
"statesman.com",
"statesman.com",
"statesman.com",
"statesman.com",
"statesman.com",
"statesman.com",
"statesman.com",
"statesman.com",
"statesmanexaminer.com",
"statesmanjournal.com",
"statesmanjournal.com",
"statesmanjournal.com",
"statesville.com",
"statnews.com",
"staugustine.com",
"stauntonstartimes.com",
"steamboattoday.com",
"steelcountrybee.com",
"stegenherald.com",
"sterlingbulletin.net",
"steubencourier.com",
"stevenspointjournal.com",
"stgeorgemagazine.com",
"stgeorgeutah.com",
"stiglernews.com",
"stignacenews.com",
"stillwatercountynews.com",
"stillwatergazette.com",
"stjamesnews.com",
"stlamerican.com",
"stltoday.com",
"stltoday.com",
"stmarynow.com",
"stmarynow.com",
"stonecountyenterprise.com",
"stonecountyleader.com",
"stormlake.com",
"stormlakepilottribune.com",
"stoutonia-online.com",
"stowetoday.com",
"stowsentry.com",
"straight.com",
"straitstimes.com",
"stratfordstar.com",
"streetinsider.com",
"stripes.com",
"strohmnews.com",
"strohmnews.com",
"strohmnews.com",
"studlife.com",
"stuff.co.nz",
"stuffboston.com",
"sturgisjournal.com",
"stuttgartdailyleader.com",
"stwnewspress.com",
"styleweekly.com",
"suffolkjournal.net",
"suffolknewsherald.com",
"sugarproducer.com",
"suindependent.com",
"sullivan-times.com",
"sulphurdailynews.com",
"sulphurtimes.com",
"sulross.edu",
"summersvillebeacon.com",
"summitdaily.com",
"sumnerpress.com",
"sumtercountytimes.com",
"sun-sentinel.com",
"sun-sentinel.com",
"sunad.com",
"sunburynews.com",
"suncommercial.com",
"suncommunitynews.com",
"sunews.net",
"sungazette.com",
"sunherald.com",
"sunjournal.com",
"sunnews.org",
"sunpatriot.com",
"sunpatriot.com",
"sunpatriot.com",
"sunshineexpressmedia.com",
"sunshinestatenews.com",
"sunstatepost.com",
"suntelegraph.com",
"sunthisweek.com",
"sunthisweek.com",
"sunthisweek.com",
"sunthisweek.com",
"sunthisweek.com",
"suntimes.com",
"suntimes.com",
"suntimes.com",
"super18tv.com",
"superiorne.com",
"superiortelegram.com",
"supermarketnews.com",
"supicket.com",
"sussexcountian.com",
"sussexcountypost.com",
"suunews.com",
"suwanneedemocrat.com",
"suwanneedemocrat.com",
"svherald.com",
"swarkansasnews.com",
"swarkansasnews.com",
"swarthmore.edu",
"swarthmorephoenix.com",
"swcbulletin.com",
"swcolotravel.org",
"sweethomenews.com",
"sweetwaterreporter.com",
"swiftcountymonitor.com",
"swiowanewssource.com",
"swiowanewssource.com",
"swiowanewssource.com",
"swissinfo.ch",
"swjpc.com",
"swmontanamagazine.com",
"swnewsherald.com",
"swnewsmedia.com",
"swnewsmedia.com",
"swnewsmedia.com",
"swnewsmedia.com",
"swnewsmedia.com",
"swnewsmedia.com",
"swnewsmedia.com",
"swnewsmedia.com",
"swoknews.com",
"swtimes.com",
"swvatoday.com",
"swvatoday.com",
"swvatoday.com",
"swvatoday.com",
"swvatoday.com",
"sylvaniaadvantage.com",
"sylvaniatelephone.com",
"syossetjerichotribune.com",
"syracuse.com",
"syracuse.com",
"syvnews.com",
"t-g.com",
"tabletmag.com",
"tacomadailyindex.com",
"tacomaweekly.com",
"taftindependent.com",
"taftmidwaydriller.com",
"tahlequahdailypress.com",
"tahoe.com",
"tahoe.com",
"tahoedailytribune.com",
"tahoedailytribune.com",
"takomavoice.com",
"talkingpointsmemo.com",
"tallahassee.com",
"tallahatchienews.ms",
"tallasseetribune.com",
"talonmarks.com",
"tamatoledonews.com",
"tamatoledonews.com",
"tampabay.com",
"tampabays10.com",
"tamu.edu",
"tangilena.com",
"tangilena.com",
"taosnews.com",
"tapinto.net",
"taskandpurpose.com",
"taterecord.com",
"tattnalljournal.com",
"tauntongazette.com",
"taxfoundation.org",
"taylornews.org",
"taylorpress.net",
"taylorsvillejournal.com",
"taylorsvilletimes.com",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbn.org",
"tbnweekly.com",
"tbnweekly.com",
"tbnweekly.com",
"tbnweekly.com",
"tbnweekly.com",
"tbo.com",
"tbo.com",
"tbo.com",
"tbo.com",
"tbo.com",
"tbrnews.com",
"tbrnewsmedia.com",
"tbrnewsmedia.com",
"tbrnewsmedia.com",
"tbrnewsmedia.com",
"tcnjsignal.net",
"tcpalm.com",
"tcpalm.com",
"tcpalm.com",
"tcpalm.com",
"tct-net.org",
"tct-net.org",
"tct-net.org",
"tct-net.org",
"tct-net.org",
"tctimes.com",
"tcu.edu",
"tcu360.com",
"tdn-net.com",
"tdn.com",
"tdtnews.com",
"teaweekly.com",
"techcrunch.com",
"techetoday.com",
"technewsiit.com",
"technicianonline.com",
"technologyreview.com",
"techrepublic.com",
"tecumsehchieftain.com",
"tecumsehherald.com",
"teenvogue.com",
"tehachapinews.com",
"telegram.com",
"telegram.com",
"telegramnews.net",
"telegraph.co.uk",
"telegraphindia.com",
"telemundo23.com",
"telemundo47.com",
"telemundo48.com",
"telemundo51.com",
"telemundoaustin.com",
"telemundobakersfield.com",
"telemundochicago.com",
"telemundodallas.com",
"telemundola.com",
"televisa.com.mx",
"televisa.com.mx",
"telluridenews.com",
"telluridenews.com",
"telluridenews.com",
"temple-news.com",
"tennessean.com",
"tennessean.com",
"tennessean.com",
"tennessean.com",
"terrelltribune.com",
"terrytribune.com",
"tetonvalleynews.net",
"teutopolispress.com",
"texarkanagazette.com",
"texarkanagazette.com",
"texasbasketball.com",
"texasblazenews.com",
"texasborderbusiness.com",
"texasescapes.com",
"texashighways.com",
"texashuntingnews.com",
"texasmonthly.com",
"texasobserver.org",
"texastribune.org",
"texomashomepage.com",
"texomashomepage.com",
"texomashomepage.com",
"thattvwebsite.com",
"thattvwebsite.com",
"the-american-interest.com",
"the-daily-record.com",
"the-dispatch.com",
"the-independent-news.com",
"the-journal.com",
"the-journal.com",
"the-journal.com",
"the-leader.com",
"the-messenger.com",
"the-papers.com",
"the-papers.com",
"the-review.com",
"the-scientist.com",
"the-standard.org",
"the-star.co.ke",
"the33tv.com",
"the419.com",
"theabingtonjournal.com",
"theacornonline.com",
"theadamscountyrecord.com",
"theadanews.com",
"theadvancenews.com",
"theadvertiser.com",
"theadvocate.com",
"theadvocate.com",
"theadvocate.com",
"theadvocate.com",
"theage.com.au",
"theaggie.org",
"thealbanynews.net",
"theallstate.org",
"thealmatimes.com",
"thealpenanews.com",
"thealpinesun.com",
"theamericanconservative.com",
"theanchoronline.org",
"theandersonnews.com",
"theantlersamerican.com",
"theapopkachief.com",
"theappalachianonline.com",
"thearabtribune.com",
"thearcticsounder.com",
"thearknewspaper.com",
"theasburycollegian.com",
"theatlantavoice.com",
"theatlantic.com",
"theaustinvillager.com",
"theaustralian.com.au",
"theava.com",
"theavion.com",
"theballstonjournal.com",
"thebanner.com",
"thebanneronline.com",
"thebatt.com",
"thebeachsideresident.com",
"thebeacon.net",
"thebellevilletelescope.com",
"thebelzonibanner.com",
"thebisbeeobserver.com",
"theblacksheartimes.com",
"theblaze.com",
"thebluebanner.net",
"thebody.com",
"thebostonchannel.com",
"thebottomlineonline.org",
"thebowtimes.com",
"thebrackencountynews.com",
"thebray.com",
"thebraziltimes.com",
"thebreezeonline.com",
"thebridgeportnews.com",
"thebridgeweekly.com",
"thebrightonblade.com",
"thebristolbaytimes.com",
"thebrunswicknews.com",
"thebuffalocentertribune.com",
"thebulletin.org",
"thebulletinweekly.com",
"thebusinessfarmer.com",
"thebusinesstimes.com",
"thebutlercollegian.com",
"thebv.org",
"thecabin.net",
"thecairocitizen.com",
"thecalaisadvertiser.com",
"thecalifornian.com",
"thecallnews.com",
"thecamarilloacorn.com",
"thecampanil.com",
"thecantoncitizen.com",
"thecapistranodispatch.com",
"thecarrollnews.com",
"thecarthaginian.com",
"thecash-book.com",
"thecatalinaislander.com",
"thecatoctinbanner.com",
"thecentralvirginian.com",
"thechampionnewspaper.com",
"thecharlottepost.com",
"thecharlotteweekly.com",
"thechartonline.com",
"thecherokeean.com",
"thechicagocitizen.com",
"thechiefleader.com",
"thechiefnews.com",
"thechowchillanews.com",
"thechronicle-news.com",
"thechronicle.com",
"thechronicleherald.ca",
"thechronicleofmtjuliet.com",
"thechronicleonline.com",
"thecincinnatiherald.com",
"thecitizen-times.com",
"thecitizen.com",
"theclarion.org",
"theclarionnews.com",
"theclariononline.com",
"theclause.org",
"theclaycountynews.com",
"theclaytonrecordonline.com",
"theclaytontribune.com",
"theclevelandcurrent.com",
"theclinchcountynews.com",
"theclintoncourier.net",
"theclockonline.com",
"thecoalfieldprogress.com",
"thecoalfieldprogress.com",
"thecoastnews.com",
"thecolbyecho.com",
"thecolgatemaroonnews.com",
"thecollegevoice.org",
"thecollegianur.com",
"thecolletonian.com",
"thecolumbiastar.com",
"thecolumbusgazette.com",
"thecommercialrecord.com",
"thecommunityvoice.com",
"theconcordian.org",
"theconcordianonline.com",
"theconversation.com",
"thecordovatimes.com",
"thecornellian.com",
"thecornellreview.com",
"thecortlandnews.com",
"thecountyrecord.net",
"thecourier.com",
"thecourierexpress.com",
"thecourierexpress.com",
"thecourierexpress.com",
"thecouriertimes.com",
"thecowl.com",
"thecr.com",
"thecreole.com",
"thecreswellchronicle.com",
"thecrier.net",
"thecrimson.com",
"thecrite.com",
"thecurrent-online.com",
"thecut.com",
"thecw23.com",
"thecw25.com",
"thecw46.com",
"thecwaustin.com",
"thecwlasvegas.tv",
"thecwtc.com",
"thedahloneganugget.com",
"thedailyaztec.com",
"thedailybeast.com",
"thedailycitizen.com",
"thedailycougar.com",
"thedailycourier.com",
"thedailyjournal.com",
"thedailymail.net",
"thedailynews.cc",
"thedailynewsonline.com",
"thedailyrecord.com",
"thedailyrecord.com",
"thedailyreporter.com",
"thedailyreporteronline.com",
"thedailyreview.com",
"thedailysentinel.com",
"thedailystar.com",
"thedailytimes.com",
"thedailyworld.com",
"thedalharttexan.com",
"thedalleschronicle.com",
"thedaonline.com",
"thedartmouth.com",
"theday.com",
"thedcregister.com",
"thedenverchannel.com",
"thedepauw.com",
"thederrick.com",
"thedestinlog.com",
"thedickinsonian.com",
"thedickinsonpress.com",
"thedigitalcourier.com",
"thedigitalnp.com",
"thedigitel.com",
"thediplomat.com",
"thedmonline.com",
"thedowneypatriot.net",
"thedp.com",
"thedpost.com",
"thedrinksbusiness.com",
"thedrive.com",
"thedrummer.com",
"theduplintimes.com",
"theduquesneduke.com",
"thedutchharborfisherman.com",
"theeagle.com",
"theeaglegroveeagle.com",
"theeagleonline.com",
"theeastafrican.co.ke",
"theeastcarolinian.com",
"theechonews.com",
"theecologist.org",
"theenterprise.net",
"theepitaph.com",
"theepochtimes.com",
"theet.com",
"theeveningleader.com",
"theeveningtimes.com",
"theexaminer.com",
"theexponent.com",
"theexpressnewspaper.com",
"thefacts.com",
"thefader.com",
"thefamuanonline.com",
"thefayettecountyunion.com",
"thefayettecountyunion.com",
"thefayettecountyunion.com",
"thefayettecountyunion.com",
"thefederalist.com",
"thefencepost.com",
"thefloridalawjournal.com",
"thefloridastar.com",
"theflume.com",
"thefoothillsfocus.com",
"thefoothillspaper.com",
"theforecaster.net",
"theforumnews.com",
"thefranklinjournal.com",
"thefranklinnewspost.com",
"thefranklinpress.com",
"thefranklintimes.com",
"thegallatincountynews.com",
"thegardenisland.com",
"thegardnernews.com",
"thegayword.com",
"thegazette.com",
"thegeorgeanne.com",
"thegeorgiastar.com",
"thegilmanstar.com",
"thegleaner.com",
"theglobeandmail.com",
"thegraftonnews.com",
"thegrandviewherald.com",
"thegraphic-advocate.com",
"thegraphic.org",
"thegrawn.com",
"thegreyhound.org",
"thegriffonnews.com",
"thegrio.com",
"thegrundyregister.com",
"theguardian.com",
"theguardianonline.com",
"thegurdontimes.com",
"thehamdenjournal.com",
"thehamiltonherald-news.com",
"thehammontonnews.com",
"thehartwellsun.com",
"thehawaiiherald.com",
"thehawkeye.com",
"thehayride.com",
"thehccrusader.com",
"thehealthjournals.com",
"theheartofnewengland.com",
"thehendrickspioneer.com",
"theherald-news.com",
"theherald.com.au",
"theheraldtimes.com",
"thehill.com",
"thehillnews.org",
"thehilltoponline.com",
"thehindu.com",
"thehindubusinessline.com",
"thehinsdalean.com",
"thehoosiertopics.com",
"thehorse.com",
"thehour.com",
"thehour.com",
"thehoya.com",
"thehudsonian.org",
"thehypemagazine.com",
"theijnews.com",
"theincline.com",
"theindependent.com",
"theindependentobserver.com",
"theindnews.com",
"theindychannel.com",
"theindyonline.com",
"theinertia.com",
"theinquisitor.com",
"theintell.com",
"theintelligencer.com",
"theintelligencer.net",
"theintercept.com",
"theintermountain.com",
"theirregular.com",
"theislanderonline.com",
"theislandnow.com",
"theislandnow.com",
"theitem.com",
"theithacan.org",
"thejakartapost.com",
"thejambar.com",
"thejc.com",
"thejenatimes.net",
"thejournal-news.net",
"thejournal.ie",
"thejournalera.com",
"thejournalonline.com",
"thejustice.org",
"thekansan.com",
"thekansascitychannel.com",
"theknightnews.com",
"thelafayettesun.com",
"thelakenews.com",
"thelaketoday.com",
"thelancasternews.com",
"thelandmark.com",
"thelantern.com",
"thelcn.com",
"theleaderonline.net",
"theleafchronicle.com",
"theledger.com",
"thelelandprogress.com",
"thelickingnews.com",
"thelocal.fr",
"thelocal.it",
"thelocalpaper.com",
"theloomisnews.com",
"theloquitur.com",
"themaconcountynews.com",
"themacweekly.com",
"themaineedge.com",
"themaneater.com",
"themarysue.com",
"themccrearyvoice.com",
"themcgeheetimes.com",
"themercury.com",
"themeteor.com",
"themiamihurricane.com",
"themillennews.com",
"themillerpress.com",
"theminaretonline.com",
"themindencourier.com",
"theminneotamascot.com",
"themississippilink.com",
"themonitor.com",
"themonitor.net",
"themonmouthjournal.com",
"themonroetimes.com",
"themontclarion.org",
"themonticellonews.com",
"themoorecountynews.com",
"themoreheadnews.com",
"themorningsun.com",
"themoscowtimes.com",
"themountaineagle.com",
"themountainmail.com",
"themountainpress.com",
"themsureporter.com",
"themtnear.com",
"thenation.com",
"thenational.ae",
"thenebraskasignal.com",
"theneighbornewspapers.com",
"thenevadaindependent.com",
"thenewamerican.com",
"thenewcivilrightsmovement.com",
"thenews-gazette.com",
"thenews-journal.com",
"thenews-messenger.com",
"thenews.com.pk",
"thenews.org",
"thenewsandfarmer.com",
"thenewsdispatch.com",
"thenewsdispatch.net",
"thenewsenterprise.com",
"thenewsguard.com",
"thenewsharonsun.com",
"thenewsherald.com",
"thenewsjournal.net",
"thenewsleaders.net",
"thenewsminute.com",
"thenewsobserver.com",
"thenewsrecord.com",
"thenewsstar.com",
"thenewstribune.com",
"thenewstribune.com",
"thenewstribune.com",
"thenichollsworth.com",
"thenjsentinel.com",
"thenoise.us",
"thenortheastgeorgian.com",
"thenortherner.com",
"thenorthernlight.com",
"thenorthernlight.org",
"thenorthfieldnews.com",
"thenorthwestern.com",
"theoaklandpress.com",
"theobserver.com",
"theodessan.net",
"theodessan.net",
"theohiocountynews.com",
"theolathenews.com",
"theolympian.com",
"theonion.com",
"theonlinerocket.com",
"theorion.com",
"theosakisreview.com",
"theoutline.com",
"theozarkscw.com",
"thepamliconews.com",
"thepampanews.com",
"thepaper24-7.com",
"thepaperofwabash.com",
"theparisnews.com",
"thepenn.org",
"thepenobscottimes.com",
"thepeoplesentinel.com",
"thepeoplestribune.com",
"theperrisprogress.com",
"theperrychief.com",
"thephoto-news.com",
"thepilot.com",
"thepilotnews.com",
"thepilotnews.com",
"thepilotnews.com",
"thepilotnews.com",
"thepinelog.com",
"thepittsburghchannel.com",
"theplainsman.com",
"theplainsman.com",
"theplainviewnews.com",
"thepolicenews.net",
"thepolypost.com",
"thepostandmail.com",
"thepostnewspaper.net",
"thepostsearchlight.com",
"theprairiestar.com",
"theprairiestar.com",
"thepress-sentinel.com",
"thepress.net",
"thepress.net",
"thepress.net",
"thepress.net",
"thepresstribune.com",
"theprogressnews.com",
"theprogressortimes.com",
"theprogressreview.co",
"theprovince.com",
"theprowersjournal.com",
"thepublicopinion.com",
"thequincysun.com",
"thequint.com",
"theracquet.net",
"therandolphleader.com",
"theravennanews.com",
"thereader.com",
"therecord.com",
"therecordandthursdayprinting.com",
"therecorderonline.com",
"therecordherald.com",
"therecordlive.com",
"thereddingpilot.com",
"thereflector.com",
"theregionalnews.com",
"thereminder.com",
"thereminder.com",
"thereminder.com",
"thereporter.com",
"thereporteronline.com",
"thereporteronline.net",
"therepublic.com",
"therepublicannews.com",
"theretrospect.com",
"thereviewnewspapers.com",
"theridernews.com",
"theridgefieldpress.com",
"theringer.com",
"therip.com",
"theriverbanknews.com",
"theroanoker.com",
"therogersvillereview.com",
"therolladailynews.com",
"theroot.com",
"therotundaonline.com",
"theryder.com",
"thesalemnewsonline.com",
"thesalinepost.com",
"thesandb.com",
"thesangerherald.com",
"thesantaclara.org",
"thesantamonicastar.com",
"thescottishsun.co.uk",
"thescribeonline.com",
"theseahawk.org",
"theseniorvoice.net",
"thesentinel.com",
"thesentinel.com",
"thesetonian.com",
"thesewardphoenixlog.com",
"thesheffieldpress.com",
"thesheffieldpress.com",
"theshelleypioneer.com",
"thesheridanheadlight.com",
"thesheridanpress.com",
"theshoalsnews.com",
"theshorthorn.com",
"thesidellreporter.com",
"thesimpsonian.com",
"thesiuslawnews.com",
"theskanner.com",
"thesmokymountaintimes.com",
"thesmstar.com",
"thesnaponline.com",
"thesnapper.com",
"thesomervillenews.com",
"thesounder.com",
"thesource.com",
"thesouthern.com",
"thesouthernnews.org",
"thesouthernstandard.com",
"thespec.com",
"thespectrum.com",
"thespectrum.com",
"thespringfieldsun.com",
"thestar.com.my",
"thestarnews.com",
"thestarphoenix.com",
"thestarpress.com",
"thestate.com",
"thestbernardvoice.com",
"thestokesnews.com",
"thestranger.com",
"thestreet.com",
"thesturbridgevillager.com",
"thesummervillenews.com",
"thesun.co.uk",
"thesunchronicle.com",
"thesunflower.com",
"thesunontheweb.com",
"thesunrunner.com",
"thesuntimes.com",
"thesuntimesnews.com",
"thesylvaherald.com",
"thesyracusejournal.com",
"thetahoeweekly.com",
"thetallahasseenews.com",
"thetandd.com",
"thetartan.org",
"thetd.com",
"thetechtalk.org",
"thetelegraph.com",
"thethomasvilletimes.com",
"thetigernews.com",
"thetimes-tribune.com",
"thetimes24-7.com",
"thetimesherald.com",
"thetimesnews.com",
"thetimestribune.com",
"thetimesweekly.com",
"thetoccoarecord.com",
"thetomahawk.com",
"thetombstonenews.com",
"thetower.org",
"thetowerlight.com",
"thetown-crier.com",
"thetowntalk.com",
"thetriangle.org",
"thetruecitizen.com",
"thetrumantribune.com",
"thetrussvillenews.com",
"thetundradrums.com",
"thetuskegeenews.com",
"thetyee.ca",
"theunion.com",
"theusdvista.com",
"theutcecho.com",
"thevalleychronicle.com",
"thevalleydispatch.com",
"thevalleygazette.com",
"thevalleyscw.tv",
"thevanguardonline.com",
"thevanhornadvocate.com",
"theverge.com",
"thevermilion.com",
"thevidette.com",
"theviennatimes.com",
"thevillagenews.com",
"thevillager.com",
"thevillagereporter.com",
"thevirginianreview.com",
"thevitalvoice.com",
"thevoice.us",
"thevoiceofkapolei.com",
"thevosm.net",
"thevoyageurpress.com",
"thevsn.net",
"thevwindependent.com",
"thewakullanews.com",
"thewamegosmokesignal.com",
"thewashingtondailynews.com",
"thewaynecountynews.com",
"thewaynedalenews.com",
"theweek.com",
"theweekender.com",
"theweirstimes.com",
"thewellingtonenterprise.com",
"thewesterlysun.com",
"thewesterlysun.com",
"thewesternnews.com",
"thewesterntimes.com",
"thewestfieldnews.com",
"thewestonforum.com",
"thewestsidejournal.com",
"thewetumpkaherald.com",
"thewhitonline.com",
"thewhitworthian.com",
"thewichitan.com",
"thewilliamsrecord.com",
"thewindhameagle.com",
"thewiregrassfarmer.com",
"thewoodstockindependent.com",
"theworldlink.com",
"thewrap.com",
"thexunewswire.com",
"thinkprogress.org",
"thinkstewartville.com",
"thinktv.org",
"thinktv.org",
"thisdaylive.com",
"thisweekhawaii.com",
"thisweekinthepoconos.net",
"thisweeknews.com",
"thisweeknews.com",
"thnews.com",
"thomastontimes.com",
"thonline.com",
"threeriversnews.com",
"threeriverspublishing.com",
"threeriverspublishing.com",
"thrillist.com",
"thumbprintnews.com",
"tidbitsflorida.com",
"tidewaternews.com",
"tidewaternews.com",
"tidewaternews.com",
"tiftongazette.com",
"tillamookheadlightherald.com",
"timberjay.com",
"time.com",
"times-advocate.com",
"times-gazette.com",
"times-georgian.com",
"times-georgian.com",
"times-georgian.com",
"times-herald.com",
"times-journal.com",
"times-news.com",
"times-online.com",
"times-standard.com",
"timesargus.com",
"timesbulletin.com",
"timescall.com",
"timescitizen.com",
"timescitizen.com",
"timescolonist.com",
"timescourier.com",
"timesdaily.com",
"timesdelphic.com",
"timesenterprise.com",
"timesfreepress.com",
"timesgazette.com",
"timesherald.com",
"timesheraldonline.com",
"timesindicator.com",
"timesjournal.com",
"timesjournalonline.com",
"timesleader.com",
"timesleader.net",
"timesleaderonline.com",
"timesledger.com",
"timesnews.net",
"timesobserver.com",
"timesofindia.indiatimes.com",
"timesofisrael.com",
"timesofmalta.com",
"timesonline.com",
"timespublications.com",
"timesrecord.com",
"timesrecordnews.com",
"timesreporter.com",
"timesrepublican.com",
"timesreview.com",
"timesreview.com",
"timessentinel.com",
"timestelegram.com",
"timesunion.com",
"timesuniononline.com",
"timeswv.com",
"tinleyjunction.com",
"tiogapublishing.com",
"tiogapublishing.com",
"tippgazette.com",
"tippnews.com",
"tiptonconservative.com",
"titusvilleherald.com",
"tmj4.com",
"tmnews.com",
"tmonews.com",
"tmz.com",
"tnhonline.com",
"tni-news.com",
"tnonline.com",
"tnsjournal.com",
"tntribune.com",
"toacorn.com",
"tobaccovalleynews.com",
"today.uconn.edu",
"todayonline.com",
"todaysthv.com",
"todaystmj4.com",
"toledoblade.com",
"toledocitypaper.com",
"tolosapressnews.com",
"tolosapressnews.com",
"tolosapressnews.com",
"tomahawkleader.com",
"tompkinsvillenews.com",
"tomsguide.com",
"tonganoxiemirror.com",
"tonicanews.com",
"tooeleonline.com",
"topangamessenger.com",
"topgear.com",
"torchbcc.com",
"torchonline.com",
"torontosun.com",
"torringtontelegram.com",
"townelaker.com",
"townhall.com",
"townscountyherald.net",
"townshipjournal.com",
"towntimes.com",
"towntopics.com",
"townvibe.com",
"tpt.org",
"tr3s.com",
"tr3s.com",
"traerstarclipper.com",
"transparency.org",
"travelandleisure.com",
"traveliowa.com",
"traveloregon.com",
"trcmaine.org",
"treehugger.com",
"trentonian.com",
"trentonsun.net",
"trftimes.com",
"trftimes.com",
"tri-cityherald.com",
"trib.com",
"tribdem.com",
"tribecatrib.com",
"triblive.com",
"triblive.com",
"triblive.com",
"triblive.com",
"triblive.com",
"triblive.com",
"tribstar.com",
"tribtoday.com",
"tribtown.com",
"tribunact.com",
"tribune-georgian.com",
"tribune.com.pk",
"tribune242.com",
"tribunecourier.com",
"tribuneledgernews.com",
"tricitytimes-online.com",
"tricitytrib.com",
"tricocanary.com",
"tricornernews.com",
"tricornernews.com",
"tricornernews.com",
"tricountyleader.com",
"tricountynews.mn",
"tricountysentry.com",
"tricountytimes.com",
"trinidadexpress.com",
"trinityjournal.com",
"tripinfo.com",
"triplepundit.com",
"triplicate.com",
"tristatehomepage.com",
"tristatehomepage.com",
"tritowntimes.net",
"trivalleycentral.com",
"trivalleycentral.com",
"trivalleycentral.com",
"trivalleycentral.com",
"trivalleycentral.com",
"trivalleycentral.com",
"tropnews.com",
"troublesomecreektimes.com",
"troymessenger.com",
"troyrecord.com",
"trtworld.com",
"truewestmagazine.com",
"truman.edu",
"trumbulltimes.com",
"trust.org",
"tryondailybulletin.com",
"tsln.com",
"tsnews.com",
"tsnews.com",
"tsuthemeter.com",
"tucson.com",
"tucson.com",
"tucsoncitizen.com",
"tucsonlocalmedia.com",
"tucsonlocalmedia.com",
"tucsonweekly.com",
"tuftsdaily.com",
"tulanehullabaloo.com",
"tularevoice.com",
"tullahomanews.com",
"tulsaworld.com",
"tulsaworld.com",
"tulsaworld.com",
"tulsaworld.com",
"tulsaworld.com",
"tulsaworld.com",
"tumblr.com",
"tunicatimes.com",
"turley.com",
"turley.com",
"turley.com",
"turley.com",
"turley.com",
"turley.com",
"turley.com",
"turley.com",
"turley.com",
"turlockjournal.com",
"turnagaintimes.com",
"turnto10.com",
"turnto23.com",
"turquoisemagazine.net",
"tuscaloosanews.com",
"tuscolatoday.com",
"tv20.tv",
"tv20detroit.com",
"tv52.org",
"tv7-4.com",
"tv7-4.com",
"tvinsider.com",
"tvline.com",
"tvnz.co.nz",
"tvtv.com",
"tvtv.com",
"twin-citynews.com",
"twincities.com",
"twincitytimes.com",
"twinvalleytimes.com",
"twitchy.com",
"twolanelivin.com",
"tworivertimes.com",
"twptimes.com",
"tylerpaper.com",
"tylertribute.com",
"ua.edu",
"uab.edu",
"uafsunstar.com",
"ualr.edu",
"uatrav.com",
"ubmedia.biz",
"ubspectrum.com",
"ucaecho.net",
"ucdadvocate.com",
"uconn.edu",
"ucsc.edu",
"ucsdguardian.org",
"ucsf.edu",
"ucsf.edu",
"ucsusa.org",
"udel.edu",
"udreview.com",
"uen.org",
"uft.org",
"uga.edu",
"uiargonaut.com",
"uic.edu",
"uisjournal.com",
"uiuc.edu",
"uk.news.yahoo.com",
"uk.reuters.com",
"ukiahdailyjournal.com",
"ultimateclassicrock.com",
"uml.edu",
"uncp.edu",
"unctv.org",
"unctv.org",
"unctv.org",
"unctv.org",
"unctv.org",
"unctv.org",
"unctv.org",
"unctv.org",
"unctv.org",
"unctv.org",
"undark.org",
"unews.com",
"unewsonline.com",
"unfspinnaker.com",
"unian.info",
"unidossc.com",
"union-bulletin.com",
"uniondailytimes.com",
"uniondemocrat.com",
"unioneagle.com",
"unionleader.com",
"unionnewsdaily.com",
"unionrecorder.com",
"unionvillerepublicanonline.com",
"universitychronicle.net",
"universitystar.com",
"univision27.com",
"univisionreno.com",
"univisionseattle.com",
"unlv.edu",
"unlvrebelyell.com",
"unogateway.com",
"upcw5.com",
"upi.com",
"upmatters.com",
"upnorthlive.com",
"upnorthlive.com",
"upnorthlive.com",
"upnorthlive.com",
"uppercumberland.org",
"upressonline.com",
"upstatebusinessjournal.com",
"upstatetoday.com",
"uptownexaminer.com",
"urbanacitizen.com",
"urbanmilwaukee.com",
"usatoday.com",
"usatodayhss.com",
"usf.edu",
"usforacle.com",
"usmfreepress.org",
"usnews.com",
"uspirg.org",
"usustatesman.com",
"utah.com",
"utdailybeacon.com",
"utecountrynews.com",
"utepprospector.com",
"utica.tv",
"utica.tv",
"utica.tv",
"uticaod.com",
"uticaod.com",
"utilitydive.com",
"utm.edu",
"utmpacer.com",
"utv44.com",
"uvaldeleadernews.com",
"uvureview.com",
"uwmpost.com",
"uwpexponent.com",
"uwrfvoice.com",
"uwsp.edu",
"uwtledger.com",
"vagazette.com",
"vaildaily.com",
"vaildaily.com",
"valdezstar.net",
"valdostadailytimes.com",
"valdostamagazine.com",
"valleyadvocate.com",
"valleybreeze.com",
"valleybusinessjournal.com",
"valleycenter.com",
"valleycentral.com",
"valleyjournals.com",
"valleyjournals.com",
"valleymorningstar.com",
"valleynewslive.com",
"valleynewstoday.com",
"valleyplanet.com",
"valleyrecord.com",
"valleyreporter.com",
"valleysentinel.com",
"valleytimes-news.com",
"valleytimesidaho.com",
"valleywidenewspaper.com",
"vanburencountydem.com",
"vancouversun.com",
"vandaliadrummernews.com",
"vandalialeader.com",
"vanderbilthustler.com",
"vanderbiltmich.com",
"vanityfair.com",
"vanzandtnews.com",
"vareview.com",
"variety.com",
"vashonbeachcomber.com",
"vcnewsreview.com",
"vcreporter.com",
"vcstar.com",
"vcyamerica.org",
"vegascommunityonline.com",
"vegasinc.com",
"vegnews.com",
"venicegondolier.com",
"venturebeat.com",
"verdenews.com",
"vermiliontoday.com",
"vermontjournal.com",
"vermontwoman.com",
"vernonpublishing.com",
"vernonpublishing.com",
"vernonpublishing.com",
"vernonpublishing.com",
"vfpnews.com",
"vice.com",
"news.vice.com",
"vicksburgpost.com",
"victoriaadvocate.com",
"victoriagazette.com",
"vidaenelvalle.com",
"videtteonline.com",
"viennaconnection.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagernewspapers.com",
"villagerpublishing.com",
"villages-news.com",
"villagesoup.com",
"villagesoup.com",
"villagesoup.com",
"villagesoup.com",
"villagesoup.com",
"villagesoup.com",
"villagesoup.com",
"villagesoup.com",
"villagesoup.com",
"villagevoice.com",
"vindy.com",
"vineyardgazette.com",
"virginiafirst.com",
"virginiafirst.com",
"virginiamn.com",
"virginiastar.net",
"virginiawind.com",
"visaliatimesdelta.com",
"visaliatimesdelta.com",
"visionhispanausa.com",
"visit-massachusetts.com",
"visit-newhampshire.com",
"visitidaho.org",
"visitidaho.org",
"visitindiana.net",
"visitindiana.net",
"visitnebraska.com",
"visitri.com",
"visualcapitalist.com",
"vivelohoy.com",
"vnews.com",
"voanews.com",
"voice-tribune.com",
"voicenews.com",
"voicenewsnebraska.com",
"voiceoftheozarks.net",
"volanteonline.com",
"volunteertv.com",
"vox.com",
"vp-mi.com",
"vpt.org",
"vsuspectator.com",
"vt-world.com",
"vtdigger.org",
"vtntv.com",
"vtntv.com",
"vulture.com",
"vvdailypress.com",
"vvoh.com",
"vzcountyline.com",
"waaytv.com",
"wabash.edu",
"wabg.com",
"wabi.tv",
"wabm68.com",
"wach.com",
"wacotrib.com",
"wacxtv.com",
"wadenapj.com",
"wafb.com",
"waff.com",
"wagmtv.com",
"wahoo-ashland-waverly.com",
"wahoo-ashland-waverly.com",
"wahoo-ashland-waverly.com",
"wahpetondailynews.com",
"waitsburgtimes.com",
"waka.com",
"wakeweekly.com",
"walb.com",
"waldronnews.com",
"walesonline.co.uk",
"walkermn.com",
"wallowa.com",
"waltonsun.com",
"waltontribune.com",
"wamc.org",
"wamu.org",
"wanderer.com",
"wandtv.com",
"wane.com",
"waow.com",
"wapakdailynews.com",
"wapt.com",
"wapt.com",
"warrencountyrecord.com",
"warrenrecord.com",
"warrensheaf.com",
"warricknews.com",
"wartburgcircuit.org",
"warwickonline.com",
"wasatchwave.com",
"washington.edu",
"washingtonblade.com",
"washingtoncitypaper.com",
"washingtonexaminer.com",
"washingtongolf.com",
"washingtonian.com",
"washingtonian.com",
"washingtonmonthly.com",
"washingtonpost.com",
"washingtontimes.com",
"washingtontimesreporter.com",
"washparkprofile.com",
"washtimesherald.com",
"wataugademocrat.com",
"wataugademocrat.com",
"watc.tv",
"watchdog.org",
"wate.com",
"waterbororeporter.com",
"waterburyobserver.org",
"waterfronttimes.com",
"watertowndailytimes.com",
"watfordcitynd.com",
"waukonstandard.com",
"waunetabreeze.com",
"wausaudailyherald.com",
"wausharaargus.com",
"wave3.com",
"wavenewspapers.com",
"wavy.com",
"wavy.com",
"waxahachietx.com",
"wayne.edu",
"waynecojournalbanner.com",
"waynecojournalbanner.com",
"waynecountynews.com",
"wayneindependent.com",
"waynepost.com",
"waynesvilledailyguide.com",
"wbal.com",
"wbaltv.com",
"wbaltv.com",
"wbay.com",
"wbbjtv.com",
"wbgttv.com",
"wbgu.org",
"wbir.com",
"wbjournal.com",
"wbko.com",
"wbna-21.com",
"wbns10tv.com",
"wbnx.com",
"wboc.com",
"wboy.com",
"wbph.org",
"wbra.org",
"wbrc.com",
"wbre.com",
"wbrz.com",
"wbtv.com",
"wbtw.com",
"wcav.tv",
"wcax.com",
"wcbi.com",
"wcexaminer.com",
"wcfcourier.com",
"wcfn.tv",
"wchstv.com",
"wcia.com",
"wcia.com",
"wciu.com",
"wcjb.com",
"wcmessenger.com",
"wcmla.net",
"wcmu.org",
"wcmu.org",
"wcmu.org",
"wcnc.com",
"wcny.org",
"wcoutlook.com",
"wcov.com",
"wcpo.com",
"wcpo.com",
"wcregisteronline.com",
"wcsh6.com",
"wcte.org",
"wcti12.com",
"wctrib.com",
"wctv.tv",
"wctv6.com",
"wcvb.com",
"wcve.org",
"wcve.org",
"wcve.org",
"wcwb22.com",
"wcwg20.com",
"wcyb.com",
"wdam.com",
"wday.com",
"wdbj7.com",
"wdef.com",
"wdel.com",
"wdfxfox34.com",
"wdhn.com",
"wdio.com",
"wdky56.com",
"wdrb.com",
"wdse.org",
"wdsu.com",
"wdsu.com",
"wdtimes.com",
"wdtn.com",
"wdtv.com",
"wdtv.com",
"wearecentralpa.com",
"wearegreenbay.com",
"weareiowa.com",
"weareiowa.com",
"weartv.com",
"weartv.com",
"weather.com",
"weatherforddemocrat.com",
"weau.com",
"webbweekly.com",
"webcenter11.com",
"webcoast.com",
"webelpuente.com",
"webmd.com",
"webstercountycitizen.com",
"websterjournal.com",
"websterkirkwoodtimes.com",
"websterprogresstimes.com",
"wect.com",
"wedu.org",
"weebly.com",
"weebly.com",
"week.com",
"weeklychoice.com",
"weeklycitizen.com",
"weeklynews.net",
"weeklypacket.com",
"weeklyrecordherald.com",
"weeklyview.net",
"weirtondailytimes.com",
"weiu.net",
"wellingtondailynews.com",
"wellsvilledaily.com",
"wenatcheeworld.com",
"weny.com",
"wesa.fm",
"wesh.com",
"wesh.com",
"wesh.com",
"wesleyanargus.com",
"westbendnews.net",
"westbranchtimes.com",
"westchester.news12.com",
"westchesterguardian.com",
"westchesterwag.com",
"westendword.com",
"westerncarolinian.com",
"westerncourier.com",
"westernfrontonline.net",
"westernherald.com",
"westernitasca.com",
"westernmassnews.com",
"westernnebraskaobserver.net",
"westernoregonjournal.com",
"westernslopenow.com",
"westernslopenow.com",
"westernslopenow.com",
"westernslopewatchdog.com",
"westernstylemagazine.com",
"westessextribune.net",
"westfaironline.com",
"westfaironline.com",
"westfargopioneer.com",
"westfieldrepublican.com",
"westhartfordnews.com",
"westhawaiitoday.com",
"westjordanjournal.com",
"westkentuckystar.com",
"westlibertyindex.com",
"westmilfordmessenger.com",
"westminsterheraldnews.com",
"westminsterwindow.com",
"westmorenews.com",
"westmorenews.com",
"westondemocrat.com",
"westplainsdailyquill.net",
"westport-news.com",
"westportnow.com",
"westsac.com",
"westsacramentosun.com",
"westseattleherald.com",
"westsenecabee.com",
"westsherburnetribune.com",
"westsideconnect.com",
"westsidespirit.com",
"westsidetoday.com",
"westvalleyview.com",
"westword.com",
"weta.org",
"wetmountaintribune.com",
"wetmtv.com",
"wevv.com",
"wfaa.com",
"wfae.org",
"wfft.com",
"wfgc.com",
"wfgxtv.com",
"wfgxtv.com",
"wfla.com",
"wfla.com",
"wflitv.com",
"wflxfox29.com",
"wfmj.com",
"wfmy.com",
"wfmynews2.com",
"wfmz.com",
"wfpl.org",
"wfrv.com",
"wfrv.com",
"wfsb.com",
"wfsu.org",
"wfsu.org",
"wfts.com",
"wftv.com",
"wftv.com",
"wfuogb.com",
"wfwa.org",
"wfxb.com",
"wfxg.com",
"wfxl.com",
"wfxsfox55.com",
"wfyi.org",
"wgal.com",
"wgal.com",
"wgba.com",
"wgbctv.com",
"wgbh.org",
"wgbh.org",
"wgby.org",
"wgcu.org",
"wggb.com",
"wgme.com",
"wgnm.com",
"wgno.com",
"wgno.com",
"wgnradio.com",
"wgnt.com",
"wgntv.com",
"wgrz.com",
"wgtatv.com",
"wgte.org",
"wgtu.com",
"wgtu.com",
"wgvu.org",
"wgvu.org",
"wgxa.tv",
"whartonjournal.com",
"whas11.com",
"whats-on.com",
"whbf.com",
"whbr.org",
"whdh.com",
"whdotv38.com",
"whdt.net",
"wheatridgetranscript.com",
"whec.com",
"wherela.com",
"whidbeyexaminer.com",
"whidbeynewstimes.com",
"whig.com",
"whiotv.com",
"whitecountynews.net",
"whitefishpilot.com",
"whitehalljournal.com",
"whitehallledger.com",
"whitehouse.gov",
"whiterivercurrent.com",
"whitesalmonenterprise.com",
"whitewaterpub.com",
"whitmanpioneer.com",
"whittierdailynews.com",
"whiznews.com",
"whky.com",
"whlt.com",
"whmbtv.com",
"whme.com",
"whno.com",
"whns.com",
"whnt.com",
"whotv.com",
"whotv.com",
"whro.org",
"whsv.com",
"whvoice.com",
"whyy.org",
"whyy.org",
"wibw.com",
"wibx950.com",
"wicd15.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickedlocal.com",
"wickenburg-az.com",
"wickenburgsun.com",
"wics.com",
"wics.com",
"wicu12.com",
"wicz.com",
"wifr.com",
"wilcoonline.com",
"wilcosun.com",
"wilkesbeacon.com",
"willamettecollegian.com",
"willcoxrangenews.com",
"williamsnews.com",
"williamsondailynews.com",
"williamsonherald.com",
"williamspioneerreview.com",
"willistonherald.com",
"willistonpioneer.com",
"willitsnews.com",
"willowglentimes.com",
"willspointchronicle.com",
"wilm-tv.com",
"wilmettebeacon.com",
"wilsoncountynews.com",
"wilsonpost.com",
"wilsontimes.com",
"wiltonbulletin.com",
"wilx.com",
"winchesternewsgazette.com",
"winchesterstar.com",
"windomnews.com",
"windowontheclearwater.com",
"windycitymediagroup.com",
"windycitytimes.com",
"winfieldamerican.com",
"winknews.com",
"winnetkacurrent.com",
"winnipegfreepress.com",
"winnparishenterprise.com",
"winonadailynews.com",
"winonapost.com",
"winonatimes.com",
"winstoncountyjournal.com",
"wintersetmadisonian.com",
"wintersexpress.com",
"winthroptranscript.com",
"wiproud.com",
"wiproud.com",
"wired.co.uk",
"wired.com",
"wiscassetnewspaper.com",
"wiscnews.com",
"wiscnews.com",
"wiscnews.com",
"wiscnews.com",
"wiscnews.com",
"wiscnews.com",
"wisconsinrapidstribune.com",
"wisconsinscw.com",
"wise33.com",
"wishtv.com",
"wisn.com",
"wisn.com",
"wistv.com",
"witf.org",
"witntv.com",
"wivb.com",
"wix.com",
"wix.com",
"wjactv.com",
"wjal.com",
"wjbf.com",
"wjcl.com",
"wjct.org",
"wjeb.org",
"wjeb.org",
"wjettv.com",
"wjfw-nbc12.com",
"wjhg.com",
"wjhl.com",
"wjhnews.com",
"wjla.com",
"wjlp3.com",
"wjtc.com",
"wjtv.com",
"wjwj.org",
"wjystv62.net",
"wjzy.com",
"wkar.org",
"wkbn.com",
"wkbn.com",
"wkbt.com",
"wkbw.com",
"wkcurrent.com",
"wkdh.com",
"wkef22.com",
"wkfk.com",
"wkno.org",
"wkow.com",
"wkowtv.com",
"wkrc.com",
"wkrg.com",
"wkrg.com",
"wkrn.com",
"wkrp.tv",
"wktctv.com",
"wktv.com",
"wkuherald.com",
"wkyc.com",
"wkyt.com",
"wlaj.com",
"wlbt.com",
"wlbz2.com",
"wlfi.com",
"wlio.com",
"wliw.org",
"wljc.com",
"wlky.com",
"wlky.com",
"wlla.com",
"wlmb.com",
"wlns.com",
"wlos.com",
"wlos.com",
"wlov.com",
"wlox.com",
"wlrn.org",
"wltx.com",
"wltz.com",
"wluctv6.com",
"wluf.tv",
"wluk.com",
"wlvt.org",
"wlwt.com",
"wlwt.com",
"wm.edu",
"wmar.com",
"wmbb.com",
"wmbctv.com",
"wmbd.com",
"wmbfnews.com",
"wmbftv.com",
"wmcactionnews5.com",
"wmctv.com",
"wmdntv.com",
"wmdt.com",
"wmfe.org",
"wmgt.com",
"wmht.org",
"wmicentral.com",
"wmlw.com",
"wmtw.com",
"wmtw.com",
"wmur.com",
"wmur.com",
"wmur.com",
"wmyo.com",
"wmyt12.com",
"wnct.com",
"wnd.com",
"wndu.com",
"wndy.com",
"wndytv.com",
"wned.org",
"wnem.com",
"wnep.com",
"wnep.com",
"wnet.org",
"wnewsj.com",
"wngt.com",
"wnin.org",
"wnit.org",
"wnlo.com",
"wnpt.net",
"wnsc.org",
"wnwo.com",
"wnyc.org",
"wnypapers.com",
"wnypapers.com",
"wnypapers.com",
"wnyt.com",
"woai.com",
"wogx.com",
"woitv.com",
"wokr13.tv",
"wolfpointherald.com",
"wolo.com",
"woodburybulletin.com",
"woodfordsun.com",
"woods-n-waternews.com",
"woodsideherald.com",
"woodtv.com",
"woodwardnews.net",
"woonsocketcall.com",
"wooster.edu",
"wordpress.com",
"wordpress.com",
"world.wng.org",
"worldbank.org",
"worldpoliticsreview.com",
"wosu.org",
"wosu.org",
"wothtv.com",
"wotv.com",
"wotv4women.com",
"wotv4women.com",
"woub.org",
"wowktv.com",
"wowt.com",
"wpba.org",
"wpbf.com",
"wpbf.com",
"wpbstv.org",
"wpbt2.org",
"wpde.com",
"wpde.com",
"wpecnews12.com",
"wpgh53.com",
"wpi.edu",
"wpmi.com",
"wpnews.com",
"wpr.org",
"wpri.com",
"wpsdlocal6.com",
"wpt.org",
"wpt.org",
"wpt.org",
"wpt.org",
"wpt.org",
"wpt.org",
"wpta.com",
"wptv.com",
"wptz.com",
"wptz.com",
"wpvi.com",
"wpxi.com",
"wqad.com",
"wqcw.com",
"wqed.org",
"wqln.org",
"wqow.com",
"wqpt.org",
"wral.com",
"wrangellsentinel.com",
"wranglernews.com",
"wrbl.com",
"wrcbtv.com",
"wrdw.com",
"wrdw.com",
"wreg.com",
"wrestlinginc.com",
"wret.org",
"wrex.com",
"wrgb.com",
"wric.com",
"wrightstownspirit.com",
"wrjm.com",
"wroctv.com",
"wrsptv.com",
"wrsptv.com",
"wrvo.org",
"wrxytv.com",
"wsav.com",
"wsaw.com",
"wsaz.com",
"wsbe.org",
"wsbt.com",
"wsbtv.com",
"wschronicle.com",
"wsec.org",
"wset.com",
"wsfa.com",
"wsfx.com",
"wsiltv.com",
"wsiu.org",
"wsj.com",
"wsjk-wkop.org",
"wsjk-wkop.org",
"wsky4.com",
"wsls.com",
"wsmh.com",
"wsmv.com",
"wsoctv.com",
"wsoctv.com",
"wspa.com",
"wsre.org",
"wstm.com",
"wsu.edu",
"wsusignpost.com",
"wsvn.com",
"wswg.tv",
"wsws.org",
"wsyr.com",
"wsyt68.com",
"wsyx6.com",
"wtae.com",
"wtajtv.com",
"wtci-tv45.com",
"wten.com",
"wten.com",
"wtgs.com",
"wthitv.com",
"wthr.com",
"wtkr.com",
"wtkr.com",
"wtlw.com",
"wtnh.com",
"wtnh.com",
"wtnzfox43.com",
"wtoc.com",
"wtoctv.com",
"wtok.com",
"wtol.com",
"wtop.com",
"wtov9.com",
"wtov9.com",
"wtrf.com",
"wtrf.com",
"wtsftv.com",
"wtsp.com",
"wtte28.com",
"wtto21.com",
"wtto21.com",
"wttw.com",
"wtva.com",
"wtvh.com",
"wtvi.org",
"wtvm.com",
"wtvo.com",
"wtvp.org",
"wtvq.com",
"wtvr.com",
"wtvs.org",
"wtvynews4.com",
"wtwc40.com",
"wtwo.com",
"wtxl.com",
"wuacc.edu",
"wucftv.org",
"wuft.org",
"wupltv.com",
"wusa9.com",
"wusfnews.wusf.usf.edu",
"wutv.com",
"wutv29.com",
"wuxp.com",
"wvah.com",
"wvbt.com",
"wvea.org",
"wvec.com",
"wvgazettemail.com",
"wvia.org",
"wviz.org",
"wvmetronews.com",
"wvnewsviews.com",
"wvnstv.com",
"wvobserver.com",
"wvpt.net",
"wvpt.net",
"wvpubcast.org",
"wvpubcast.org",
"wvpublic.org",
"wvtm13.com",
"wvtm13.com",
"wvva.com",
"wwaytv3.com",
"wweek.com",
"wwhotv.com",
"wwlp.com",
"wwltv.com",
"wwmt.com",
"wwnytv.com",
"wwnytv.net",
"wwsb.com",
"wxcw.com",
"wxel.org",
"wxii12.com",
"wxii12.com",
"wxii12.com",
"wxix.com",
"wxow.com",
"wxsp.tv",
"wxtx.com",
"wxvt.com",
"wxxi.org",
"wxxinews.org",
"wxxv25.com",
"wxyz.com",
"wybe.org",
"wycc.org",
"wydctv.com",
"wyes.org",
"wyff4.com",
"wyff4.com",
"wylienews.com",
"wylr.net",
"wymorearborstate.com",
"wymt.com",
"wyo.gov",
"wyodaily.com",
"wyomingnews.com",
"wyomingpublicmedia.org",
"wyoptv.org",
"wyowtv34.com",
"wytv.com",
"wytv.com",
"wyzz43.com",
"wzvntv.com",
"wzzm13.com",
"xeniagazette.com",
"xewt12.com",
"xxlmag.com",
"yadkinripple.com",
"yahoo.com",
"news.yahoo.com",
"entertainment.yahoo.com",
"yakimaherald.com",
"yaleclimateconnections.org",
"yaledailynews.com",
"yaleherald.com",
"yalnews.com",
"yamei-today.com",
"yankeemagazine.com",
"yankton.net",
"yazooherald.net",
"ycobserver.com",
"ydr.com",
"yellowhammernews.com",
"yellowstone.net",
"yellowstone.net",
"yelmonline.com",
"yesmagazine.org",
"yesweekly.com",
"yflyer.com",
"yle.fi",
"ynetnews.com",
"yorkdispatch.com",
"yorknewstimes.com",
"yorkshirepost.co.uk",
"youra.com",
"youralaskalink.com",
"yourbasin.com",
"yourbasin.com",
"yourbigsky.com",
"yourbigsky.com",
"yourcentralvalley.com",
"yourcentralvalley.com",
"yourcw.tv",
"yourcwtv.com",
"yourcwtv.com",
"yourdailyglobe.com",
"yourdailyjournal.com",
"yourdu.net",
"yourerie.com",
"yourerie.com",
"yourgv.com",
"yourobserver.com",
"yourphx.com",
"yourstephenvilletx.com",
"yourstory.com",
"yoursun.com",
"yoursun.com",
"yourwestvalley.com",
"yourwestvalley.com",
"yourwestvalley.com",
"yourxgroup.com",
"ysnews.com",
"yucommentator.org",
"yuobserver.com",
"zacks.com",
"zanesvilletimesrecorder.com",
"zavalacountysentinel.net",
"zdnet.com",
"zeenews.india.com",
"zephyrhillsnewsonline.com",
"zerkalomn.com",
"zion-bentonnews.com",
"zioncanyon.com",
"zip06.com",
"zip06.com",
"zip06.com",
"zip06.com",
"zip06.com",
"zip06.com",
"zip06.com",
"zumbrota.com"
];

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

function initialize$2 () {

  setSurvey({surveyUrl:"https://stanfordgsb.qualtrics.com/jfe/form/SV_5i37rPJXmLD1VDn",
  reminderInterval:60,
  reminderTitle:"Consent Survey Reminder",
  reminderMessage:"Please complete the consent survey!",
  reminderIcon:"",
  popupIcon:"",
  surveyCompletionUrl:"http://stanford-news-study.su.domains/" 
});

   // Start Article Contents Module
   startMeasurement({
    domains: destinationDomains
  });
  startMeasurement$2({
    domains: destinationDomains
  });

 

  // Start Advertisements Module
  startMeasurement$1({
    domains: destinationDomains
  });
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

const rally = new Rally();
rally.initialize(
  // A sample key id used for encrypting data.
  "sample-invalid-key-id",
  // A sample *valid* JWK object for the encryption.
  {
    "kty":"EC",
    "crv":"P-256",
    "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
    "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
    "kid":"Public key used in JWS spec Appendix A.3 example"
  },
  // The following constant is automatically provided by
  // the build system.
  true,
).then(resolve => {
  // Initialize the study and start it.
  initialize$2();
}, reject =>{
  // Do not start the study in this case. Something
  // went wrong.
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
